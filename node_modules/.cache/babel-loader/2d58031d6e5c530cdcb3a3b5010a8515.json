{"ast":null,"code":"import { useMemo } from \"react\";\nimport { useMediaQuery } from \"./useMediaQuery\";\n/**\n * This is a small helper that will create a media query block based on the\n * provided width value.\n */\n\nexport var toWidthPart = function (v, prefix) {\n  var type = typeof v;\n\n  if (type === \"undefined\") {\n    return \"\";\n  }\n\n  var value = type === \"number\" ? \"\".concat(v, \"px\") : v;\n  return \"(\".concat(prefix, \"-width: \").concat(value, \")\");\n};\n/**\n * This is a simple hoo that will create a memoized media query string with the\n * provided min anx max values.\n *\n * @param min - An optional min value to use\n * @param max - An optional max value to use\n * @returns a boolean if the current media query is a match.\n */\n\nexport function useWidthMediaQuery(_a) {\n  var min = _a.min,\n      max = _a.max;\n  var query = useMemo(function () {\n    var parts = [toWidthPart(min, \"min\"), toWidthPart(max, \"max\")].filter(Boolean).join(\" and \");\n    return \"screen and \".concat(parts);\n  }, [min, max]);\n  return useMediaQuery(query);\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAGA,SAASC,aAAT,QAA8B,iBAA9B;AAEA;;;;;AAIA,OAAO,IAAMC,WAAW,GAAG,UACzBC,CADyB,EAEzBC,MAFyB,EAEJ;EAErB,IAAMC,IAAI,GAAG,OAAOF,CAApB;;EACA,IAAIE,IAAI,KAAK,WAAb,EAA0B;IACxB,OAAO,EAAP;EACD;;EAED,IAAMC,KAAK,GAAGD,IAAI,KAAK,QAAT,GAAoB,UAAGF,CAAH,EAAI,IAAJ,CAApB,GAA+BA,CAA7C;EACA,OAAO,WAAIC,MAAJ,EAAU,UAAV,EAAUG,MAAV,CAAqBD,KAArB,EAA0B,GAA1B,CAAP;AACD,CAXM;AAuBP;;;;;;;;;AAQA,OAAM,SAAUE,kBAAV,CAA6BC,EAA7B,EAG+B;MAFnCC,GAAG;MACHC,GAAG;EAEH,IAAMC,KAAK,GAAGZ,OAAO,CAAC;IACpB,IAAMa,KAAK,GAAG,CAACX,WAAW,CAACQ,GAAD,EAAM,KAAN,CAAZ,EAA0BR,WAAW,CAACS,GAAD,EAAM,KAAN,CAArC,EACXG,MADW,CACJC,OADI,EAEXC,IAFW,CAEN,OAFM,CAAd;IAIA,OAAO,qBAAcH,KAAd,CAAP;EACD,CANoB,EAMlB,CAACH,GAAD,EAAMC,GAAN,CANkB,CAArB;EAQA,OAAOV,aAAa,CAACW,KAAD,CAApB;AACD","names":["useMemo","useMediaQuery","toWidthPart","v","prefix","type","value","concat","useWidthMediaQuery","_a","min","max","query","parts","filter","Boolean","join"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\sizing\\useWidthMediaQuery.ts"],"sourcesContent":["import { useMemo } from \"react\";\n\nimport type { QuerySize } from \"./constants\";\nimport { useMediaQuery } from \"./useMediaQuery\";\n\n/**\n * This is a small helper that will create a media query block based on the\n * provided width value.\n */\nexport const toWidthPart = (\n  v: QuerySize | undefined,\n  prefix: \"min\" | \"max\"\n): string => {\n  const type = typeof v;\n  if (type === \"undefined\") {\n    return \"\";\n  }\n\n  const value = type === \"number\" ? `${v}px` : v;\n  return `(${prefix}-width: ${value})`;\n};\n\ninterface WidthMediaQuery {\n  min?: QuerySize;\n  max?: QuerySize;\n}\n\ntype WidthMediaQuerys =\n  | { min: QuerySize }\n  | { max: QuerySize }\n  | { min: QuerySize; max: QuerySize };\n\n/**\n * This is a simple hoo that will create a memoized media query string with the\n * provided min anx max values.\n *\n * @param min - An optional min value to use\n * @param max - An optional max value to use\n * @returns a boolean if the current media query is a match.\n */\nexport function useWidthMediaQuery({\n  min,\n  max,\n}: WidthMediaQuery & WidthMediaQuerys): boolean {\n  const query = useMemo(() => {\n    const parts = [toWidthPart(min, \"min\"), toWidthPart(max, \"max\")]\n      .filter(Boolean)\n      .join(\" and \");\n\n    return `screen and ${parts}`;\n  }, [min, max]);\n\n  return useMediaQuery(query);\n}\n"]},"metadata":{},"sourceType":"module"}