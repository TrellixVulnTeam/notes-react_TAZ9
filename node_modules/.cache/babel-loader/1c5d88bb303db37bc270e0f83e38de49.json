{"ast":null,"code":"import { useCallback, useRef } from \"react\";\nimport { applyRef } from \"./applyRef\";\n/**\n * This is mostly an internal hook that allows for an optional ref (normally\n * from props or hook options) to be merged with a hook's required `ref`. This\n * will return a MutableRefObject used for DOM manipulation in a custom hook\n * followed by a ref callback function that should be passed to the DOM node\n * that will ensure that both the optional `propRef` and hook ref are updated.\n *\n * @remarks \\@since 2.3.0\n */\n\nexport function useEnsuredRef(propRef) {\n  var ref = useRef(null);\n  var refHandler = useCallback(function (instance) {\n    applyRef(instance, propRef);\n    ref.current = instance;\n  }, [propRef]);\n  return [ref, refHandler];\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AAEA,SAASC,QAAT,QAAyB,YAAzB;AAUA;;;;;;;;;;AASA,OAAM,SAAUC,aAAV,CACJC,OADI,EACmB;EAEvB,IAAMC,GAAG,GAAGJ,MAAM,CAAW,IAAX,CAAlB;EACA,IAAMK,UAAU,GAAGN,WAAW,CAC5B,UAACO,QAAD,EAAmB;IACjBL,QAAQ,CAACK,QAAD,EAAWH,OAAX,CAAR;IACAC,GAAG,CAACG,OAAJ,GAAcD,QAAd;EACD,CAJ2B,EAK5B,CAACH,OAAD,CAL4B,CAA9B;EAQA,OAAO,CAACC,GAAD,EAAMC,UAAN,CAAP;AACD","names":["useCallback","useRef","applyRef","useEnsuredRef","propRef","ref","refHandler","instance","current"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\useEnsuredRef.ts"],"sourcesContent":["import type { MutableRefObject, Ref, RefCallback } from \"react\";\nimport { useCallback, useRef } from \"react\";\n\nimport { applyRef } from \"./applyRef\";\n\n/**\n * @remarks \\@since 2.3.0\n */\nexport type EnsuredRefs<E extends HTMLElement> = readonly [\n  MutableRefObject<E | null>,\n  RefCallback<E | null>\n];\n\n/**\n * This is mostly an internal hook that allows for an optional ref (normally\n * from props or hook options) to be merged with a hook's required `ref`. This\n * will return a MutableRefObject used for DOM manipulation in a custom hook\n * followed by a ref callback function that should be passed to the DOM node\n * that will ensure that both the optional `propRef` and hook ref are updated.\n *\n * @remarks \\@since 2.3.0\n */\nexport function useEnsuredRef<E extends HTMLElement>(\n  propRef?: Ref<E | null>\n): EnsuredRefs<E> {\n  const ref = useRef<E | null>(null);\n  const refHandler = useCallback(\n    (instance: E | null) => {\n      applyRef(instance, propRef);\n      ref.current = instance;\n    },\n    [propRef]\n  );\n\n  return [ref, refHandler];\n}\n"]},"metadata":{},"sourceType":"module"}