{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { DEFAULT_RIPPLE_CLASSNAMES, DEFAULT_RIPPLE_TIMEOUT } from \"./ripples/constants\";\nexport var StatesConfigContext = createContext({\n  rippleTimeout: DEFAULT_RIPPLE_TIMEOUT,\n  rippleClassNames: DEFAULT_RIPPLE_CLASSNAMES,\n  disableRipple: false,\n  disableProgrammaticRipple: false\n});\n/**\n * A simple hook that can be used to get the Ripple context. This is used behind\n * the scenes for the Ripple component and _probably_ shouldn't be used anywhere\n * else. It's mostly used to just use the context defaults when the timeout or\n * classNames are undefined.\n */\n\nexport function useStatesConfigContext() {\n  return useContext(StatesConfigContext);\n}\n/**\n * The `StatesConfig` component is a top-level context provider for the states\n * context configuration. It'll keep track of:\n *\n * - the current interaction mode of your user\n * - configuration for ripple effects\n * - disabling or enabling the ripple effects\n * - disabling or enabling the fix for color pollution\n */\n\nexport function StatesConfig(_a) {\n  var _b = _a.rippleTimeout,\n      rippleTimeout = _b === void 0 ? DEFAULT_RIPPLE_TIMEOUT : _b,\n      _c = _a.rippleClassNames,\n      rippleClassNames = _c === void 0 ? DEFAULT_RIPPLE_CLASSNAMES : _c,\n      _d = _a.disableRipple,\n      disableRipple = _d === void 0 ? false : _d,\n      _e = _a.disableProgrammaticRipple,\n      disableProgrammaticRipple = _e === void 0 ? false : _e,\n      children = _a.children;\n  var value = useMemo(function () {\n    return {\n      rippleTimeout: rippleTimeout,\n      rippleClassNames: rippleClassNames,\n      disableRipple: disableRipple,\n      disableProgrammaticRipple: disableProgrammaticRipple\n    };\n  }, [rippleTimeout, rippleClassNames, disableRipple, disableProgrammaticRipple]);\n  return _jsx(StatesConfigContext.Provider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AACA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,QAAmD,OAAnD;AAMA,SACEC,yBADF,EAEEC,sBAFF,QAGO,qBAHP;AAoCA,OAAO,IAAMC,mBAAmB,GAAGL,aAAa,CAA0B;EACxEM,aAAa,EAAEF,sBADyD;EAExEG,gBAAgB,EAAEJ,yBAFsD;EAGxEK,aAAa,EAAE,KAHyD;EAIxEC,yBAAyB,EAAE;AAJ6C,CAA1B,CAAzC;AAOP;;;;;;;AAMA,OAAM,SAAUC,sBAAV,GAAgC;EACpC,OAAOT,UAAU,CAACI,mBAAD,CAAjB;AACD;AAMD;;;;;;;;;;AASA,OAAM,SAAUM,YAAV,CAAuBC,EAAvB,EAMc;MALlBC;MAAAP,aAAa,mBAAGF,sBAAH,GAAyBS;MACtCC;MAAAP,gBAAgB,mBAAGJ,yBAAH,GAA4BW;MAC5CC;MAAAP,aAAa,mBAAG,KAAH,GAAQO;MACrBC;MAAAP,yBAAyB,mBAAG,KAAH,GAAQO;MACjCC,QAAQ;EAER,IAAMC,KAAK,GAAGhB,OAAO,CACnB;IAAM,OAAC;MACLI,aAAa,eADR;MAELC,gBAAgB,kBAFX;MAGLC,aAAa,eAHR;MAILC,yBAAyB;IAJpB,CAAD;EAKJ,CANiB,EAOnB,CAACH,aAAD,EAAgBC,gBAAhB,EAAkCC,aAAlC,EAAiDC,yBAAjD,CAPmB,CAArB;EAUA,OACEU,KAACd,mBAAmB,CAACe,QAArB,EAA6BC;IAACH,KAAK,EAAEA;EAAR,GAAa;IAAAD,UACvCA;EADuC,CAAb,CAA7B,CADF;AAKD","names":["createContext","useContext","useMemo","DEFAULT_RIPPLE_CLASSNAMES","DEFAULT_RIPPLE_TIMEOUT","StatesConfigContext","rippleTimeout","rippleClassNames","disableRipple","disableProgrammaticRipple","useStatesConfigContext","StatesConfig","_a","_b","_c","_d","_e","children","value","_jsx","Provider","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\states\\src\\StatesConfig.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport type {\n  CSSTransitionClassNames,\n  TransitionTimeout,\n} from \"@react-md/transition\";\n\nimport {\n  DEFAULT_RIPPLE_CLASSNAMES,\n  DEFAULT_RIPPLE_TIMEOUT,\n} from \"./ripples/constants\";\n\n/**\n * Contains all the values in the `StatesConfig` component.\n */\nexport interface StatesConfigContextType {\n  /**\n   * The amount of time before a ripple finishes its animation. You probably\n   * don't want to change this value unless you updated the duration in scss or\n   * changed the different class names for the ripple animation.\n   */\n  rippleTimeout: TransitionTimeout;\n\n  /**\n   * The class names to apply during the different stages for the ripple\n   * animation.  You probably don't want to use this.\n   */\n  rippleClassNames: CSSTransitionClassNames;\n\n  /**\n   * Boolean if the ripple effect should be disabled for all child components\n   * that use the Ripple states.\n   */\n  disableRipple: boolean;\n\n  /**\n   * Boolean if the ripple component should not be triggered after a\n   * \"programmatic\" ripple effect. This would be if  the `.click()` function is\n   * called on an element through javascript or some other means.\n   */\n  disableProgrammaticRipple: boolean;\n}\n\nexport const StatesConfigContext = createContext<StatesConfigContextType>({\n  rippleTimeout: DEFAULT_RIPPLE_TIMEOUT,\n  rippleClassNames: DEFAULT_RIPPLE_CLASSNAMES,\n  disableRipple: false,\n  disableProgrammaticRipple: false,\n});\n\n/**\n * A simple hook that can be used to get the Ripple context. This is used behind\n * the scenes for the Ripple component and _probably_ shouldn't be used anywhere\n * else. It's mostly used to just use the context defaults when the timeout or\n * classNames are undefined.\n */\nexport function useStatesConfigContext(): StatesConfigContextType {\n  return useContext(StatesConfigContext);\n}\n\nexport interface StatesConfigProps extends Partial<StatesConfigContextType> {\n  children?: ReactNode;\n}\n\n/**\n * The `StatesConfig` component is a top-level context provider for the states\n * context configuration. It'll keep track of:\n *\n * - the current interaction mode of your user\n * - configuration for ripple effects\n * - disabling or enabling the ripple effects\n * - disabling or enabling the fix for color pollution\n */\nexport function StatesConfig({\n  rippleTimeout = DEFAULT_RIPPLE_TIMEOUT,\n  rippleClassNames = DEFAULT_RIPPLE_CLASSNAMES,\n  disableRipple = false,\n  disableProgrammaticRipple = false,\n  children,\n}: StatesConfigProps): ReactElement {\n  const value = useMemo(\n    () => ({\n      rippleTimeout,\n      rippleClassNames,\n      disableRipple,\n      disableProgrammaticRipple,\n    }),\n    [rippleTimeout, rippleClassNames, disableRipple, disableProgrammaticRipple]\n  );\n\n  return (\n    <StatesConfigContext.Provider value={value}>\n      {children}\n    </StatesConfigContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}