{"ast":null,"code":"import { useRef } from \"react\";\nimport { useUserInteractionMode } from \"../mode/UserInteractionModeListener\";\nimport { findMatchIndex } from \"../search/findMatchIndex\";\nimport { useKeyboardFocusContext } from \"./movementContext\";\nimport { focusElement, getFirstFocusableIndex, getLastFocusableIndex, getNextFocusableIndex, isNotFocusable } from \"./utils\";\n/**\n * @remarks \\@since 5.0.0\n * @internal\n */\n\nvar noop = function () {// do nothing\n};\n/**\n * @remarks \\@since 5.0.0\n */\n\n\nexport function useKeyboardFocus(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.onFocus,\n      onFocus = _a === void 0 ? noop : _a,\n      _b = options.onKeyDown,\n      onKeyDown = _b === void 0 ? noop : _b,\n      _c = options.onSearch,\n      onSearch = _c === void 0 ? noop : _c,\n      _d = options.onIncrement,\n      onIncrement = _d === void 0 ? noop : _d,\n      _e = options.onDecrement,\n      onDecrement = _e === void 0 ? noop : _e,\n      _f = options.onJumpToFirst,\n      onJumpToFirst = _f === void 0 ? noop : _f,\n      _g = options.onJumpToLast,\n      onJumpToLast = _g === void 0 ? noop : _g,\n      _h = options.onFocusChange,\n      onFocusChange = _h === void 0 ? focusElement : _h,\n      getDefaultFocusIndex = options.getDefaultFocusIndex;\n  var mode = useUserInteractionMode();\n  var focusIndex = useRef(-1);\n\n  var _j = useKeyboardFocusContext(),\n      config = _j.config,\n      loopable = _j.loopable,\n      searchable = _j.searchable,\n      watching = _j.watching,\n      includeDisabled = _j.includeDisabled;\n\n  return {\n    focusIndex: focusIndex,\n    onFocus: function (event) {\n      var _a;\n\n      onFocus(event);\n\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      if (event.target !== event.currentTarget) {\n        var i = watching.current.findIndex(function (_a) {\n          var element = _a.element;\n          return element === event.target;\n        });\n\n        if (i !== -1) {\n          focusIndex.current = i;\n        }\n\n        return;\n      }\n\n      var defaultFocusIndex;\n\n      if (getDefaultFocusIndex) {\n        defaultFocusIndex = getDefaultFocusIndex(watching.current.map(function (_a) {\n          var element = _a.element;\n          return element;\n        }), event.currentTarget);\n      } else {\n        defaultFocusIndex = getFirstFocusableIndex(watching.current, includeDisabled);\n      } // this makes it so that if you click the container element without\n      // clicking any child, it doesn't focus the first element again\n\n\n      if (defaultFocusIndex === -1 || mode !== \"keyboard\") {\n        return;\n      }\n\n      focusIndex.current = defaultFocusIndex;\n      var element = (_a = watching.current[focusIndex.current]) === null || _a === void 0 ? void 0 : _a.element;\n      element && onFocusChange(element, focusIndex.current);\n    },\n    onKeyDown: function (event) {\n      onKeyDown(event);\n\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      var key = event.key,\n          altKey = event.altKey,\n          ctrlKey = event.ctrlKey,\n          metaKey = event.metaKey,\n          shiftKey = event.shiftKey;\n      var _a = config.current,\n          incrementKeys = _a.incrementKeys,\n          decrementKeys = _a.decrementKeys,\n          jumpToFirstKeys = _a.jumpToFirstKeys,\n          jumpToLastKeys = _a.jumpToLastKeys;\n\n      var update = function (index) {\n        var _a;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (focusIndex.current === index) {\n          return;\n        }\n\n        focusIndex.current = index;\n        var element = (_a = watching.current[index]) === null || _a === void 0 ? void 0 : _a.element;\n        element && onFocusChange(element, focusIndex.current);\n      };\n\n      if (searchable && key.length === 1 && // can't search with space since it is generally a click event\n      key !== \" \" && !altKey && !ctrlKey && !metaKey && !shiftKey) {\n        onSearch({\n          key: key,\n          event: event\n        });\n\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        var values = watching.current.map(function (_a) {\n          var content = _a.content,\n              element = _a.element;\n\n          if (isNotFocusable(element, includeDisabled)) {\n            return \"\";\n          }\n\n          return content;\n        });\n        update(findMatchIndex(key, values, focusIndex.current));\n      } else if (jumpToFirstKeys.includes(key)) {\n        onJumpToFirst({\n          key: key,\n          event: event\n        });\n\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(getFirstFocusableIndex(watching.current, includeDisabled));\n      } else if (jumpToLastKeys.includes(key)) {\n        onJumpToLast({\n          key: key,\n          event: event\n        });\n\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(getLastFocusableIndex(watching.current, includeDisabled));\n      } else if (incrementKeys.includes(key)) {\n        onIncrement({\n          key: key,\n          event: event\n        });\n\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(getNextFocusableIndex({\n          loopable: loopable,\n          watching: watching.current,\n          increment: true,\n          includeDisabled: includeDisabled,\n          currentFocusIndex: focusIndex.current\n        }));\n      } else if (decrementKeys.includes(key)) {\n        onDecrement({\n          key: key,\n          event: event\n        });\n\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(getNextFocusableIndex({\n          loopable: loopable,\n          watching: watching.current,\n          increment: false,\n          includeDisabled: includeDisabled,\n          currentFocusIndex: focusIndex.current\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"mappings":"AAMA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,uBAAT,QAAwC,mBAAxC;AACA,SACEC,YADF,EAEEC,sBAFF,EAGEC,qBAHF,EAIEC,qBAJF,EAKEC,cALF,QAMO,SANP;AAQA;;;;;AAIA,IAAMC,IAAI,GAAG,aACX;AACD,CAFD;AAsGA;;;;;AAGA,OAAM,SAAUC,gBAAV,CACJC,OADI,EACqC;EAAzC;IAAAA;EAAyC;;EAGvC,SASEA,OAAO,QATT;EAAA,WAAO,mBAAGF,IAAH,GAAOG,EAAd;EAAA,IACAC,KAQEF,OAAO,UATT;EAAA,IACAG,SAAS,mBAAGL,IAAH,GAAOI,EADhB;EAAA,IAEAE,KAOEJ,OAAO,SATT;EAAA,IAEAK,QAAQ,mBAAGP,IAAH,GAAOM,EAFf;EAAA,IAGAE,KAMEN,OAAO,YATT;EAAA,IAGAO,WAAW,mBAAGT,IAAH,GAAOQ,EAHlB;EAAA,IAIAE,KAKER,OAAO,YATT;EAAA,IAIAS,WAAW,mBAAGX,IAAH,GAAOU,EAJlB;EAAA,IAKAE,KAIEV,OAAO,cATT;EAAA,IAKAW,aAAa,mBAAGb,IAAH,GAAOY,EALpB;EAAA,IAMAE,KAGEZ,OAAO,aATT;EAAA,IAMAa,YAAY,mBAAGf,IAAH,GAAOc,EANnB;EAAA,IAOAE,KAEEd,OAAO,cATT;EAAA,IAOAe,aAAa,mBAAGtB,YAAH,GAAeqB,EAP5B;EAAA,IAQAE,oBAAoB,GAClBhB,OAAO,qBATT;EAUF,IAAMiB,IAAI,GAAG3B,sBAAsB,EAAnC;EACA,IAAM4B,UAAU,GAAG7B,MAAM,CAAC,CAAC,CAAF,CAAzB;;EACM,SACJG,uBAAuB,EADnB;EAAA,IAAE2B,MAAM,YAAR;EAAA,IAAUC,QAAQ,cAAlB;EAAA,IAAoBC,UAAU,gBAA9B;EAAA,IAAgCC,QAAQ,cAAxC;EAAA,IAA0CC,eAAe,qBAAzD;;EAGN,OAAO;IACLL,UAAU,YADL;IAELM,OAAO,EAAP,UAAQC,KAAR,EAAa;;;MACXD,OAAO,CAACC,KAAD,CAAP;;MACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;QAChC;MACD;;MAED,IAAID,KAAK,CAACE,MAAN,KAAiBF,KAAK,CAACG,aAA3B,EAA0C;QACxC,IAAMC,CAAC,GAAGP,QAAQ,CAACQ,OAAT,CAAiBC,SAAjB,CACR,UAAC9B,EAAD,EAAY;cAAT+B,OAAO;UAAO,cAAO,KAAKP,KAAK,CAACE,MAAlB;QAAwB,CADjC,CAAV;;QAGA,IAAIE,CAAC,KAAK,CAAC,CAAX,EAAc;UACZX,UAAU,CAACY,OAAX,GAAqBD,CAArB;QACD;;QACD;MACD;;MAED,IAAII,iBAAJ;;MACA,IAAIjB,oBAAJ,EAA0B;QACxBiB,iBAAiB,GAAGjB,oBAAoB,CACtCM,QAAQ,CAACQ,OAAT,CAAiBI,GAAjB,CAAqB,UAACjC,EAAD,EAAY;cAAT+B,OAAO;UAAO;QAAO,CAA7C,CADsC,EAEtCP,KAAK,CAACG,aAFgC,CAAxC;MAID,CALD,MAKO;QACLK,iBAAiB,GAAGvC,sBAAsB,CACxC4B,QAAQ,CAACQ,OAD+B,EAExCP,eAFwC,CAA1C;MAID,CA3BU,CA6BX;MACA;;;MACA,IAAIU,iBAAiB,KAAK,CAAC,CAAvB,IAA4BhB,IAAI,KAAK,UAAzC,EAAqD;QACnD;MACD;;MAEDC,UAAU,CAACY,OAAX,GAAqBG,iBAArB;MACA,IAAMD,OAAO,GAAG,cAAQ,CAACF,OAAT,CAAiBZ,UAAU,CAACY,OAA5B,OAAoC,IAApC,IAAoC7B,aAApC,GAAoC,MAApC,GAAoCA,GAAE+B,OAAtD;MACAA,OAAO,IAAIjB,aAAa,CAACiB,OAAD,EAAUd,UAAU,CAACY,OAArB,CAAxB;IACD,CAxCI;IAyCL3B,SAAS,EAAT,UAAUsB,KAAV,EAAe;MACbtB,SAAS,CAACsB,KAAD,CAAT;;MACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;QAChC;MACD;;MAEO,OAAG,GAAyCD,KAAK,IAAjD;MAAA,IAAKU,MAAM,GAAiCV,KAAK,OAAjD;MAAA,IAAaW,OAAO,GAAwBX,KAAK,QAAjD;MAAA,IAAsBY,OAAO,GAAeZ,KAAK,QAAjD;MAAA,IAA+Ba,QAAQ,GAAKb,KAAK,SAAjD;MACF,SACJN,MAAM,CAACW,OADH;MAAA,IAAES,aAAa,mBAAf;MAAA,IAAiBC,aAAa,mBAA9B;MAAA,IAAgCC,eAAe,qBAA/C;MAAA,IAAiDC,cAAc,oBAA/D;;MAGN,IAAMC,MAAM,GAAG,UAACC,KAAD,EAAc;;;QAC3BnB,KAAK,CAACoB,cAAN;QACApB,KAAK,CAACqB,eAAN;;QACA,IAAI5B,UAAU,CAACY,OAAX,KAAuBc,KAA3B,EAAkC;UAChC;QACD;;QAED1B,UAAU,CAACY,OAAX,GAAqBc,KAArB;QAEA,IAAMZ,OAAO,GAAG,cAAQ,CAACF,OAAT,CAAiBc,KAAjB,OAAuB,IAAvB,IAAuB3C,aAAvB,GAAuB,MAAvB,GAAuBA,GAAE+B,OAAzC;QACAA,OAAO,IAAIjB,aAAa,CAACiB,OAAD,EAAUd,UAAU,CAACY,OAArB,CAAxB;MACD,CAXD;;MAaA,IACET,UAAU,IACV0B,GAAG,CAACC,MAAJ,KAAe,CADf,IAEA;MACAD,GAAG,KAAK,GAHR,IAIA,CAACZ,MAJD,IAKA,CAACC,OALD,IAMA,CAACC,OAND,IAOA,CAACC,QARH,EASE;QACAjC,QAAQ,CAAC;UAAE0C,GAAG,KAAL;UAAOtB,KAAK;QAAZ,CAAD,CAAR;;QACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;UAChC;QACD;;QAED,IAAMuB,MAAM,GAAG3B,QAAQ,CAACQ,OAAT,CAAiBI,GAAjB,CAAqB,UAACjC,EAAD,EAAqB;cAAlBiD,OAAO;cAAElB,OAAO;;UACrD,IAAInC,cAAc,CAACmC,OAAD,EAAUT,eAAV,CAAlB,EAA8C;YAC5C,OAAO,EAAP;UACD;;UAED,OAAO2B,OAAP;QACD,CANc,CAAf;QAQAP,MAAM,CAACpD,cAAc,CAACwD,GAAD,EAAME,MAAN,EAAc/B,UAAU,CAACY,OAAzB,CAAf,CAAN;MACD,CAxBD,MAwBO,IAAIW,eAAe,CAACU,QAAhB,CAAyBJ,GAAzB,CAAJ,EAAmC;QACxCpC,aAAa,CAAC;UAAEoC,GAAG,KAAL;UAAOtB,KAAK;QAAZ,CAAD,CAAb;;QACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;UAChC;QACD;;QAEDiB,MAAM,CAACjD,sBAAsB,CAAC4B,QAAQ,CAACQ,OAAV,EAAmBP,eAAnB,CAAvB,CAAN;MACD,CAPM,MAOA,IAAImB,cAAc,CAACS,QAAf,CAAwBJ,GAAxB,CAAJ,EAAkC;QACvClC,YAAY,CAAC;UAAEkC,GAAG,KAAL;UAAOtB,KAAK;QAAZ,CAAD,CAAZ;;QACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;UAChC;QACD;;QAEDiB,MAAM,CAAChD,qBAAqB,CAAC2B,QAAQ,CAACQ,OAAV,EAAmBP,eAAnB,CAAtB,CAAN;MACD,CAPM,MAOA,IAAIgB,aAAa,CAACY,QAAd,CAAuBJ,GAAvB,CAAJ,EAAiC;QACtCxC,WAAW,CAAC;UAAEwC,GAAG,KAAL;UAAOtB,KAAK;QAAZ,CAAD,CAAX;;QACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;UAChC;QACD;;QAEDiB,MAAM,CACJ/C,qBAAqB,CAAC;UACpBwB,QAAQ,UADY;UAEpBE,QAAQ,EAAEA,QAAQ,CAACQ,OAFC;UAGpBsB,SAAS,EAAE,IAHS;UAIpB7B,eAAe,iBAJK;UAKpB8B,iBAAiB,EAAEnC,UAAU,CAACY;QALV,CAAD,CADjB,CAAN;MASD,CAfM,MAeA,IAAIU,aAAa,CAACW,QAAd,CAAuBJ,GAAvB,CAAJ,EAAiC;QACtCtC,WAAW,CAAC;UAAEsC,GAAG,KAAL;UAAOtB,KAAK;QAAZ,CAAD,CAAX;;QACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;UAChC;QACD;;QAEDiB,MAAM,CACJ/C,qBAAqB,CAAC;UACpBwB,QAAQ,UADY;UAEpBE,QAAQ,EAAEA,QAAQ,CAACQ,OAFC;UAGpBsB,SAAS,EAAE,KAHS;UAIpB7B,eAAe,iBAJK;UAKpB8B,iBAAiB,EAAEnC,UAAU,CAACY;QALV,CAAD,CADjB,CAAN;MASD;IACF;EArII,CAAP;AAuID","names":["useRef","useUserInteractionMode","findMatchIndex","useKeyboardFocusContext","focusElement","getFirstFocusableIndex","getLastFocusableIndex","getNextFocusableIndex","isNotFocusable","noop","useKeyboardFocus","options","_a","_b","onKeyDown","_c","onSearch","_d","onIncrement","_e","onDecrement","_f","onJumpToFirst","_g","onJumpToLast","_h","onFocusChange","getDefaultFocusIndex","mode","focusIndex","config","loopable","searchable","watching","includeDisabled","onFocus","event","isPropagationStopped","target","currentTarget","i","current","findIndex","element","defaultFocusIndex","map","altKey","ctrlKey","metaKey","shiftKey","incrementKeys","decrementKeys","jumpToFirstKeys","jumpToLastKeys","update","index","preventDefault","stopPropagation","key","length","values","content","includes","increment","currentFocusIndex"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\keyboardMovement\\useKeyboardFocus.ts"],"sourcesContent":["import type {\n  FocusEventHandler,\n  KeyboardEvent,\n  KeyboardEventHandler,\n  MutableRefObject,\n} from \"react\";\nimport { useRef } from \"react\";\nimport { useUserInteractionMode } from \"../mode/UserInteractionModeListener\";\n\nimport { findMatchIndex } from \"../search/findMatchIndex\";\nimport { useKeyboardFocusContext } from \"./movementContext\";\nimport {\n  focusElement,\n  getFirstFocusableIndex,\n  getLastFocusableIndex,\n  getNextFocusableIndex,\n  isNotFocusable,\n} from \"./utils\";\n\n/**\n * @remarks \\@since 5.0.0\n * @internal\n */\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface KeyboardFocusArg<E extends HTMLElement> {\n  /**\n   * The keyboard key/letter that was pressed. (`event.key`).\n   */\n  key: string;\n\n  /**\n   * The keyboard event.\n   */\n  event: KeyboardEvent<E>;\n}\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport type KeyboardFocusHandler<E extends HTMLElement> = (\n  arg: KeyboardFocusArg<E>\n) => void;\n\n/**\n * Optional event handlers that can be called for specific custom focus\n * behavior. If any of these functions call `event.stopPropagation()`, the\n * default focus behavior will not occur.\n *\n * @remarks \\@since 5.0.0\n */\nexport interface KeyboardFocusCallbacks<E extends HTMLElement> {\n  onFocus?: FocusEventHandler<E>;\n  onKeyDown?: KeyboardEventHandler<E>;\n\n  /**\n   * This is called whenever a single letter has been pressed and\n   * {@link KeyboardMovementBehavior.searchable} is `true`.\n   */\n  onSearch?: KeyboardFocusHandler<E>;\n\n  /**\n   * This is called whenever one of the\n   * {@link KeyboardMovementBehavior.incrementKeys} are pressed.\n   */\n  onIncrement?: KeyboardFocusHandler<E>;\n\n  /**\n   * This is called whenever one of the\n   * {@link KeyboardMovementBehavior.decrementKeys} are pressed.\n   */\n  onDecrement?: KeyboardFocusHandler<E>;\n\n  /**\n   * This is called whenever one of the\n   * {@link KeyboardMovementBehavior.jumpToFirstKeys} are pressed.\n   */\n  onJumpToFirst?: KeyboardFocusHandler<E>;\n\n  /**\n   * This is called whenever one of the\n   * {@link KeyboardMovementBehavior.jumpToLastKeys} are pressed.\n   */\n  onJumpToLast?: KeyboardFocusHandler<E>;\n}\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface KeyboardFocusHookOptions<E extends HTMLElement>\n  extends KeyboardFocusCallbacks<E> {\n  /**\n   * A function that can be used to get the default focus index when the\n   * container element first gains focus. If this returns `-1`, no child element\n   * will be focused and the container will maintain focus instead.\n   *\n   * @param elements - The current list of elements that can be focused within\n   * the container element\n   * @param container - The container element that gained focus\n   */\n  getDefaultFocusIndex?(elements: readonly HTMLElement[], container: E): number;\n\n  /**\n   * An optional function to call when the custom focused element should change.\n   * The default value is just to call `element.focus()`.\n   *\n   * @param element - The element that should gain custom focus\n   * @param nextFocusIndex - The next focus index which can be used for\n   * additional movement behavior.\n   */\n  onFocusChange?(element: HTMLElement, nextFocusIndex: number): void;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface KeyboardFocusHookReturnValue<E extends HTMLElement> {\n  onFocus: FocusEventHandler<E>;\n  onKeyDown: KeyboardEventHandler<E>;\n  focusIndex: MutableRefObject<number>;\n}\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport function useKeyboardFocus<E extends HTMLElement>(\n  options: KeyboardFocusHookOptions<E> = {}\n): KeyboardFocusHookReturnValue<E> {\n  const {\n    onFocus = noop,\n    onKeyDown = noop,\n    onSearch = noop,\n    onIncrement = noop,\n    onDecrement = noop,\n    onJumpToFirst = noop,\n    onJumpToLast = noop,\n    onFocusChange = focusElement,\n    getDefaultFocusIndex,\n  } = options;\n  const mode = useUserInteractionMode();\n  const focusIndex = useRef(-1);\n  const { config, loopable, searchable, watching, includeDisabled } =\n    useKeyboardFocusContext();\n\n  return {\n    focusIndex,\n    onFocus(event) {\n      onFocus(event);\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      if (event.target !== event.currentTarget) {\n        const i = watching.current.findIndex(\n          ({ element }) => element === event.target\n        );\n        if (i !== -1) {\n          focusIndex.current = i;\n        }\n        return;\n      }\n\n      let defaultFocusIndex: number;\n      if (getDefaultFocusIndex) {\n        defaultFocusIndex = getDefaultFocusIndex(\n          watching.current.map(({ element }) => element),\n          event.currentTarget\n        );\n      } else {\n        defaultFocusIndex = getFirstFocusableIndex(\n          watching.current,\n          includeDisabled\n        );\n      }\n\n      // this makes it so that if you click the container element without\n      // clicking any child, it doesn't focus the first element again\n      if (defaultFocusIndex === -1 || mode !== \"keyboard\") {\n        return;\n      }\n\n      focusIndex.current = defaultFocusIndex;\n      const element = watching.current[focusIndex.current]?.element;\n      element && onFocusChange(element, focusIndex.current);\n    },\n    onKeyDown(event) {\n      onKeyDown(event);\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      const { key, altKey, ctrlKey, metaKey, shiftKey } = event;\n      const { incrementKeys, decrementKeys, jumpToFirstKeys, jumpToLastKeys } =\n        config.current;\n\n      const update = (index: number): void => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (focusIndex.current === index) {\n          return;\n        }\n\n        focusIndex.current = index;\n\n        const element = watching.current[index]?.element;\n        element && onFocusChange(element, focusIndex.current);\n      };\n\n      if (\n        searchable &&\n        key.length === 1 &&\n        // can't search with space since it is generally a click event\n        key !== \" \" &&\n        !altKey &&\n        !ctrlKey &&\n        !metaKey &&\n        !shiftKey\n      ) {\n        onSearch({ key, event });\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        const values = watching.current.map(({ content, element }) => {\n          if (isNotFocusable(element, includeDisabled)) {\n            return \"\";\n          }\n\n          return content;\n        });\n\n        update(findMatchIndex(key, values, focusIndex.current));\n      } else if (jumpToFirstKeys.includes(key)) {\n        onJumpToFirst({ key, event });\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(getFirstFocusableIndex(watching.current, includeDisabled));\n      } else if (jumpToLastKeys.includes(key)) {\n        onJumpToLast({ key, event });\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(getLastFocusableIndex(watching.current, includeDisabled));\n      } else if (incrementKeys.includes(key)) {\n        onIncrement({ key, event });\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(\n          getNextFocusableIndex({\n            loopable,\n            watching: watching.current,\n            increment: true,\n            includeDisabled,\n            currentFocusIndex: focusIndex.current,\n          })\n        );\n      } else if (decrementKeys.includes(key)) {\n        onDecrement({ key, event });\n        if (event.isPropagationStopped()) {\n          return;\n        }\n\n        update(\n          getNextFocusableIndex({\n            loopable,\n            watching: watching.current,\n            increment: false,\n            includeDisabled,\n            currentFocusIndex: focusIndex.current,\n          })\n        );\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}