{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from \"react\";\n/**\n * This is a simple hook that will allow you to \"strongly\" type a `Select`\n * component's value since the `onChange` handler only returns a `string`.\n *\n * @param defaultValue - The default value to use\n * @returns an ordered list containing the current value followed by the\n * dispatch function to update the state.\n */\n\nexport function useSelectState(defaultValue) {\n  var _a = __read(useState(defaultValue), 2),\n      value = _a[0],\n      setValue = _a[1];\n\n  var setTypedValue = useCallback(function (nextValue) {\n    setValue(nextValue);\n  }, []);\n  return [value, setTypedValue];\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAKA;;;;;;;;;AAQA,OAAM,SAAUC,cAAV,CACJC,YADI,EACyB;EAEvB,gBAAoBF,QAAQ,CAAIE,YAAJ,CAA5B,EAA6C,CAA7C;EAAA,IAACC,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EACN,IAAMC,aAAa,GAAGN,WAAW,CAAC,UAACO,SAAD,EAAkB;IAClDF,QAAQ,CAACE,SAAD,CAAR;EACD,CAFgC,EAE9B,EAF8B,CAAjC;EAIA,OAAO,CAACH,KAAD,EAAQE,aAAR,CAAP;AACD","names":["useCallback","useState","useSelectState","defaultValue","value","setValue","setTypedValue","nextValue"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\useSelectState.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\ntype DefaultValue<T extends string> = T | (() => T);\ntype ReturnValue<T extends string> = [T, (nextValue: string) => void];\n\n/**\n * This is a simple hook that will allow you to \"strongly\" type a `Select`\n * component's value since the `onChange` handler only returns a `string`.\n *\n * @param defaultValue - The default value to use\n * @returns an ordered list containing the current value followed by the\n * dispatch function to update the state.\n */\nexport function useSelectState<T extends string>(\n  defaultValue: DefaultValue<T>\n): ReturnValue<T> {\n  const [value, setValue] = useState<T>(defaultValue);\n  const setTypedValue = useCallback((nextValue: string) => {\n    setValue(nextValue as T);\n  }, []);\n\n  return [value, setTypedValue];\n}\n"]},"metadata":{},"sourceType":"module"}