{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\nimport { StickyTableProvider } from \"./sticky\";\nvar block = bem(\"rmd-thead\");\n/**\n * Creates a `<thead>` element with some basic styles. This component will also\n * update the table configuration so that all the `TableCell` children will\n * automatically become `<th>` elements instead of the normal `<td>` as well as\n * disabling the hover effect and line wrapping. The hover effect and\n * line-wrapping can be re-enabled if desired through the `hoverable` and\n * `disableNoWrap` props.\n */\n\nexport var TableHeader = forwardRef(function TableHeader(_a, ref) {\n  var className = _a.className,\n      _b = _a.hoverable,\n      hoverable = _b === void 0 ? false : _b,\n      propLineWrap = _a.lineWrap,\n      children = _a.children,\n      _c = _a.sticky,\n      sticky = _c === void 0 ? false : _c,\n      props = __rest(_a, [\"className\", \"hoverable\", \"lineWrap\", \"children\", \"sticky\"]); // update the table configuration with the custom overrides for the `<thead>`\n\n\n  var _d = useTableConfig({\n    lineWrap: propLineWrap,\n    disableHover: !hoverable\n  }),\n      hAlign = _d.hAlign,\n      vAlign = _d.vAlign,\n      lineWrap = _d.lineWrap,\n      disableHover = _d.disableHover,\n      disableBorders = _d.disableBorders;\n\n  var configuration = useMemo(function () {\n    return {\n      header: true,\n      hAlign: hAlign,\n      vAlign: vAlign,\n      lineWrap: lineWrap,\n      disableBorders: disableBorders,\n      disableHover: disableHover\n    };\n  }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);\n  return _jsx(TableConfigProvider, __assign({\n    value: configuration\n  }, {\n    children: _jsx(\"thead\", __assign({}, props, {\n      ref: ref,\n      className: cn(block(), className)\n    }, {\n      children: _jsx(StickyTableProvider, __assign({\n        value: sticky\n      }, {\n        children: children\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAGA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,UAApD;AACA,SAASC,mBAAT,QAAoC,UAApC;AAmBA,IAAMC,KAAK,GAAGJ,GAAG,CAAC,WAAD,CAAjB;AAEA;;;;;;;;;AAQA,OAAO,IAAMK,WAAW,GAAGR,UAAU,CAGnC,SAASQ,WAAT,CACAC,EADA,EASAC,GATA,EASG;EAPD,aAAS,eAAT;EAAA,IACAC,iBADA;EAAA,IACAC,SAAS,mBAAG,KAAH,GAAQD,EADjB;EAAA,IAEUE,YAAY,cAFtB;EAAA,IAGAC,QAAQ,cAHR;EAAA,IAIAC,cAJA;EAAA,IAIAC,MAAM,mBAAG,KAAH,GAAQD,EAJd;EAAA,IAKGE,KAAK,cANV,4DAMU,CALR,CAOC,CAEH;;;EACM,SACJZ,cAAc,CAAC;IACba,QAAQ,EAAEL,YADG;IAEbM,YAAY,EAAE,CAACP;EAFF,CAAD,CADV;EAAA,IAAEQ,MAAM,YAAR;EAAA,IAAUC,MAAM,YAAhB;EAAA,IAAkBH,QAAQ,cAA1B;EAAA,IAA4BC,YAAY,kBAAxC;EAAA,IAA0CG,cAAc,oBAAxD;;EAMN,IAAMC,aAAa,GAAGtB,OAAO,CAC3B;IAAM,OAAC;MACLuB,MAAM,EAAE,IADH;MAELJ,MAAM,QAFD;MAGLC,MAAM,QAHD;MAILH,QAAQ,UAJH;MAKLI,cAAc,gBALT;MAMLH,YAAY;IANP,CAAD;EAOJ,CARyB,EAS3B,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2BI,cAA3B,EAA2CH,YAA3C,CAT2B,CAA7B;EAYA,OACEM,KAACrB,mBAAD,EAAoBsB;IAACC,KAAK,EAAEJ;EAAR,GAAqB;IAAAT,UACvCW,2BAAWR,KAAX,EAAgB;MAAEP,GAAG,EAAEA,GAAP;MAAYkB,SAAS,EAAE1B,EAAE,CAACK,KAAK,EAAN,EAAUqB,SAAV;IAAzB,CAAhB,EAA6D;MAAAd,UAC3DW,KAACnB,mBAAD,EAAoBoB;QAACC,KAAK,EAAEX;MAAR,GAAc;QAAAF,UAAGA;MAAH,CAAd,CAApB;IAD2D,CAA7D;EADuC,CAArB,CAApB,CADF;AAOD,CAxCoC,CAA9B","names":["forwardRef","useMemo","cn","bem","TableConfigProvider","useTableConfig","StickyTableProvider","block","TableHeader","_a","ref","_b","hoverable","propLineWrap","children","_c","sticky","props","lineWrap","disableHover","hAlign","vAlign","disableBorders","configuration","header","_jsx","__assign","value","className"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\table\\src\\TableHeader.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TableCellConfig } from \"./config\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\nimport { StickyTableProvider } from \"./sticky\";\n\nexport interface TableHeaderProps\n  extends HTMLAttributes<HTMLTableSectionElement>,\n    Pick<TableCellConfig, \"lineWrap\"> {\n  /**\n   * This is a rename of the `disableHover` of the `TableConfig` since table\n   * headers are not hoverable by default. This prop can be enabled to add the\n   * row hover color within table headers, but it is not really recommended.\n   */\n  hoverable?: boolean;\n\n  /**\n   * Boolean if the header should be rendered as a sticky header that will cover\n   * the table contents as the page or `TableContainer` is scrolled.\n   */\n  sticky?: boolean;\n}\n\nconst block = bem(\"rmd-thead\");\n\n/**\n * Creates a `<thead>` element with some basic styles. This component will also\n * update the table configuration so that all the `TableCell` children will\n * automatically become `<th>` elements instead of the normal `<td>` as well as\n * disabling the hover effect and line wrapping. The hover effect and\n * line-wrapping can be re-enabled if desired through the `hoverable` and\n * `disableNoWrap` props.\n */\nexport const TableHeader = forwardRef<\n  HTMLTableSectionElement,\n  TableHeaderProps\n>(function TableHeader(\n  {\n    className,\n    hoverable = false,\n    lineWrap: propLineWrap,\n    children,\n    sticky = false,\n    ...props\n  },\n  ref\n) {\n  // update the table configuration with the custom overrides for the `<thead>`\n  const { hAlign, vAlign, lineWrap, disableHover, disableBorders } =\n    useTableConfig({\n      lineWrap: propLineWrap,\n      disableHover: !hoverable,\n    });\n\n  const configuration = useMemo(\n    () => ({\n      header: true,\n      hAlign,\n      vAlign,\n      lineWrap,\n      disableBorders,\n      disableHover,\n    }),\n    [hAlign, vAlign, lineWrap, disableBorders, disableHover]\n  );\n\n  return (\n    <TableConfigProvider value={configuration}>\n      <thead {...props} ref={ref} className={cn(block(), className)}>\n        <StickyTableProvider value={sticky}>{children}</StickyTableProvider>\n      </thead>\n    </TableConfigProvider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}