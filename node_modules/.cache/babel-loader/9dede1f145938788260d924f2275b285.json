{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useEffect, useState } from \"react\";\n/**\n * A helper hook that is used to create a memoized media query tester for\n * `window.matchMedia`.\n *\n * Note: This is a **client side only** hook as it requires the `window` to\n * attach a resize event listener to.\n *\n * @param query - The media query to use\n * @param defaultValue - The default value for if this media query matches. When\n * this is `undefined`, it will default to `false` unless the `window` is\n * defined and the `checkImmediately` param was not set to `false`. Otherwise,\n * it will check the media query matches on mount and use that value.\n * @param disabled - Boolean if the media query checking should be disabled.\n * @param checkImmediately - Boolean if the media query should be checked\n * immediately on mount. When omitted, it will default to checking when the\n * window is defined.\n * @returns true if the media query is a match.\n */\n\nexport function useMediaQuery(query, defaultValue, disabled, checkImmediately) {\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  if (checkImmediately === void 0) {\n    checkImmediately = typeof window !== \"undefined\";\n  }\n\n  var _a = __read(useState(function () {\n    if (typeof defaultValue !== \"undefined\") {\n      return defaultValue;\n    }\n\n    if (!disabled && checkImmediately && typeof window !== \"undefined\") {\n      return window.matchMedia(query).matches;\n    }\n\n    return false;\n  }), 2),\n      matches = _a[0],\n      setMatches = _a[1];\n\n  useEffect(function () {\n    if (typeof window === \"undefined\" || disabled) {\n      return;\n    }\n\n    var mq = window.matchMedia(query);\n\n    var updater = function (_a) {\n      var matches = _a.matches;\n      return setMatches(matches);\n    };\n\n    mq.addEventListener(\"change\", updater);\n\n    if (mq.matches !== matches) {\n      setMatches(mq.matches);\n    }\n\n    return function () {\n      mq.removeEventListener(\"change\", updater);\n    };\n  }, [disabled, matches, query]);\n  return matches;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,aAAV,CACJC,KADI,EAEJC,YAFI,EAGJC,QAHI,EAIJC,gBAJI,EAIqD;EADzD;IAAAD;EAAgB;;EAChB;IAAAC,mBAA4B,OAAOC,MAAP,KAAkB,WAA9C;EAAyD;;EAEnD,gBAAwBN,QAAQ,CAAC;IACrC,IAAI,OAAOG,YAAP,KAAwB,WAA5B,EAAyC;MACvC,OAAOA,YAAP;IACD;;IAED,IAAI,CAACC,QAAD,IAAaC,gBAAb,IAAiC,OAAOC,MAAP,KAAkB,WAAvD,EAAoE;MAClE,OAAOA,MAAM,CAACC,UAAP,CAAkBL,KAAlB,EAAyBM,OAAhC;IACD;;IAED,OAAO,KAAP;EACD,CAVqC,CAAhC,EAUJ,CAVI;EAAA,IAACA,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;;EAYNV,SAAS,CAAC;IACR,IAAI,OAAOO,MAAP,KAAkB,WAAlB,IAAiCF,QAArC,EAA+C;MAC7C;IACD;;IAED,IAAMM,EAAE,GAAGJ,MAAM,CAACC,UAAP,CAAkBL,KAAlB,CAAX;;IACA,IAAMS,OAAO,GAAG,UAACC,EAAD,EAAiC;UAA9BJ,OAAO;MACxB,iBAAU,CAACA,OAAD,CAAV;IAAmB,CADrB;;IAGAE,EAAE,CAACG,gBAAH,CAAoB,QAApB,EAA8BF,OAA9B;;IAEA,IAAID,EAAE,CAACF,OAAH,KAAeA,OAAnB,EAA4B;MAC1BC,UAAU,CAACC,EAAE,CAACF,OAAJ,CAAV;IACD;;IAED,OAAO;MACLE,EAAE,CAACI,mBAAH,CAAuB,QAAvB,EAAiCH,OAAjC;IACD,CAFD;EAGD,CAlBQ,EAkBN,CAACP,QAAD,EAAWI,OAAX,EAAoBN,KAApB,CAlBM,CAAT;EAoBA,OAAOM,OAAP;AACD","names":["useEffect","useState","useMediaQuery","query","defaultValue","disabled","checkImmediately","window","matchMedia","matches","setMatches","mq","updater","_a","addEventListener","removeEventListener"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\sizing\\useMediaQuery.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n/**\n * A helper hook that is used to create a memoized media query tester for\n * `window.matchMedia`.\n *\n * Note: This is a **client side only** hook as it requires the `window` to\n * attach a resize event listener to.\n *\n * @param query - The media query to use\n * @param defaultValue - The default value for if this media query matches. When\n * this is `undefined`, it will default to `false` unless the `window` is\n * defined and the `checkImmediately` param was not set to `false`. Otherwise,\n * it will check the media query matches on mount and use that value.\n * @param disabled - Boolean if the media query checking should be disabled.\n * @param checkImmediately - Boolean if the media query should be checked\n * immediately on mount. When omitted, it will default to checking when the\n * window is defined.\n * @returns true if the media query is a match.\n */\nexport function useMediaQuery(\n  query: string,\n  defaultValue?: boolean,\n  disabled = false,\n  checkImmediately: boolean = typeof window !== \"undefined\"\n): boolean {\n  const [matches, setMatches] = useState(() => {\n    if (typeof defaultValue !== \"undefined\") {\n      return defaultValue;\n    }\n\n    if (!disabled && checkImmediately && typeof window !== \"undefined\") {\n      return window.matchMedia(query).matches;\n    }\n\n    return false;\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\" || disabled) {\n      return;\n    }\n\n    const mq = window.matchMedia(query);\n    const updater = ({ matches }: MediaQueryListEvent): void =>\n      setMatches(matches);\n\n    mq.addEventListener(\"change\", updater);\n\n    if (mq.matches !== matches) {\n      setMatches(mq.matches);\n    }\n\n    return () => {\n      mq.removeEventListener(\"change\", updater);\n    };\n  }, [disabled, matches, query]);\n\n  return matches;\n}\n"]},"metadata":{},"sourceType":"module"}