{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport { LayoutAppBarTitle } from \"./LayoutAppBarTitle\";\nimport { LayoutNavToggle } from \"./LayoutNavToggle\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\n/**\n * This is the default implementation for an `AppBar` within the `Layout` that\n * will conditionally render the default `LayoutNavToggle` button and\n * `AppBarTitle` depending on specific props that were provided.\n */\n\nexport var LayoutAppBar = forwardRef(function LayoutAppBar(_a, ref) {\n  var children = _a.children,\n      _b = _a.fixed,\n      fixed = _b === void 0 ? true : _b,\n      propNavToggle = _a.navToggle,\n      navToggleProps = _a.navToggleProps,\n      customTitle = _a.customTitle,\n      titleChildren = _a.title,\n      titleProps = _a.titleProps,\n      props = __rest(_a, [\"children\", \"fixed\", \"navToggle\", \"navToggleProps\", \"customTitle\", \"title\", \"titleProps\"]);\n\n  var _c = useLayoutConfig(),\n      baseId = _c.baseId,\n      layout = _c.layout;\n\n  var nav = propNavToggle;\n\n  if (typeof nav === \"undefined\") {\n    // set the key to the current layout since we want the button to re-mount\n    // on layout changes so the transition does not occur\n    nav = _jsx(LayoutNavToggle, __assign({}, navToggleProps), layout);\n  }\n\n  var title = customTitle;\n\n  if (typeof title === \"undefined\") {\n    title = _jsx(LayoutAppBarTitle, __assign({}, titleProps, {\n      children: titleChildren\n    }));\n  }\n\n  return _jsxs(AppBar, __assign({\n    id: \"\".concat(baseId, \"-header\")\n  }, props, {\n    ref: ref,\n    fixed: fixed\n  }, {\n    children: [nav, title, children]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAgBA;;;;;;AAKA,OAAO,IAAMC,YAAY,GAAGL,UAAU,CACpC,SAASK,YAAT,CACEC,EADF,EAWEC,GAXF,EAWK;EATD,YAAQ,cAAR;EAAA,IACAC,aADA;EAAA,IACAC,KAAK,mBAAG,IAAH,GAAOD,EADZ;EAAA,IAEWE,aAAa,eAFxB;EAAA,IAGAC,cAAc,oBAHd;EAAA,IAIAC,WAAW,iBAJX;EAAA,IAKOC,aAAa,WALpB;EAAA,IAMAC,UAAU,gBANV;EAAA,IAOGC,KAAK,cARV,0FAQU,CAPR;;EAWI,SAAqBX,eAAe,EAApC;EAAA,IAAEY,MAAM,YAAR;EAAA,IAAUC,MAAM,YAAhB;;EAEN,IAAIC,GAAG,GAAGR,aAAV;;EACA,IAAI,OAAOQ,GAAP,KAAe,WAAnB,EAAgC;IAC9B;IACA;IACAA,GAAG,GAAGC,KAAChB,eAAD,EAAgBiB,aAAkBT,cAAlB,CAAhB,EAAsBM,MAAtB,CAAN;EACD;;EAED,IAAII,KAAK,GAAGT,WAAZ;;EACA,IAAI,OAAOS,KAAP,KAAiB,WAArB,EAAkC;IAChCA,KAAK,GACHF,KAACjB,iBAAD,EAAkBkB,aAAKN,UAAL,EAAe;MAAAQ,UAAGT;IAAH,CAAf,CAAlB,CADF;EAGD;;EAED,OACEU,MAACtB,MAAD,EAAOmB;IAACI,EAAE,EAAE,UAAGR,MAAH,EAAS,SAAT;EAAL,GAA6BD,KAA7B,EAAkC;IAAER,GAAG,EAAEA,GAAP;IAAYE,KAAK,EAAEA;EAAnB,CAAlC,EAA0D;IAAAa,WAC9DJ,GAD8D,EAE9DG,KAF8D,EAG9DC,QAH8D;EAAA,CAA1D,CAAP,CADF;AAOD,CArCmC,CAA/B","names":["forwardRef","AppBar","LayoutAppBarTitle","LayoutNavToggle","useLayoutConfig","LayoutAppBar","_a","ref","_b","fixed","propNavToggle","navToggleProps","customTitle","titleChildren","titleProps","props","baseId","layout","nav","_jsx","__assign","title","children","_jsxs","id"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\layout\\src\\LayoutAppBar.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport type { AppBarProps } from \"@react-md/app-bar\";\nimport { AppBar } from \"@react-md/app-bar\";\n\nimport { LayoutAppBarTitle } from \"./LayoutAppBarTitle\";\nimport type { LayoutWithNavToggle } from \"./LayoutNavToggle\";\nimport { LayoutNavToggle } from \"./LayoutNavToggle\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport type { LayoutWithTitle } from \"./types\";\n\nexport interface BaseLayoutAppBarProps extends Omit<AppBarProps, \"title\"> {\n  /**\n   * Boolean if the `AppBar` should be fixed to the top of the page. Unlike the\n   * regular `AppBar`, this will be defaulted to `true`\n   */\n  fixed?: boolean;\n}\n\nexport interface LayoutAppBarProps\n  extends BaseLayoutAppBarProps,\n    LayoutWithNavToggle,\n    LayoutWithTitle {}\n\n/**\n * This is the default implementation for an `AppBar` within the `Layout` that\n * will conditionally render the default `LayoutNavToggle` button and\n * `AppBarTitle` depending on specific props that were provided.\n */\nexport const LayoutAppBar = forwardRef<HTMLDivElement, LayoutAppBarProps>(\n  function LayoutAppBar(\n    {\n      children,\n      fixed = true,\n      navToggle: propNavToggle,\n      navToggleProps,\n      customTitle,\n      title: titleChildren,\n      titleProps,\n      ...props\n    },\n    ref\n  ) {\n    const { baseId, layout } = useLayoutConfig();\n\n    let nav = propNavToggle;\n    if (typeof nav === \"undefined\") {\n      // set the key to the current layout since we want the button to re-mount\n      // on layout changes so the transition does not occur\n      nav = <LayoutNavToggle key={layout} {...navToggleProps} />;\n    }\n\n    let title = customTitle;\n    if (typeof title === \"undefined\") {\n      title = (\n        <LayoutAppBarTitle {...titleProps}>{titleChildren}</LayoutAppBarTitle>\n      );\n    }\n\n    return (\n      <AppBar id={`${baseId}-header`} {...props} ref={ref} fixed={fixed}>\n        {nav}\n        {title}\n        {children}\n      </AppBar>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}