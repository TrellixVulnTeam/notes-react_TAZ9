{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-divider\");\nexport var Divider = forwardRef(function Divider(_a, ref) {\n  var _b = _a.inset,\n      inset = _b === void 0 ? false : _b,\n      _c = _a.vertical,\n      vertical = _c === void 0 ? false : _c,\n      _d = _a.role,\n      role = _d === void 0 ? \"separator\" : _d,\n      className = _a.className,\n      props = __rest(_a, [\"inset\", \"vertical\", \"role\", \"className\"]);\n\n  var Component = vertical ? \"div\" : \"hr\";\n  return _jsx(Component, __assign({}, props, {\n    ref: ref,\n    role: role,\n    className: cn(block({\n      inset: !vertical && inset,\n      vertical: vertical\n    }), className)\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AA2BA,IAAMC,KAAK,GAAGD,GAAG,CAAC,aAAD,CAAjB;AAEA,OAAO,IAAME,OAAO,GAAGJ,UAAU,CAC/B,SAASI,OAAT,CACEC,EADF,EAQEC,GARF,EAQK;EAND;EAAA,SAAK,mBAAG,KAAH,GAAQC,EAAb;EAAA,IACAC,gBADA;EAAA,IACAC,QAAQ,mBAAG,KAAH,GAAQD,EADhB;EAAA,IAEAE,YAFA;EAAA,IAEAC,IAAI,mBAAG,WAAH,GAAcD,EAFlB;EAAA,IAGAE,SAAS,eAHT;EAAA,IAIGC,KAAK,cALV,0CAKU,CAJR;;EAQF,IAAMC,SAAS,GAAIL,QAAQ,GAAG,KAAH,GAAW,IAAtC;EAEA,OACEM,KAACD,SAAD,EAAUE,aACJH,KADI,EACC;IACTP,GAAG,EAAEA,GADI;IAETK,IAAI,EAAEA,IAFG;IAGTC,SAAS,EAAEX,EAAE,CACXE,KAAK,CAAC;MAAEc,KAAK,EAAE,CAACR,QAAD,IAAaQ,KAAtB;MAA6BR,QAAQ;IAArC,CAAD,CADM,EAEXG,SAFW;EAHJ,CADD,CAAV,CADF;AAWD,CAxB8B,CAA1B","names":["forwardRef","cn","bem","block","Divider","_a","ref","_b","_c","vertical","_d","role","className","props","Component","_jsx","__assign","inset"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\divider\\src\\Divider.tsx"],"sourcesContent":["import type { ElementType, HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nexport type DividerElement = HTMLHRElement | HTMLDivElement;\n\nexport interface DividerProps extends HTMLAttributes<DividerElement> {\n  /**\n   * Boolean if the divider should appear inset instead of full width. This\n   * really just applied a margin-left (or margin-right when dir=\"rtl\").\n   *\n   * If you want to create a divider that is centered, you most likely want to\n   * use the `rmd-divider-theme-update-var` mixin instead to update the\n   * `max-size` of the divider.\n   */\n  inset?: boolean;\n\n  /**\n   * Boolean if the divider should be vertical instead of horizontal. This will\n   * change the divider to be rendered as a `<div>` instead of an `<hr>`.\n   *\n   * Note: If your parent element of the divider does not have a static height\n   * set, you **must** manually set the height of the divider to a static\n   * non-percentage number OR use the `VerticalDivider` component instead to\n   * automagically create a valid percentage height.\n   */\n  vertical?: boolean;\n}\n\nconst block = bem(\"rmd-divider\");\n\nexport const Divider = forwardRef<DividerElement, DividerProps>(\n  function Divider(\n    {\n      inset = false,\n      vertical = false,\n      role = \"separator\",\n      className,\n      ...props\n    },\n    ref\n  ) {\n    const Component = (vertical ? \"div\" : \"hr\") as ElementType;\n\n    return (\n      <Component\n        {...props}\n        ref={ref}\n        role={role}\n        className={cn(\n          block({ inset: !vertical && inset, vertical }),\n          className\n        )}\n      />\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}