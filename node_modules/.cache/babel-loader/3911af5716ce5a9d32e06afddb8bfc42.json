{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar styles = bem(\"rmd-fab\");\n/**\n * This is a simple wrapper for the `Button` component that will conditionally\n * render the `Button` in a `<span>` to render as a floating action button.\n *\n * Note: You probably don't really want to use this externally since this is\n * really just required so that the click and focus states behavior will still\n * be contained within the button. The states behavior requires\n * `position: relative` to work while changing into a floating action button\n * makes it `position: fixed`.\n */\n\nexport var FAB = forwardRef(function FAB(_a, ref) {\n  var _b = _a.position,\n      position = _b === void 0 ? null : _b,\n      children = _a.children,\n      className = _a.className,\n      props = __rest(_a, [\"position\", \"children\", \"className\"]);\n\n  if (!position) {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n\n  return _jsx(\"span\", __assign({}, props, {\n    ref: ref,\n    className: cn(styles({\n      tl: position === \"top-left\",\n      tr: position === \"top-right\",\n      bl: position === \"bottom-left\",\n      br: position === \"bottom-right\"\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAoBA,IAAMC,MAAM,GAAGD,GAAG,CAAC,SAAD,CAAlB;AAEA;;;;;;;;;;;AAUA,OAAO,IAAME,GAAG,GAAGJ,UAAU,CAA4B,SAASI,GAAT,CACvDC,EADuD,EAEvDC,GAFuD,EAEpD;EADD;EAAA,YAAQ,mBAAG,IAAH,GAAOC,EAAf;EAAA,IAAiBC,QAAQ,cAAzB;EAAA,IAA2BC,SAAS,eAApC;EAAA,IAAyCC,KAAK,cAAhD,qCAAgD,CAA9C;;EAGF,IAAI,CAACC,QAAL,EAAe;IACb,OAAOC;MAAAJ,UAAGA;IAAH,EAAP;EACD;;EAED,OACEI,0BACMF,KADN,EACW;IACTJ,GAAG,EAAEA,GADI;IAETG,SAAS,EAAER,EAAE,CACXE,MAAM,CAAC;MACLU,EAAE,EAAEF,QAAQ,KAAK,UADZ;MAELG,EAAE,EAAEH,QAAQ,KAAK,WAFZ;MAGLI,EAAE,EAAEJ,QAAQ,KAAK,aAHZ;MAILK,EAAE,EAAEL,QAAQ,KAAK;IAJZ,CAAD,CADK,EAOXF,SAPW;EAFJ,CADX,EAWG;IAAAD,UAEAA;EAFA,CAXH,EADF;AAiBD,CAzB4B,CAAtB","names":["forwardRef","cn","bem","styles","FAB","_a","ref","_b","children","className","props","position","_jsx","tl","tr","bl","br"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\button\\src\\FAB.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\n/**\n * The position within the viewport for the floating action button.\n */\nexport type FABPosition =\n  | null\n  | \"bottom-left\"\n  | \"bottom-right\"\n  | \"top-left\"\n  | \"top-right\";\n\nexport interface FABProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * The position within the viewport to display the button as a floating action\n   * button.\n   */\n  position?: FABPosition;\n}\n\nconst styles = bem(\"rmd-fab\");\n\n/**\n * This is a simple wrapper for the `Button` component that will conditionally\n * render the `Button` in a `<span>` to render as a floating action button.\n *\n * Note: You probably don't really want to use this externally since this is\n * really just required so that the click and focus states behavior will still\n * be contained within the button. The states behavior requires\n * `position: relative` to work while changing into a floating action button\n * makes it `position: fixed`.\n */\nexport const FAB = forwardRef<HTMLSpanElement, FABProps>(function FAB(\n  { position = null, children, className, ...props },\n  ref\n) {\n  if (!position) {\n    return <>{children}</>;\n  }\n\n  return (\n    <span\n      {...props}\n      ref={ref}\n      className={cn(\n        styles({\n          tl: position === \"top-left\",\n          tr: position === \"top-right\",\n          bl: position === \"bottom-left\",\n          br: position === \"bottom-right\",\n        }),\n        className\n      )}\n    >\n      {children}\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}