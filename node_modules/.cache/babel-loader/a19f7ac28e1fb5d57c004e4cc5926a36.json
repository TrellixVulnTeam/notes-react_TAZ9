{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useEffect, useState } from \"react\";\nimport { DEFAULT_DESKTOP_LARGE_MIN_WIDTH, DEFAULT_DESKTOP_MIN_WIDTH, DEFAULT_PHONE_MAX_WIDTH, DEFAULT_TABLET_MAX_WIDTH, DEFAULT_TABLET_MIN_WIDTH } from \"./constants\";\nimport { useOrientation } from \"./useOrientation\";\nimport { useWidthMediaQuery } from \"./useWidthMediaQuery\";\nexport var DEFAULT_APP_SIZE = {\n  isPhone: false,\n  isTablet: false,\n  isDesktop: true,\n  isLargeDesktop: false,\n  isLandscape: true\n};\n/**\n * This hook is used to determine the current application size based on the\n * provided query sizes. When you want to render your app server side, you will\n * need to provide a custom `defaultSize` that implements your logic to\n * determine the type of device requesting a page. Once the app has been\n * rendered in the DOM, this hook will attach event listeners to automatically\n * update the app size when the page is resized.\n *\n * @internal\n */\n\nexport function useAppSizeMedia(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.phoneMaxWidth,\n      phoneMaxWidth = _c === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _c,\n      _d = _b.tabletMinWidth,\n      tabletMinWidth = _d === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _d,\n      _e = _b.tabletMaxWidth,\n      tabletMaxWidth = _e === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _e,\n      _f = _b.desktopMinWidth,\n      desktopMinWidth = _f === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _f,\n      _g = _b.desktopLargeMinWidth,\n      desktopLargeMinWidth = _g === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _g,\n      _h = _b.defaultSize,\n      defaultSize = _h === void 0 ? DEFAULT_APP_SIZE : _h;\n  /* eslint-disable react-hooks/rules-of-hooks */\n  // disabled since this is conditionally applied for SSR\n\n\n  if (typeof window === \"undefined\") {\n    return defaultSize;\n  }\n\n  var matchesDesktop = useWidthMediaQuery({\n    min: desktopMinWidth\n  });\n  var matchesLargeDesktop = useWidthMediaQuery({\n    min: desktopLargeMinWidth\n  });\n  var matchesTablet = useWidthMediaQuery({\n    min: tabletMinWidth,\n    max: tabletMaxWidth\n  });\n  var matchesPhone = useWidthMediaQuery({\n    max: phoneMaxWidth\n  });\n  var isDesktop = matchesDesktop;\n  var isTablet = !matchesDesktop && matchesTablet;\n  var isPhone = !isTablet && !isDesktop && matchesPhone;\n  var isLandscape = useOrientation().includes(\"landscape\");\n  var isLargeDesktop = matchesLargeDesktop;\n\n  var _j = __read(useState(defaultSize), 2),\n      appSize = _j[0],\n      setAppSize = _j[1];\n\n  useEffect(function () {\n    if (appSize.isPhone === isPhone && appSize.isTablet === isTablet && appSize.isDesktop === isDesktop && appSize.isLargeDesktop === isLargeDesktop && appSize.isLandscape === isLandscape) {\n      return;\n    } // for some reason, it's sometimes possible to fail every single matchMedia\n    // value when you are resizing the browser a lot. this is an \"invalid\" event\n    // so skip it. It normally happens between 760px-768px\n\n\n    if (!isPhone && !isTablet && !isDesktop && !isLargeDesktop) {\n      return;\n    }\n\n    setAppSize({\n      isPhone: isPhone,\n      isTablet: isTablet,\n      isDesktop: isDesktop,\n      isLargeDesktop: isLargeDesktop,\n      isLandscape: isLandscape\n    });\n  }, [isPhone, isTablet, isDesktop, isLargeDesktop, isLandscape, appSize]);\n  return appSize;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,SACEC,+BADF,EAEEC,yBAFF,EAGEC,uBAHF,EAIEC,wBAJF,EAKEC,wBALF,QAMO,aANP;AAOA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AA2CA,OAAO,IAAMC,gBAAgB,GAAY;EACvCC,OAAO,EAAE,KAD8B;EAEvCC,QAAQ,EAAE,KAF6B;EAGvCC,SAAS,EAAE,IAH4B;EAIvCC,cAAc,EAAE,KAJuB;EAKvCC,WAAW,EAAE;AAL0B,CAAlC;AA6CP;;;;;;;;;;;AAUA,OAAM,SAAUC,eAAV,CAA0BC,EAA1B,EAOgB;MAPUC,qBAOZ,EAPY,GAOVD;MANpBE;MAAAC,aAAa,mBAAGf,uBAAH,GAA0Bc;MACvCE;MAAAC,cAAc,mBAAGf,wBAAH,GAA2Bc;MACzCE;MAAAC,cAAc,mBAAGlB,wBAAH,GAA2BiB;MACzCE;MAAAC,eAAe,mBAAGtB,yBAAH,GAA4BqB;MAC3CE;MAAAC,oBAAoB,mBAAGzB,+BAAH,GAAkCwB;MACtDE;MAAAC,WAAW,mBAAGpB,gBAAH,GAAmBmB;EAE9B;EACA;;;EACA,IAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;IACjC,OAAOD,WAAP;EACD;;EAED,IAAME,cAAc,GAAGvB,kBAAkB,CAAC;IAAEwB,GAAG,EAAEP;EAAP,CAAD,CAAzC;EACA,IAAMQ,mBAAmB,GAAGzB,kBAAkB,CAAC;IAAEwB,GAAG,EAAEL;EAAP,CAAD,CAA9C;EACA,IAAMO,aAAa,GAAG1B,kBAAkB,CAAC;IACvCwB,GAAG,EAAEX,cADkC;IAEvCc,GAAG,EAAEZ;EAFkC,CAAD,CAAxC;EAIA,IAAMa,YAAY,GAAG5B,kBAAkB,CAAC;IAAE2B,GAAG,EAAEhB;EAAP,CAAD,CAAvC;EACA,IAAMP,SAAS,GAAGmB,cAAlB;EACA,IAAMpB,QAAQ,GAAG,CAACoB,cAAD,IAAmBG,aAApC;EACA,IAAMxB,OAAO,GAAG,CAACC,QAAD,IAAa,CAACC,SAAd,IAA2BwB,YAA3C;EACA,IAAMtB,WAAW,GAAGP,cAAc,GAAG8B,QAAjB,CAA0B,WAA1B,CAApB;EACA,IAAMxB,cAAc,GAAGoB,mBAAvB;;EAEM,gBAAwBhC,QAAQ,CAAC4B,WAAD,CAAhC,EAA6C,CAA7C;EAAA,IAACS,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;;EACNvC,SAAS,CAAC;IACR,IACEsC,OAAO,CAAC5B,OAAR,KAAoBA,OAApB,IACA4B,OAAO,CAAC3B,QAAR,KAAqBA,QADrB,IAEA2B,OAAO,CAAC1B,SAAR,KAAsBA,SAFtB,IAGA0B,OAAO,CAACzB,cAAR,KAA2BA,cAH3B,IAIAyB,OAAO,CAACxB,WAAR,KAAwBA,WAL1B,EAME;MACA;IACD,CATO,CAWR;IACA;IACA;;;IACA,IAAI,CAACJ,OAAD,IAAY,CAACC,QAAb,IAAyB,CAACC,SAA1B,IAAuC,CAACC,cAA5C,EAA4D;MAC1D;IACD;;IAED0B,UAAU,CAAC;MAAE7B,OAAO,SAAT;MAAWC,QAAQ,UAAnB;MAAqBC,SAAS,WAA9B;MAAgCC,cAAc,gBAA9C;MAAgDC,WAAW;IAA3D,CAAD,CAAV;EACD,CAnBQ,EAmBN,CAACJ,OAAD,EAAUC,QAAV,EAAoBC,SAApB,EAA+BC,cAA/B,EAA+CC,WAA/C,EAA4DwB,OAA5D,CAnBM,CAAT;EAqBA,OAAOA,OAAP;AACD","names":["useEffect","useState","DEFAULT_DESKTOP_LARGE_MIN_WIDTH","DEFAULT_DESKTOP_MIN_WIDTH","DEFAULT_PHONE_MAX_WIDTH","DEFAULT_TABLET_MAX_WIDTH","DEFAULT_TABLET_MIN_WIDTH","useOrientation","useWidthMediaQuery","DEFAULT_APP_SIZE","isPhone","isTablet","isDesktop","isLargeDesktop","isLandscape","useAppSizeMedia","_a","_b","_c","phoneMaxWidth","_d","tabletMinWidth","_e","tabletMaxWidth","_f","desktopMinWidth","_g","desktopLargeMinWidth","_h","defaultSize","window","matchesDesktop","min","matchesLargeDesktop","matchesTablet","max","matchesPhone","includes","appSize","setAppSize"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\sizing\\useAppSizeMedia.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport type { QuerySize } from \"./constants\";\nimport {\n  DEFAULT_DESKTOP_LARGE_MIN_WIDTH,\n  DEFAULT_DESKTOP_MIN_WIDTH,\n  DEFAULT_PHONE_MAX_WIDTH,\n  DEFAULT_TABLET_MAX_WIDTH,\n  DEFAULT_TABLET_MIN_WIDTH,\n} from \"./constants\";\nimport { useOrientation } from \"./useOrientation\";\nimport { useWidthMediaQuery } from \"./useWidthMediaQuery\";\n\n/**\n * The current size for your application. This should work both server side and\n * client side, but you will have much better results client side.\n */\nexport interface AppSize {\n  /**\n   * Boolean if currently matching a phone by comparing the max width of the\n   * device.\n   */\n  isPhone: boolean;\n\n  /**\n   * Boolean if currently matching a tablet by comparing the max width of the\n   * device.\n   */\n  isTablet: boolean;\n\n  /**\n   * Boolean if currently matching a desktop screen by comparing the max width\n   * of the device.\n   */\n  isDesktop: boolean;\n\n  /**\n   * Boolean if currently matching a large desktop screen by comparing the max\n   * width of the device.\n   */\n  isLargeDesktop: boolean;\n\n  /**\n   * Boolean if the app is considered to be in landscape mode. This will just\n   * verify that the window width is greater than the window height.\n   *\n   * NOTE: This might not be super accurate on Android devices since the soft\n   * keyboard will change the dimensions of the viewport when it appears. It is\n   * recommended to use the `useOrientation` hook as well if you'd like to get\n   * the current orientation type.\n   */\n  isLandscape: boolean;\n}\n\nexport const DEFAULT_APP_SIZE: AppSize = {\n  isPhone: false,\n  isTablet: false,\n  isDesktop: true,\n  isLargeDesktop: false,\n  isLandscape: true,\n};\n\nexport interface AppSizeOptions {\n  /**\n   * The max width to use for phones. This one is a max width unlike the others\n   * since everything from 0 to this value will be considered a phone.\n   */\n  phoneMaxWidth?: QuerySize;\n\n  /**\n   * The min width for a tablet device.\n   */\n  tabletMinWidth?: QuerySize;\n\n  /**\n   * The max width for a tablet device. This should normally be `1px` less than\n   * the `desktopMinWidth`, but it can be any value if needed. The tablet has a\n   * range of min to max so that you can have a bit more control.\n   */\n  tabletMaxWidth?: QuerySize;\n\n  /**\n   * The min width for a desktop screen.\n   */\n  desktopMinWidth?: QuerySize;\n\n  /**\n   * The min width for a large desktop screen.\n   */\n  desktopLargeMinWidth?: QuerySize;\n\n  /**\n   * An optional default size to use for your app. This is really only helpful\n   * when trying to do server side rendering or initial page render since the\n   * default behavior is to check and update the size once mounted in the DOM.\n   */\n  defaultSize?: AppSize;\n}\n\n/**\n * This hook is used to determine the current application size based on the\n * provided query sizes. When you want to render your app server side, you will\n * need to provide a custom `defaultSize` that implements your logic to\n * determine the type of device requesting a page. Once the app has been\n * rendered in the DOM, this hook will attach event listeners to automatically\n * update the app size when the page is resized.\n *\n * @internal\n */\nexport function useAppSizeMedia({\n  phoneMaxWidth = DEFAULT_PHONE_MAX_WIDTH,\n  tabletMinWidth = DEFAULT_TABLET_MIN_WIDTH,\n  tabletMaxWidth = DEFAULT_TABLET_MAX_WIDTH,\n  desktopMinWidth = DEFAULT_DESKTOP_MIN_WIDTH,\n  desktopLargeMinWidth = DEFAULT_DESKTOP_LARGE_MIN_WIDTH,\n  defaultSize = DEFAULT_APP_SIZE,\n}: AppSizeOptions = {}): AppSize {\n  /* eslint-disable react-hooks/rules-of-hooks */\n  // disabled since this is conditionally applied for SSR\n  if (typeof window === \"undefined\") {\n    return defaultSize;\n  }\n\n  const matchesDesktop = useWidthMediaQuery({ min: desktopMinWidth });\n  const matchesLargeDesktop = useWidthMediaQuery({ min: desktopLargeMinWidth });\n  const matchesTablet = useWidthMediaQuery({\n    min: tabletMinWidth,\n    max: tabletMaxWidth,\n  });\n  const matchesPhone = useWidthMediaQuery({ max: phoneMaxWidth });\n  const isDesktop = matchesDesktop;\n  const isTablet = !matchesDesktop && matchesTablet;\n  const isPhone = !isTablet && !isDesktop && matchesPhone;\n  const isLandscape = useOrientation().includes(\"landscape\");\n  const isLargeDesktop = matchesLargeDesktop;\n\n  const [appSize, setAppSize] = useState(defaultSize);\n  useEffect(() => {\n    if (\n      appSize.isPhone === isPhone &&\n      appSize.isTablet === isTablet &&\n      appSize.isDesktop === isDesktop &&\n      appSize.isLargeDesktop === isLargeDesktop &&\n      appSize.isLandscape === isLandscape\n    ) {\n      return;\n    }\n\n    // for some reason, it's sometimes possible to fail every single matchMedia\n    // value when you are resizing the browser a lot. this is an \"invalid\" event\n    // so skip it. It normally happens between 760px-768px\n    if (!isPhone && !isTablet && !isDesktop && !isLargeDesktop) {\n      return;\n    }\n\n    setAppSize({ isPhone, isTablet, isDesktop, isLargeDesktop, isLandscape });\n  }, [isPhone, isTablet, isDesktop, isLargeDesktop, isLandscape, appSize]);\n\n  return appSize;\n}\n"]},"metadata":{},"sourceType":"module"}