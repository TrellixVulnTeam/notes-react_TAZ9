{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-icon-rotator\");\n/**\n * The `IconRotator` is a simple component that is used to rotate an icon from a\n * one degrees to another.\n */\n\nexport var IconRotator = forwardRef(function IconRotator(_a, ref) {\n  var style = _a.style,\n      propClassName = _a.className,\n      _b = _a.animate,\n      animate = _b === void 0 ? true : _b,\n      rotated = _a.rotated,\n      children = _a.children,\n      _c = _a.forceIconWrap,\n      forceIconWrap = _c === void 0 ? false : _c,\n      props = __rest(_a, [\"style\", \"className\", \"animate\", \"rotated\", \"children\", \"forceIconWrap\"]);\n\n  var className = cn(block({\n    animate: animate,\n    rotated: rotated\n  }), propClassName);\n\n  if (!forceIconWrap && isValidElement(children)) {\n    var child = Children.only(children);\n    return cloneElement(child, {\n      className: cn(className, child.props.className)\n    });\n  }\n\n  return _jsx(\"span\", __assign({}, props, {\n    style: style,\n    className: className,\n    ref: ref\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAT,EAAmBC,YAAnB,EAAiCC,UAAjC,EAA6CC,cAA7C,QAAmE,OAAnE;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,GAAT,QAAoB,iBAApB;AAyCA,IAAMC,KAAK,GAAGD,GAAG,CAAC,kBAAD,CAAjB;AAEA;;;;;AAIA,OAAO,IAAME,WAAW,GAAGL,UAAU,CACnC,SAASK,WAAT,CACEC,EADF,EAUEC,GAVF,EAUK;EARD,SAAK,WAAL;EAAA,IACWC,aAAa,eADxB;EAAA,IAEAC,eAFA;EAAA,IAEAC,OAAO,mBAAG,IAAH,GAAOD,EAFd;EAAA,IAGAE,OAAO,aAHP;EAAA,IAIAC,QAAQ,cAJR;EAAA,IAKAC,qBALA;EAAA,IAKAC,aAAa,mBAAG,KAAH,GAAQD,EALrB;EAAA,IAMGE,KAAK,cAPV,yEAOU,CANR;;EAUF,IAAMC,SAAS,GAAGd,EAAE,CAACE,KAAK,CAAC;IAAEM,OAAO,SAAT;IAAWC,OAAO;EAAlB,CAAD,CAAN,EAA8BH,aAA9B,CAApB;;EACA,IAAI,CAACM,aAAD,IAAkBb,cAAc,CAACW,QAAD,CAApC,EAAgD;IAC9C,IAAMK,KAAK,GAAGnB,QAAQ,CAACoB,IAAT,CAAuCN,QAAvC,CAAd;IACA,OAAOb,YAAY,CAACkB,KAAD,EAAQ;MACzBD,SAAS,EAAEd,EAAE,CAACc,SAAD,EAAYC,KAAK,CAACF,KAAN,CAAYC,SAAxB;IADY,CAAR,CAAnB;EAGD;;EAED,OACEG,0BAAUJ,KAAV,EAAe;IAAEK,KAAK,EAAEA,KAAT;IAAgBJ,SAAS,EAAEA,SAA3B;IAAsCT,GAAG,EAAEA;EAA3C,CAAf,EAA6D;IAAAK,UAC1DA;EAD0D,CAA7D,EADF;AAKD,CA1BkC,CAA9B","names":["Children","cloneElement","forwardRef","isValidElement","cn","bem","block","IconRotator","_a","ref","propClassName","_b","animate","rotated","children","_c","forceIconWrap","props","className","child","only","_jsx","style"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\icon\\src\\IconRotator.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, ReactNode } from \"react\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport type { ClassNameCloneableChild } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface IconRotatorBaseProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * An optional style to apply to the surrounding span when the `forceIconWrap`\n   * prop is enabled or the children is not a single react element.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional className to apply.\n   */\n  className?: string;\n\n  /**\n   * Boolean if the rotation should be animated instead of static.\n   */\n  animate?: boolean;\n\n  /**\n   * Boolean if the icon is currently rotated.\n   */\n  rotated: boolean;\n\n  /**\n   * Boolean if the child icon should be \"forcefully\" wrapped in a `<span>`\n   * element. This should be enabled if you have a custom icon that does not\n   * pass the `className` prop down.\n   */\n  forceIconWrap?: boolean;\n}\n\nexport interface IconRotatorProps extends IconRotatorBaseProps {\n  /**\n   * The icon that should be rotated. If this is a valid React Element, the\n   * class names will be cloned into that icon, otherwise the icon will be\n   * wrapped in a span with the correct class names applied.\n   */\n  children: ReactNode;\n}\n\nconst block = bem(\"rmd-icon-rotator\");\n\n/**\n * The `IconRotator` is a simple component that is used to rotate an icon from a\n * one degrees to another.\n */\nexport const IconRotator = forwardRef<HTMLSpanElement, IconRotatorProps>(\n  function IconRotator(\n    {\n      style,\n      className: propClassName,\n      animate = true,\n      rotated,\n      children,\n      forceIconWrap = false,\n      ...props\n    },\n    ref\n  ) {\n    const className = cn(block({ animate, rotated }), propClassName);\n    if (!forceIconWrap && isValidElement(children)) {\n      const child = Children.only<ClassNameCloneableChild>(children);\n      return cloneElement(child, {\n        className: cn(className, child.props.className),\n      });\n    }\n\n    return (\n      <span {...props} style={style} className={className} ref={ref}>\n        {children}\n      </span>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}