{"ast":null,"code":"import { useCallback, useRef } from \"react\";\n/**\n * Creates a temporary value that gets reset every `x`ms back to the provided\n * default value. This is useful when doing keyboard searching or other\n * interactions.\n *\n * NOTE: This does not force a re-render when the value changes and instead uses\n * a ref value instead.\n *\n * @typeParam T - the type for the value\n * @param defaultValue - The default value to use. Each time the reset timeout\n * is triggered, this value will be set again.\n * @param resetTime - The amount of time before the value is reset back to the\n * default value\n */\n\nexport function useTempValue(defaultValue, resetTime) {\n  if (resetTime === void 0) {\n    resetTime = 500;\n  }\n\n  var value = useRef(defaultValue);\n  var timeout = useRef();\n  var resetValue = useCallback(function () {\n    window.clearTimeout(timeout.current);\n    value.current = defaultValue;\n  }, [defaultValue]);\n  var setValue = useCallback(function (nextValue) {\n    value.current = nextValue;\n    window.clearTimeout(timeout.current);\n    timeout.current = window.setTimeout(resetValue, resetTime);\n  }, [resetTime, resetValue]);\n  return [value, setValue, resetValue];\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AAQA;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,YAAV,CACJC,YADI,EAEJC,SAFI,EAEW;EAAf;IAAAA;EAAe;;EAEf,IAAMC,KAAK,GAAGJ,MAAM,CAACE,YAAD,CAApB;EACA,IAAMG,OAAO,GAAGL,MAAM,EAAtB;EACA,IAAMM,UAAU,GAAGP,WAAW,CAAC;IAC7BQ,MAAM,CAACC,YAAP,CAAoBH,OAAO,CAACI,OAA5B;IACAL,KAAK,CAACK,OAAN,GAAgBP,YAAhB;EACD,CAH6B,EAG3B,CAACA,YAAD,CAH2B,CAA9B;EAKA,IAAMQ,QAAQ,GAAGX,WAAW,CAC1B,UAACY,SAAD,EAAa;IACXP,KAAK,CAACK,OAAN,GAAgBE,SAAhB;IACAJ,MAAM,CAACC,YAAP,CAAoBH,OAAO,CAACI,OAA5B;IACAJ,OAAO,CAACI,OAAR,GAAkBF,MAAM,CAACK,UAAP,CAAkBN,UAAlB,EAA8BH,SAA9B,CAAlB;EACD,CALyB,EAM1B,CAACA,SAAD,EAAYG,UAAZ,CAN0B,CAA5B;EASA,OAAO,CAACF,KAAD,EAAQM,QAAR,EAAkBJ,UAAlB,CAAP;AACD","names":["useCallback","useRef","useTempValue","defaultValue","resetTime","value","timeout","resetValue","window","clearTimeout","current","setValue","nextValue","setTimeout"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\useTempValue.ts"],"sourcesContent":["import type { MutableRefObject } from \"react\";\nimport { useCallback, useRef } from \"react\";\n\ntype CurrentValueRef<T> = MutableRefObject<T>;\ntype SetValue<T> = (nextValue: T) => void;\ntype ResetValue = () => void;\n\ntype ReturnValue<T> = [CurrentValueRef<T>, SetValue<T>, ResetValue];\n\n/**\n * Creates a temporary value that gets reset every `x`ms back to the provided\n * default value. This is useful when doing keyboard searching or other\n * interactions.\n *\n * NOTE: This does not force a re-render when the value changes and instead uses\n * a ref value instead.\n *\n * @typeParam T - the type for the value\n * @param defaultValue - The default value to use. Each time the reset timeout\n * is triggered, this value will be set again.\n * @param resetTime - The amount of time before the value is reset back to the\n * default value\n */\nexport function useTempValue<T>(\n  defaultValue: T,\n  resetTime = 500\n): ReturnValue<T> {\n  const value = useRef(defaultValue);\n  const timeout = useRef<number>();\n  const resetValue = useCallback(() => {\n    window.clearTimeout(timeout.current);\n    value.current = defaultValue;\n  }, [defaultValue]);\n\n  const setValue = useCallback(\n    (nextValue: T) => {\n      value.current = nextValue;\n      window.clearTimeout(timeout.current);\n      timeout.current = window.setTimeout(resetValue, resetTime);\n    },\n    [resetTime, resetValue]\n  );\n\n  return [value, setValue, resetValue];\n}\n"]},"metadata":{},"sourceType":"module"}