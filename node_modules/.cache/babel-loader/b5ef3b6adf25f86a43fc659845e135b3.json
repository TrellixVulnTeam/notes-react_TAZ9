{"ast":null,"code":"import { useCallback } from \"react\";\n/**\n * This will conditionally close the dialog when the escape key is pressed.\n *\n * @param onRequestClose - The function to call to close the dialog.\n * @param disabled - Boolean if the escape key functionality should be disabled\n * @param onKeyDown - An optional keydown event handler to also call.\n * @returns A keydown event handler\n */\n\nexport function useCloseOnEscape(onRequestClose, disabled, onKeyDown) {\n  var handleKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    if (event.key === \"Escape\") {\n      onRequestClose();\n    }\n  }, [onKeyDown, onRequestClose]);\n  return disabled ? onKeyDown : handleKeyDown;\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,OAA5B;AAEA;;;;;;;;;AAQA,OAAM,SAAUC,gBAAV,CACJC,cADI,EAEJC,QAFI,EAGJC,SAHI,EAG+B;EAEnC,IAAMC,aAAa,GAAGL,WAAW,CAC/B,UAACM,KAAD,EAAM;IACJ,IAAIF,SAAJ,EAAe;MACbA,SAAS,CAACE,KAAD,CAAT;IACD;;IAED,IAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;MAC1BL,cAAc;IACf;EACF,CAT8B,EAU/B,CAACE,SAAD,EAAYF,cAAZ,CAV+B,CAAjC;EAaA,OAAOC,QAAQ,GAAGC,SAAH,GAAeC,aAA9B;AACD","names":["useCallback","useCloseOnEscape","onRequestClose","disabled","onKeyDown","handleKeyDown","event","key"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\wia-aria\\useCloseOnEscape.ts"],"sourcesContent":["import type { KeyboardEventHandler } from \"react\";\nimport { useCallback } from \"react\";\n\n/**\n * This will conditionally close the dialog when the escape key is pressed.\n *\n * @param onRequestClose - The function to call to close the dialog.\n * @param disabled - Boolean if the escape key functionality should be disabled\n * @param onKeyDown - An optional keydown event handler to also call.\n * @returns A keydown event handler\n */\nexport function useCloseOnEscape<E extends HTMLElement>(\n  onRequestClose: () => void,\n  disabled: boolean,\n  onKeyDown?: KeyboardEventHandler<E>\n): KeyboardEventHandler<E> | undefined {\n  const handleKeyDown = useCallback<KeyboardEventHandler<E>>(\n    (event) => {\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      if (event.key === \"Escape\") {\n        onRequestClose();\n      }\n    },\n    [onKeyDown, onRequestClose]\n  );\n\n  return disabled ? onKeyDown : handleKeyDown;\n}\n"]},"metadata":{},"sourceType":"module"}