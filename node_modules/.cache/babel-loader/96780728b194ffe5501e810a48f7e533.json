{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem, getPercentage } from \"@react-md/utils\";\nvar block = bem(\"rmd-circular-progress\");\nexport var CircularProgress = forwardRef(function CircularProgress(_a, ref) {\n  var className = _a.className,\n      propSvgStyle = _a.svgStyle,\n      svgClassName = _a.svgClassName,\n      propCircleStyle = _a.circleStyle,\n      circleClassName = _a.circleClassName,\n      value = _a.value,\n      _b = _a.min,\n      min = _b === void 0 ? 0 : _b,\n      _c = _a.max,\n      max = _c === void 0 ? 100 : _c,\n      _d = _a.radius,\n      radius = _d === void 0 ? 30 : _d,\n      _e = _a.center,\n      center = _e === void 0 ? 33 : _e,\n      _f = _a.viewBox,\n      viewBox = _f === void 0 ? \"0 0 66 66\" : _f,\n      _g = _a.dashoffset,\n      dashoffset = _g === void 0 ? 187 : _g,\n      _h = _a.animate,\n      animate = _h === void 0 ? true : _h,\n      _j = _a.centered,\n      centered = _j === void 0 ? true : _j,\n      _k = _a.maxRotation,\n      maxRotation = _k === void 0 ? 360 * 1.75 : _k,\n      _l = _a.small,\n      small = _l === void 0 ? false : _l,\n      props = __rest(_a, [\"className\", \"svgStyle\", \"svgClassName\", \"circleStyle\", \"circleClassName\", \"value\", \"min\", \"max\", \"radius\", \"center\", \"viewBox\", \"dashoffset\", \"animate\", \"centered\", \"maxRotation\", \"small\"]);\n\n  var progress;\n\n  if (typeof value === \"number\") {\n    progress = getPercentage({\n      min: min,\n      max: max,\n      value: value\n    });\n  }\n\n  var svgStyle = useMemo(function () {\n    if (typeof progress !== \"number\") {\n      return propSvgStyle;\n    }\n\n    var transform = propSvgStyle && propSvgStyle.transform;\n\n    if (maxRotation > 0) {\n      var rotate = \"rotate(\".concat(maxRotation * progress, \"deg)\");\n      transform = \"\".concat(rotate).concat(transform ? \" \".concat(transform) : \"\");\n    }\n\n    return __assign(__assign({}, propSvgStyle), {\n      WebkitTransform: transform,\n      transform: transform\n    });\n  }, [progress, maxRotation, propSvgStyle]);\n  var circleStyle = useMemo(function () {\n    if (typeof progress !== \"number\") {\n      return propCircleStyle;\n    }\n\n    return __assign(__assign({}, propCircleStyle), {\n      strokeDashoffset: dashoffset - dashoffset * progress\n    });\n  }, [progress, propCircleStyle, dashoffset]);\n  var determinate = typeof progress === \"number\";\n  var indeterminate = !determinate;\n  return _jsx(\"span\", __assign({}, props, {\n    ref: ref,\n    role: \"progressbar\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": value,\n    className: cn(block({\n      centered: centered,\n      small: small\n    }), className)\n  }, {\n    children: _jsx(\"svg\", __assign({\n      style: svgStyle,\n      className: cn(block(\"svg\", {\n        animate: animate && determinate,\n        determinate: determinate,\n        indeterminate: indeterminate\n      }), svgClassName),\n      viewBox: viewBox\n    }, {\n      children: _jsx(\"circle\", {\n        style: circleStyle,\n        className: cn(block(\"circle\", {\n          animate: animate && determinate,\n          determinate: determinate,\n          indeterminate: indeterminate\n        }), circleClassName),\n        r: radius,\n        cx: center,\n        cy: center\n      })\n    }))\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useMemo","cn","bem","getPercentage","block","CircularProgress","_a","ref","propSvgStyle","svgClassName","propCircleStyle","circleClassName","value","_b","min","_c","max","_d","radius","_e","center","_f","viewBox","_g","dashoffset","_h","animate","_j","centered","_k","maxRotation","_l","small","props","progress","svgStyle","transform","rotate","concat","WebkitTransform","circleStyle","strokeDashoffset","determinate","indeterminate","_jsx","role","className","children","style","r","cx","cy"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\progress\\src\\CircularProgress.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes } from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem, getPercentage } from \"@react-md/utils\";\n\nimport type { ProgressProps } from \"./types\";\n\nexport interface CircularProgressProps\n  extends Omit<HTMLAttributes<HTMLSpanElement>, \"id\">,\n    ProgressProps {\n  /**\n   * An optional style to apply to the svg within the circular progress. The\n   * values of this style object will be merged with the current determinate\n   * style (if it exists).\n   */\n  svgStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the svg within the circular progress.\n   */\n  svgClassName?: string;\n\n  /**\n   * An optional style to apply to the circle within the circular progress. The\n   * values of this style object will be merged with the current determinate\n   * style (if it exists).\n   */\n  circleStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the circle within the circular progress.\n   */\n  circleClassName?: string;\n\n  /**\n   * The radius for the circle. It is generally recommended to have the radius\n   * be 1/2 of the viewbox and minus a few more pixels so that there is some\n   * surrounding padding. You probably shouldn't really be changing this prop\n   * though.\n   */\n  radius?: number;\n\n  /**\n   * The center point for the circle. This should be half of the `viewBox` prop\n   * 99% of the time and probably won't be changed.\n   */\n  center?: number;\n\n  /**\n   * The viewbox for the child svg. I wouldn't recommend changing this value as\n   * you will also need to update the `dashoffset` in both Sass and this prop to\n   * get the animation to look nice again.\n   */\n  viewBox?: string;\n\n  /**\n   * The `stroke-dashoffset` for the circle within the SVG. You probably won't\n   * be changing this value that much as it should match the\n   * `$rmd-progress-circle-dashoffset` Sass variable. This is really just used\n   * to help to create the determinate progress animation.\n   */\n  dashoffset?: number;\n\n  /**\n   * The max rotation value for the circular progress. If you set this value to\n   * a number less than or equal to 0, the circular progress will no longer\n   * rotate with the determinate progress type.\n   */\n  maxRotation?: number;\n\n  /**\n   * Boolean if the circular progress should be centered using left and right\n   * margins.\n   */\n  centered?: boolean;\n\n  /**\n   * Boolean if the smaller size should be used instead.\n   *\n   * @remarks \\@since 2.3.0\n   */\n  small?: boolean;\n}\n\nconst block = bem(\"rmd-circular-progress\");\n\nexport const CircularProgress = forwardRef<\n  HTMLSpanElement,\n  CircularProgressProps\n>(function CircularProgress(\n  {\n    className,\n    svgStyle: propSvgStyle,\n    svgClassName,\n    circleStyle: propCircleStyle,\n    circleClassName,\n    value,\n    min = 0,\n    max = 100,\n    radius = 30,\n    center = 33,\n    viewBox = \"0 0 66 66\",\n    dashoffset = 187,\n    animate = true,\n    centered = true,\n    maxRotation = 360 * 1.75,\n    small = false,\n    ...props\n  },\n  ref\n) {\n  let progress: number | undefined;\n  if (typeof value === \"number\") {\n    progress = getPercentage({ min, max, value });\n  }\n\n  const svgStyle = useMemo<CSSProperties | undefined>(() => {\n    if (typeof progress !== \"number\") {\n      return propSvgStyle;\n    }\n\n    let transform = propSvgStyle && propSvgStyle.transform;\n    if (maxRotation > 0) {\n      const rotate = `rotate(${maxRotation * progress}deg)`;\n      transform = `${rotate}${transform ? ` ${transform}` : \"\"}`;\n    }\n\n    return {\n      ...propSvgStyle,\n      WebkitTransform: transform,\n      transform,\n    };\n  }, [progress, maxRotation, propSvgStyle]);\n\n  const circleStyle = useMemo(() => {\n    if (typeof progress !== \"number\") {\n      return propCircleStyle;\n    }\n\n    return {\n      ...propCircleStyle,\n      strokeDashoffset: dashoffset - dashoffset * progress,\n    };\n  }, [progress, propCircleStyle, dashoffset]);\n\n  const determinate = typeof progress === \"number\";\n  const indeterminate = !determinate;\n  return (\n    <span\n      {...props}\n      ref={ref}\n      role=\"progressbar\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuenow={value}\n      className={cn(block({ centered, small }), className)}\n    >\n      <svg\n        style={svgStyle}\n        className={cn(\n          block(\"svg\", {\n            animate: animate && determinate,\n            determinate,\n            indeterminate,\n          }),\n          svgClassName\n        )}\n        viewBox={viewBox}\n      >\n        <circle\n          style={circleStyle}\n          className={cn(\n            block(\"circle\", {\n              animate: animate && determinate,\n              determinate,\n              indeterminate,\n            }),\n            circleClassName\n          )}\n          r={radius}\n          cx={center}\n          cy={center}\n        />\n      </svg>\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}