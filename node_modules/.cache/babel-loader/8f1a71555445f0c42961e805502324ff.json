{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"../bem\";\nimport { useAppSize } from \"../sizing/useAppSize\";\nvar block = bem(\"rmd-grid\");\nexport var GridCell = forwardRef(function GridCell(_a, ref) {\n  var _b, _c, _d, _e, _f, _g, _h;\n\n  var style = _a.style,\n      className = _a.className,\n      clone = _a.clone,\n      children = _a.children,\n      propColSpan = _a.colSpan,\n      propColStart = _a.colStart,\n      propColEnd = _a.colEnd,\n      propRowSpan = _a.rowSpan,\n      propRowStart = _a.rowStart,\n      propRowEnd = _a.rowEnd,\n      phone = _a.phone,\n      tablet = _a.tablet,\n      desktop = _a.desktop,\n      largeDesktop = _a.largeDesktop,\n      props = __rest(_a, [\"style\", \"className\", \"clone\", \"children\", \"colSpan\", \"colStart\", \"colEnd\", \"rowSpan\", \"rowStart\", \"rowEnd\", \"phone\", \"tablet\", \"desktop\", \"largeDesktop\"]);\n\n  var _j = useAppSize(),\n      isPhone = _j.isPhone,\n      isTablet = _j.isTablet,\n      isDesktop = _j.isDesktop,\n      isLargeDesktop = _j.isLargeDesktop;\n\n  var colSpan = propColSpan;\n  var colStart = propColStart;\n  var colEnd = propColEnd;\n  var rowSpan = propRowSpan;\n  var rowStart = propRowStart;\n  var rowEnd = propRowEnd;\n  var media = isPhone && phone || isTablet && tablet || isLargeDesktop && largeDesktop || isDesktop && desktop;\n\n  if (media) {\n    _b = media.rowSpan, rowSpan = _b === void 0 ? propRowSpan : _b, _c = media.rowStart, rowStart = _c === void 0 ? propRowStart : _c, _d = media.rowEnd, rowEnd = _d === void 0 ? propRowEnd : _d, _e = media.colSpan, colSpan = _e === void 0 ? propColSpan : _e, _f = media.colStart, colStart = _f === void 0 ? propColStart : _f, _g = media.colEnd, colEnd = _g === void 0 ? propColEnd : _g;\n  }\n\n  var cellStyle = __assign({\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowSpan ? \"span \".concat(rowSpan) : rowEnd\n  }, style);\n\n  var cellClassName = cn(block(\"cell\", (_h = {}, _h[\"\".concat(colSpan)] = colSpan, _h)), className);\n\n  if (clone && isValidElement(children)) {\n    var child = Children.only(children);\n    return cloneElement(child, {\n      style: __assign(__assign({}, child.props.style), cellStyle),\n      className: cn(cellClassName, child.props.className)\n    });\n  }\n\n  return _jsx(\"div\", __assign({}, props, {\n    ref: ref,\n    style: cellStyle,\n    className: cellClassName\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":"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","names":["Children","cloneElement","forwardRef","isValidElement","cn","bem","useAppSize","block","GridCell","_a","ref","className","clone","children","propColSpan","propColStart","propColEnd","propRowSpan","propRowStart","propRowEnd","phone","tablet","desktop","largeDesktop","props","isPhone","isTablet","isDesktop","isLargeDesktop","colSpan","colStart","colEnd","rowSpan","rowStart","rowEnd","media","_b","_c","_d","_e","_f","_g","cellStyle","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","style","cellClassName","_h","child","only","_jsx"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\layout\\GridCell.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { Children, cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\n\nimport { bem } from \"../bem\";\nimport { useAppSize } from \"../sizing/useAppSize\";\n\nexport interface GridCSSProperties {\n  /**\n   * The number of rows that a cell should span. If this value is provided, it\n   * will be used instead of the `rowEnd` property. When this is `undefined`, it\n   * will span 1 row as normal.\n   */\n  rowSpan?: number;\n\n  /**\n   * The row that the cell should start at. This is a nice way to be able to\n   * reorder cells within your grid.\n   */\n  rowStart?: number | string;\n\n  /**\n   * The row that the cell should end at. This is a nice way to be able to\n   * reorder cells within your grid but will be ignored if the `rowSpan`\n   * property is provided.\n   */\n  rowEnd?: number | string;\n\n  /**\n   * The number of columns that the cell should span. If this value is provided,\n   * it will be used instead of the `colEnd` property.\n   *\n   * Note: If this value is larger than the number of columns allowed in the\n   * current grid, it will shrink all the other columns.\n   */\n  colSpan?: number;\n\n  /**\n   * The column that the cell should start at. When this is `undefined`, it will\n   * just appear in normal order within the grid.\n   */\n  colStart?: number | string;\n\n  /**\n   * The column that the cell should stop at. When this is `undefined`, it will\n   * just appear in normal order within the grid and span only 1 column. If the\n   * `colSpan` property was provided, this will be ignored.\n   */\n  colEnd?: number | string;\n}\n\nexport interface GridCellProps\n  extends HTMLAttributes<HTMLDivElement>,\n    GridCSSProperties {\n  /**\n   * Boolean if the className should be cloned into the child instead of\n   * wrapping in another div. This will only work if the `children` is a single\n   * ReactElement.\n   */\n  clone?: boolean;\n\n  /**\n   * The number of columns that the cell should span. If this value is provided,\n   * it will be used instead of the `colEnd` property.\n   *\n   * Note: If this value is larger than the number of columns allowed in the\n   * current grid, it will shrink all the other columns.\n   */\n  colSpan?: number;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on phones only.\n   */\n  phone?: GridCSSProperties;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on tablets and\n   * above.\n   */\n  tablet?: GridCSSProperties;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on desktop\n   * screens.\n   */\n  desktop?: GridCSSProperties;\n\n  /**\n   * Optional Grid CSS Property overries that should be applied on large\n   * desktops only.\n   */\n  largeDesktop?: GridCSSProperties;\n}\n\nconst block = bem(\"rmd-grid\");\n\nexport const GridCell = forwardRef<HTMLDivElement, GridCellProps>(\n  function GridCell(\n    {\n      style,\n      className,\n      clone,\n      children,\n      colSpan: propColSpan,\n      colStart: propColStart,\n      colEnd: propColEnd,\n      rowSpan: propRowSpan,\n      rowStart: propRowStart,\n      rowEnd: propRowEnd,\n      phone,\n      tablet,\n      desktop,\n      largeDesktop,\n      ...props\n    },\n    ref\n  ) {\n    const { isPhone, isTablet, isDesktop, isLargeDesktop } = useAppSize();\n\n    let colSpan = propColSpan;\n    let colStart = propColStart;\n    let colEnd = propColEnd;\n    let rowSpan = propRowSpan;\n    let rowStart = propRowStart;\n    let rowEnd = propRowEnd;\n    const media =\n      (isPhone && phone) ||\n      (isTablet && tablet) ||\n      (isLargeDesktop && largeDesktop) ||\n      (isDesktop && desktop);\n\n    if (media) {\n      ({\n        rowSpan = propRowSpan,\n        rowStart = propRowStart,\n        rowEnd = propRowEnd,\n        colSpan = propColSpan,\n        colStart = propColStart,\n        colEnd = propColEnd,\n      } = media);\n    }\n\n    const cellStyle = {\n      gridColumnStart: colStart,\n      gridColumnEnd: colEnd,\n      gridRowStart: rowStart,\n      gridRowEnd: rowSpan ? `span ${rowSpan}` : rowEnd,\n      ...style,\n    };\n    const cellClassName = cn(\n      block(\"cell\", {\n        [`${colSpan}`]: colSpan,\n      }),\n      className\n    );\n\n    if (clone && isValidElement(children)) {\n      const child = Children.only(children);\n      return cloneElement(child, {\n        style: { ...child.props.style, ...cellStyle },\n        className: cn(cellClassName, child.props.className),\n      });\n    }\n\n    return (\n      <div {...props} ref={ref} style={cellStyle} className={cellClassName}>\n        {children}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}