{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { List } from \"@react-md/list\";\nimport { useCollapseTransition } from \"@react-md/transition\";\n/**\n * The `TreeGroup` component is used to render a tree item's nested items\n * whenever the `expanded` prop is `true`. It uses the `Collapse` component\n * behind the scenes to animate in-and-out of view and will fully unrender when\n * the `expanded` prop is `false`.\n */\n\nexport var TreeGroup = forwardRef(function TreeGroup(_a, nodeRef) {\n  var style = _a.style,\n      className = _a.className,\n      collapsed = _a.collapsed,\n      minHeight = _a.minHeight,\n      minPaddingBottom = _a.minPaddingBottom,\n      minPaddingTop = _a.minPaddingTop,\n      timeout = _a.timeout,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited,\n      children = _a.children,\n      temporary = _a.temporary,\n      props = __rest(_a, [\"style\", \"className\", \"collapsed\", \"minHeight\", \"minPaddingBottom\", \"minPaddingTop\", \"timeout\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"children\", \"temporary\"]);\n\n  var _b = useCollapseTransition({\n    style: style,\n    className: cn(\"rmd-tree-group\", className),\n    nodeRef: nodeRef,\n    minHeight: minHeight,\n    minPaddingBottom: minPaddingBottom,\n    minPaddingTop: minPaddingTop,\n    timeout: timeout,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    temporary: temporary,\n    transitionIn: !collapsed\n  }),\n      elementProps = _b.elementProps,\n      rendered = _b.rendered;\n\n  if (!rendered) {\n    return null;\n  }\n\n  return _jsx(List, __assign({}, props, elementProps, {\n    role: \"group\"\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,IAAT,QAAqB,gBAArB;AAEA,SAASC,qBAAT,QAAsC,sBAAtC;AAMA;;;;;;;AAMA,OAAO,IAAMC,SAAS,GAAGJ,UAAU,CACjC,SAASI,SAAT,CACEC,EADF,EAmBEC,OAnBF,EAmBS;EAjBL,SAAK,WAAL;EAAA,IACAC,SAAS,eADT;EAAA,IAEAC,SAAS,eAFT;EAAA,IAGAC,SAAS,eAHT;EAAA,IAIAC,gBAAgB,sBAJhB;EAAA,IAKAC,aAAa,mBALb;EAAA,IAMAC,OAAO,aANP;EAAA,IAOAC,OAAO,aAPP;EAAA,IAQAC,UAAU,gBARV;EAAA,IASAC,SAAS,eATT;EAAA,IAUAC,MAAM,YAVN;EAAA,IAWAC,SAAS,eAXT;EAAA,IAYAC,QAAQ,cAZR;EAAA,IAaAC,QAAQ,cAbR;EAAA,IAcAC,SAAS,eAdT;EAAA,IAeGC,KAAK,cAhBV,kMAgBU,CAfR;;EAmBI,SAA6BlB,qBAAqB,CAAC;IACvDmB,KAAK,OADkD;IAEvDf,SAAS,EAAEN,EAAE,CAAC,gBAAD,EAAmBM,SAAnB,CAF0C;IAGvDD,OAAO,SAHgD;IAIvDG,SAAS,WAJ8C;IAKvDC,gBAAgB,kBALuC;IAMvDC,aAAa,eAN0C;IAOvDC,OAAO,SAPgD;IAQvDC,OAAO,SARgD;IASvDC,UAAU,YAT6C;IAUvDC,SAAS,WAV8C;IAWvDC,MAAM,QAXiD;IAYvDC,SAAS,WAZ8C;IAavDC,QAAQ,UAb+C;IAcvDE,SAAS,WAd8C;IAevDG,YAAY,EAAE,CAACf;EAfwC,CAAD,CAAlD;EAAA,IAAEgB,YAAY,kBAAd;EAAA,IAAgBC,QAAQ,cAAxB;;EAkBN,IAAI,CAACA,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,OACEC,KAACxB,IAAD,EAAKyB,aAAKN,KAAL,EAAgBG,YAAhB,EAA4B;IAAEI,IAAI,EAAC;EAAP,CAA5B,EAA0C;IAAAT,UAC5CA;EAD4C,CAA1C,CAAL,CADF;AAKD,CAjDgC,CAA5B","names":["forwardRef","cn","List","useCollapseTransition","TreeGroup","_a","nodeRef","className","collapsed","minHeight","minPaddingBottom","minPaddingTop","timeout","onEnter","onEntering","onEntered","onExit","onExiting","onExited","children","temporary","props","style","transitionIn","elementProps","rendered","_jsx","__assign","role"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tree\\src\\TreeGroup.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ListElement, ListProps } from \"@react-md/list\";\nimport { List } from \"@react-md/list\";\nimport type { CollapseProps } from \"@react-md/transition\";\nimport { useCollapseTransition } from \"@react-md/transition\";\n\nexport interface TreeGroupProps\n  extends ListProps,\n    Omit<CollapseProps<ListElement>, \"children\"> {}\n\n/**\n * The `TreeGroup` component is used to render a tree item's nested items\n * whenever the `expanded` prop is `true`. It uses the `Collapse` component\n * behind the scenes to animate in-and-out of view and will fully unrender when\n * the `expanded` prop is `false`.\n */\nexport const TreeGroup = forwardRef<ListElement, TreeGroupProps>(\n  function TreeGroup(\n    {\n      style,\n      className,\n      collapsed,\n      minHeight,\n      minPaddingBottom,\n      minPaddingTop,\n      timeout,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      children,\n      temporary,\n      ...props\n    },\n    nodeRef\n  ) {\n    const { elementProps, rendered } = useCollapseTransition({\n      style,\n      className: cn(\"rmd-tree-group\", className),\n      nodeRef,\n      minHeight,\n      minPaddingBottom,\n      minPaddingTop,\n      timeout,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      temporary,\n      transitionIn: !collapsed,\n    });\n\n    if (!rendered) {\n      return null;\n    }\n\n    return (\n      <List {...props} {...elementProps} role=\"group\">\n        {children}\n      </List>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}