{"ast":null,"code":"/**\n * Typeguard that will check if the provided checkable thing is a\n * MutableRefObject or just an HTMLElement.\n *\n * @internal\n */\nvar isMutableRefObject = function (thing) {\n  return !!thing && typeof thing.current !== \"undefined\";\n};\n/**\n * Gets the HTMLElement or null from the checkable thing.\n *\n * @internal\n */\n\n\nvar getElement = function (thing) {\n  if (isMutableRefObject(thing)) {\n    return thing.current;\n  }\n\n  return thing;\n};\n/**\n * Checks if a container element contains another element as a child while\n * allowing for nulls or a MutableRefObject of HTMLElement or null. Mostly just\n * a convenience function that should be used internally.\n *\n * @param container - The element to use as a container element. This can be an\n * HTMLElement, null, or a MutableRefObject of HTMLElement or null.\n * @param child - The element that might be a child of the container\n * element. This can be an HTMLElement, null, or a MutableRefObject of\n * HTMLElement or null.\n * @returns True if the container contains the child element and both the\n * container and child are valid HTMLElements (not null).\n * @internal\n */\n\n\nexport function containsElement(container, child) {\n  container = getElement(container);\n  child = getElement(child);\n  return !!(container && child && container.contains(child));\n}","map":{"version":3,"mappings":"AAKA;;;;;;AAMA,IAAMA,kBAAkB,GAAG,UACzBC,KADyB,EACJ;EAErB,QAAC,CAACA,KAAF,IACA,OAAQA,KAA4C,CAACC,OAArD,KAAiE,WADjE;AAC4E,CAJ9E;AAMA;;;;;;;AAKA,IAAMC,UAAU,GAAG,UAACF,KAAD,EAAsB;EACvC,IAAID,kBAAkB,CAACC,KAAD,CAAtB,EAA+B;IAC7B,OAAOA,KAAK,CAACC,OAAb;EACD;;EAED,OAAOD,KAAP;AACD,CAND;AAQA;;;;;;;;;;;;;;;;AAcA,OAAM,SAAUG,eAAV,CACJC,SADI,EAEJC,KAFI,EAEiB;EAErBD,SAAS,GAAGF,UAAU,CAACE,SAAD,CAAtB;EACAC,KAAK,GAAGH,UAAU,CAACG,KAAD,CAAlB;EACA,OAAO,CAAC,EAAED,SAAS,IAAIC,KAAb,IAAsBD,SAAS,CAACE,QAAV,CAAmBD,KAAnB,CAAxB,CAAR;AACD","names":["isMutableRefObject","thing","current","getElement","containsElement","container","child","contains"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\containsElement.ts"],"sourcesContent":["import type { MutableRefObject } from \"react\";\n\ntype CheckableElement = HTMLElement | null;\ntype CheckableThing = CheckableElement | MutableRefObject<CheckableElement>;\n\n/**\n * Typeguard that will check if the provided checkable thing is a\n * MutableRefObject or just an HTMLElement.\n *\n * @internal\n */\nconst isMutableRefObject = (\n  thing: CheckableThing\n): thing is MutableRefObject<CheckableElement> =>\n  !!thing &&\n  typeof (thing as MutableRefObject<CheckableElement>).current !== \"undefined\";\n\n/**\n * Gets the HTMLElement or null from the checkable thing.\n *\n * @internal\n */\nconst getElement = (thing: CheckableThing): CheckableElement => {\n  if (isMutableRefObject(thing)) {\n    return thing.current;\n  }\n\n  return thing;\n};\n\n/**\n * Checks if a container element contains another element as a child while\n * allowing for nulls or a MutableRefObject of HTMLElement or null. Mostly just\n * a convenience function that should be used internally.\n *\n * @param container - The element to use as a container element. This can be an\n * HTMLElement, null, or a MutableRefObject of HTMLElement or null.\n * @param child - The element that might be a child of the container\n * element. This can be an HTMLElement, null, or a MutableRefObject of\n * HTMLElement or null.\n * @returns True if the container contains the child element and both the\n * container and child are valid HTMLElements (not null).\n * @internal\n */\nexport function containsElement(\n  container: CheckableThing,\n  child: CheckableThing\n): boolean {\n  container = getElement(container);\n  child = getElement(child);\n  return !!(container && child && container.contains(child));\n}\n"]},"metadata":{},"sourceType":"module"}