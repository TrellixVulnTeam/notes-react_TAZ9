{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { Typography } from \"./Typography\";\nvar block = bem(\"rmd-sr-only\");\n/**\n * This component is used to create text that is only visible to screen readers.\n * If you enable the `focusable` prop, the text will become visible to all users\n * while focused.\n */\n\nexport var SrOnly = forwardRef(function SrOnly(_a, ref) {\n  var className = _a.className,\n      children = _a.children,\n      _b = _a.focusable,\n      focusable = _b === void 0 ? false : _b,\n      propTabIndex = _a.tabIndex,\n      _c = _a.component,\n      component = _c === void 0 ? \"span\" : _c,\n      props = __rest(_a, [\"className\", \"children\", \"focusable\", \"tabIndex\", \"component\"]);\n\n  var tabIndex = propTabIndex;\n\n  if (focusable && typeof tabIndex === \"undefined\") {\n    tabIndex = 0;\n  }\n\n  return _jsx(Typography, __assign({}, props, {\n    ref: ref,\n    tabIndex: tabIndex,\n    component: component,\n    className: cn(block({\n      focusable: focusable\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAGA,SAASC,UAAT,QAA2B,cAA3B;AAWA,IAAMC,KAAK,GAAGF,GAAG,CAAC,aAAD,CAAjB;AAEA;;;;;;AAKA,OAAO,IAAMG,MAAM,GAAGL,UAAU,CAC9B,SAASK,MAAT,CACEC,EADF,EASEC,GATF,EASK;EAPD,aAAS,eAAT;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,iBAFA;EAAA,IAEAC,SAAS,mBAAG,KAAH,GAAQD,EAFjB;EAAA,IAGUE,YAAY,cAHtB;EAAA,IAIAC,iBAJA;EAAA,IAIAC,SAAS,mBAAG,MAAH,GAASD,EAJlB;EAAA,IAKGE,KAAK,cANV,+DAMU,CALR;;EASF,IAAIC,QAAQ,GAAGJ,YAAf;;EACA,IAAID,SAAS,IAAI,OAAOK,QAAP,KAAoB,WAArC,EAAkD;IAChDA,QAAQ,GAAG,CAAX;EACD;;EAED,OACEC,KAACb,UAAD,EAAWc,aACLH,KADK,EACA;IACTP,GAAG,EAAEA,GADI;IAETQ,QAAQ,EAAEA,QAFD;IAGTF,SAAS,EAAEA,SAHF;IAITK,SAAS,EAAEjB,EAAE,CAACG,KAAK,CAAC;MAAEM,SAAS;IAAX,CAAD,CAAN,EAAuBQ,SAAvB;EAJJ,CADA,EAKqC;IAAAV,UAE7CA;EAF6C,CALrC,CAAX,CADF;AAWD,CA5B6B,CAAzB","names":["forwardRef","cn","bem","Typography","block","SrOnly","_a","ref","children","_b","focusable","propTabIndex","_c","component","props","tabIndex","_jsx","__assign","className"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\typography\\src\\SrOnly.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TypographyHTMLElement, TypographyProps } from \"./Typography\";\nimport { Typography } from \"./Typography\";\n\nexport interface SrOnlyProps extends TypographyProps {\n  /**\n   * Boolean if the text should become visible when focused. If this prop is\n   * enabled and the `tabIndex` prop is `undefined`, the `tabIndex` will be\n   * updated to be `0`.\n   */\n  focusable?: boolean;\n}\n\nconst block = bem(\"rmd-sr-only\");\n\n/**\n * This component is used to create text that is only visible to screen readers.\n * If you enable the `focusable` prop, the text will become visible to all users\n * while focused.\n */\nexport const SrOnly = forwardRef<TypographyHTMLElement, SrOnlyProps>(\n  function SrOnly(\n    {\n      className,\n      children,\n      focusable = false,\n      tabIndex: propTabIndex,\n      component = \"span\",\n      ...props\n    },\n    ref\n  ) {\n    let tabIndex = propTabIndex;\n    if (focusable && typeof tabIndex === \"undefined\") {\n      tabIndex = 0;\n    }\n\n    return (\n      <Typography\n        {...props}\n        ref={ref}\n        tabIndex={tabIndex}\n        component={component}\n        className={cn(block({ focusable }), className)}\n      >\n        {children}\n      </Typography>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}