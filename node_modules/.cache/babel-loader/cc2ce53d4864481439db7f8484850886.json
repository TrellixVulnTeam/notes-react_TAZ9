{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useRefCache } from \"../useRefCache\";\nimport { delegateEvent } from \"./utils\";\n/**\n *\n * @remarks \\@since 5.0.0 Moved the `AddEventListenerOptions` to no longer be\n * part of an `options` object.\n */\n\nexport function useScrollListener(_a) {\n  var once = _a.once,\n      _b = _a.passive,\n      passive = _b === void 0 ? true : _b,\n      signal = _a.signal,\n      capture = _a.capture,\n      _c = _a.enabled,\n      enabled = _c === void 0 ? true : _c,\n      onScroll = _a.onScroll;\n  var scrollHandlerRef = useRefCache(onScroll);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n\n    var eventHandler = delegateEvent(\"scroll\", window, true, {\n      once: once,\n      passive: passive,\n      signal: signal,\n      capture: capture\n    });\n    var scrollHandler = scrollHandlerRef.current;\n    eventHandler.add(scrollHandler);\n    return function () {\n      eventHandler.remove(scrollHandler);\n    };\n  }, [capture, enabled, once, passive, scrollHandlerRef, signal]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,aAAT,QAA8B,SAA9B;AAgBA;;;;;;AAKA,OAAM,SAAUC,iBAAV,CAA4BC,EAA5B,EAOsB;MAN1BC,IAAI;MACJC;MAAAC,OAAO,mBAAG,IAAH,GAAOD;MACdE,MAAM;MACNC,OAAO;MACPC;MAAAC,OAAO,mBAAG,IAAH,GAAOD;MACdE,QAAQ;EAER,IAAMC,gBAAgB,GAAGZ,WAAW,CAACW,QAAD,CAApC;EACAZ,SAAS,CAAC;IACR,IAAI,CAACW,OAAL,EAAc;MACZ;IACD;;IAED,IAAMG,YAAY,GAAGZ,aAAa,CAAC,QAAD,EAAWa,MAAX,EAAmB,IAAnB,EAAyB;MACzDV,IAAI,MADqD;MAEzDE,OAAO,SAFkD;MAGzDC,MAAM,QAHmD;MAIzDC,OAAO;IAJkD,CAAzB,CAAlC;IAMA,IAAMO,aAAa,GAAGH,gBAAgB,CAACI,OAAvC;IACAH,YAAY,CAACI,GAAb,CAAiBF,aAAjB;IAEA,OAAO;MACLF,YAAY,CAACK,MAAb,CAAoBH,aAApB;IACD,CAFD;EAGD,CAjBQ,EAiBN,CAACP,OAAD,EAAUE,OAAV,EAAmBN,IAAnB,EAAyBE,OAAzB,EAAkCM,gBAAlC,EAAoDL,MAApD,CAjBM,CAAT;AAkBD","names":["useEffect","useRefCache","delegateEvent","useScrollListener","_a","once","_b","passive","signal","capture","_c","enabled","onScroll","scrollHandlerRef","eventHandler","window","scrollHandler","current","add","remove"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\events\\useScrollListener.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { useRefCache } from \"../useRefCache\";\nimport { delegateEvent } from \"./utils\";\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface ScrollListenerHookOptions extends AddEventListenerOptions {\n  /**\n   * The event handler that will be fired when the page scrolls or if any child\n   * element scrolls when the {@link capture} option is `true`.\n   */\n  onScroll: EventListener;\n\n  /** @defaultValue `true` */\n  enabled?: boolean;\n}\n\n/**\n *\n * @remarks \\@since 5.0.0 Moved the `AddEventListenerOptions` to no longer be\n * part of an `options` object.\n */\nexport function useScrollListener({\n  once,\n  passive = true,\n  signal,\n  capture,\n  enabled = true,\n  onScroll,\n}: ScrollListenerHookOptions): void {\n  const scrollHandlerRef = useRefCache(onScroll);\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const eventHandler = delegateEvent(\"scroll\", window, true, {\n      once,\n      passive,\n      signal,\n      capture,\n    });\n    const scrollHandler = scrollHandlerRef.current;\n    eventHandler.add(scrollHandler);\n\n    return () => {\n      eventHandler.remove(scrollHandler);\n    };\n  }, [capture, enabled, once, passive, scrollHandlerRef, signal]);\n}\n"]},"metadata":{},"sourceType":"module"}