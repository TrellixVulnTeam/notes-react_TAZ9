{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useRef } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This hook is used to create all the event handlers required for\n * creating ripples on an element. Each handler will be memoized and\n * merged with any provided event handlers of the same type. If the\n * ripple effect is disabled, the provided event handlers will be\n * returned instead.\n */\n\nexport function useRippleHandlers(_a) {\n  var create = _a.create,\n      release = _a.release,\n      cancel = _a.cancel,\n      _b = _a.handlers,\n      handlers = _b === void 0 ? {} : _b,\n      _c = _a.disabled,\n      propDisabled = _c === void 0 ? false : _c,\n      _d = _a.disableRipple,\n      disableRipple = _d === void 0 ? false : _d,\n      _e = _a.disableProgrammaticRipple,\n      disableProgrammaticRipple = _e === void 0 ? false : _e;\n  var disabled = propDisabled || disableRipple;\n  var ref = useRefCache(__assign(__assign({}, handlers), {\n    disableProgrammaticRipple: disableProgrammaticRipple\n  })); // some OS/browser don't actually focus buttons/elements that are focusable after a click\n  // event which causes a double ripple effect. This ref is used to disable the programmatic\n  // ripple in these cases.\n\n  var disableProgrammatic = useRef(false);\n  var onKeyDown = useCallback(function (event) {\n    var callback = ref.current.onKeyDown;\n\n    if (callback) {\n      callback(event);\n    }\n\n    create(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onKeyUp = useCallback(function (event) {\n    var callback = ref.current.onKeyUp;\n\n    if (callback) {\n      callback(event);\n    }\n\n    release(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onMouseDown = useCallback(function (event) {\n    var callback = ref.current.onMouseDown;\n\n    if (callback) {\n      callback(event);\n    }\n\n    create(event);\n    disableProgrammatic.current = true;\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onMouseUp = useCallback(function (event) {\n    var callback = ref.current.onMouseUp;\n\n    if (callback) {\n      callback(event);\n    }\n\n    release(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onMouseLeave = useCallback(function (event) {\n    var callback = ref.current.onMouseLeave;\n\n    if (callback) {\n      callback(event);\n    }\n\n    cancel(true);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cancel]);\n  var onTouchStart = useCallback(function (event) {\n    var callback = ref.current.onTouchStart;\n\n    if (callback) {\n      callback(event);\n    }\n\n    create(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onTouchMove = useCallback(function (event) {\n    var callback = ref.current.onTouchMove;\n\n    if (callback) {\n      callback(event);\n    }\n\n    cancel(false);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cancel]);\n  var onTouchEnd = useCallback(function (event) {\n    var callback = ref.current.onTouchEnd;\n\n    if (callback) {\n      callback(event);\n    }\n\n    release(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onClick = useCallback(function (event) {\n    var _a = ref.current,\n        callback = _a.onClick,\n        disableProgrammaticRipple = _a.disableProgrammaticRipple;\n\n    if (callback) {\n      callback(event);\n    } // when a click event is triggered and the current active element is not\n    // the event target, we know it was a true programmatic event and should\n    // trigger a ripple for it.\n\n\n    if (disableProgrammaticRipple || document.activeElement === event.currentTarget || disableProgrammatic.current) {\n      disableProgrammatic.current = false;\n      return;\n    }\n\n    create(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  return {\n    onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,\n    onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,\n    onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,\n    onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,\n    onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,\n    onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,\n    onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,\n    onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,\n    onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useRef","useRefCache","useRippleHandlers","_a","create","release","cancel","_b","handlers","_c","propDisabled","_d","disableRipple","_e","disableProgrammaticRipple","disabled","ref","disableProgrammatic","onKeyDown","event","callback","current","onKeyUp","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","onClick","document","activeElement","currentTarget"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\states\\src\\ripples\\useRippleHandlers.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n\nimport type { MergableRippleHandlers, RippleEvent } from \"./types\";\n\ninterface Options<E extends HTMLElement> {\n  create: (event: RippleEvent<E>) => void;\n  release: (event: RippleEvent<E>) => void;\n  cancel: (ease: boolean) => void;\n  handlers?: MergableRippleHandlers<E>;\n  disabled?: boolean;\n  disableRipple?: boolean;\n  disableProgrammaticRipple?: boolean;\n}\n\n/**\n * This hook is used to create all the event handlers required for\n * creating ripples on an element. Each handler will be memoized and\n * merged with any provided event handlers of the same type. If the\n * ripple effect is disabled, the provided event handlers will be\n * returned instead.\n */\nexport function useRippleHandlers<E extends HTMLElement>({\n  create,\n  release,\n  cancel,\n  handlers = {},\n  disabled: propDisabled = false,\n  disableRipple = false,\n  disableProgrammaticRipple = false,\n}: Options<E>): MergableRippleHandlers<E> {\n  const disabled = propDisabled || disableRipple;\n  const ref = useRefCache({ ...handlers, disableProgrammaticRipple });\n\n  // some OS/browser don't actually focus buttons/elements that are focusable after a click\n  // event which causes a double ripple effect. This ref is used to disable the programmatic\n  // ripple in these cases.\n  const disableProgrammatic = useRef(false);\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent<E>) => {\n      const { onKeyDown: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      create(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent<E>) => {\n      const { onKeyUp: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      release(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]\n  );\n\n  const onMouseDown = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onMouseDown: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      create(event);\n      disableProgrammatic.current = true;\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n  const onMouseUp = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onMouseUp: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      release(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]\n  );\n  const onMouseLeave = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onMouseLeave: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      cancel(true);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cancel]\n  );\n\n  const onTouchStart = useCallback(\n    (event: React.TouchEvent<E>) => {\n      const { onTouchStart: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      create(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n  const onTouchMove = useCallback(\n    (event: React.TouchEvent<E>) => {\n      const { onTouchMove: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      cancel(false);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cancel]\n  );\n  const onTouchEnd = useCallback(\n    (event: React.TouchEvent<E>) => {\n      const { onTouchEnd: callback } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      release(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]\n  );\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<E>) => {\n      const { onClick: callback, disableProgrammaticRipple } = ref.current;\n      if (callback) {\n        callback(event);\n      }\n\n      // when a click event is triggered and the current active element is not\n      // the event target, we know it was a true programmatic event and should\n      // trigger a ripple for it.\n      if (\n        disableProgrammaticRipple ||\n        document.activeElement === event.currentTarget ||\n        disableProgrammatic.current\n      ) {\n        disableProgrammatic.current = false;\n        return;\n      }\n\n      create(event);\n    },\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]\n  );\n\n  return {\n    onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,\n    onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,\n    onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,\n    onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,\n    onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,\n    onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,\n    onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,\n    onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,\n    onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}