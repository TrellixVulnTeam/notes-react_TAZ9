{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { isEmpty } from \"./isEmpty\";\nvar block = bem(\"rmd-badge\");\n/**\n * This component is generally used for displaying notifications with a count\n * relative to another element with the `BadgeContainer` component. However, it\n * can be used by itself to display any supplementary content if needed.\n */\n\nexport var Badge = forwardRef(function Badge(_a, ref) {\n  var _b;\n\n  var className = _a.className,\n      _c = _a.theme,\n      theme = _c === void 0 ? \"default\" : _c,\n      _d = _a.children,\n      children = _d === void 0 ? null : _d,\n      _e = _a.disableNullOnZero,\n      disableNullOnZero = _e === void 0 ? false : _e,\n      props = __rest(_a, [\"className\", \"theme\", \"children\", \"disableNullOnZero\"]);\n\n  if (isEmpty(children, disableNullOnZero)) {\n    return null;\n  }\n\n  return _jsx(\"span\", __assign({}, props, {\n    ref: ref,\n    className: cn(block((_b = {}, _b[theme] = theme !== \"clear\", _b)), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,SAASC,OAAT,QAAwB,WAAxB;AA8BA,IAAMC,KAAK,GAAGF,GAAG,CAAC,WAAD,CAAjB;AAEA;;;;;;AAKA,OAAO,IAAMG,KAAK,GAAGL,UAAU,CAA8B,SAASK,KAAT,CAC3DC,EAD2D,EAQ3DC,GAR2D,EAQxD;;;EAND,aAAS,eAAT;EAAA,IACAC,aADA;EAAA,IACAC,KAAK,mBAAG,SAAH,GAAYD,EADjB;EAAA,IAEAE,gBAFA;EAAA,IAEAC,QAAQ,mBAAG,IAAH,GAAOD,EAFf;EAAA,IAGAE,yBAHA;EAAA,IAGAC,iBAAiB,mBAAG,KAAH,GAAQD,EAHzB;EAAA,IAIGE,KAAK,cALV,uDAKU,CAJR;;EAQF,IAAIX,OAAO,CAACQ,QAAD,EAAWE,iBAAX,CAAX,EAA0C;IACxC,OAAO,IAAP;EACD;;EAED,OACEE,0BACMD,KADN,EACW;IACTP,GAAG,EAAEA,GADI;IAETS,SAAS,EAAEf,EAAE,CAACG,KAAK,WAAGa,GAACR,KAAD,IAASA,KAAK,KAAK,OAAtB,EAA6BQ,EAA7B,EAAN,EAAwCD,SAAxC;EAFJ,CADX,EAGiE;IAAAL,UAE9DA;EAF8D,CAHjE,EADF;AASD,CAvB8B,CAAxB","names":["forwardRef","cn","bem","isEmpty","block","Badge","_a","ref","_c","theme","_d","children","_e","disableNullOnZero","props","_jsx","className","_b"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\badge\\src\\Badge.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport { isEmpty } from \"./isEmpty\";\n\nexport type BadgeTheme = \"primary\" | \"secondary\" | \"default\" | \"clear\";\n\nexport interface BadgeProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * The id for the badge. This is required for a11y since the element that the\n   * badge is fixed to should include this id in the `aria-describedby` list.\n   */\n  id: string;\n\n  /**\n   * The theme to use for the badge.\n   */\n  theme?: BadgeTheme;\n\n  /**\n   * The children to display in the badge. If the children is `0` or `null`, the\n   * default behavior is to not render the badge.\n   */\n  children?: ReactNode;\n\n  /**\n   * Boolean if the badge should still display if the children is set to `0`, or\n   * `null`.  The default behavior is to render null for these cases since it\n   * isn't extremely helpful to display an \"empty\" badge.\n   */\n  disableNullOnZero?: boolean;\n}\n\nconst block = bem(\"rmd-badge\");\n\n/**\n * This component is generally used for displaying notifications with a count\n * relative to another element with the `BadgeContainer` component. However, it\n * can be used by itself to display any supplementary content if needed.\n */\nexport const Badge = forwardRef<HTMLSpanElement, BadgeProps>(function Badge(\n  {\n    className,\n    theme = \"default\",\n    children = null,\n    disableNullOnZero = false,\n    ...props\n  },\n  ref\n) {\n  if (isEmpty(children, disableNullOnZero)) {\n    return null;\n  }\n\n  return (\n    <span\n      {...props}\n      ref={ref}\n      className={cn(block({ [theme]: theme !== \"clear\" }), className)}\n    >\n      {children}\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}