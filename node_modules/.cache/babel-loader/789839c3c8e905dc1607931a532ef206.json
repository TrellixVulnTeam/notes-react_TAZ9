{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useOnUnmount } from \"../useOnUnmount\";\nimport { DEFAULT_HOVER_MODE_DEACTIVATION_TIME, DEFAULT_HOVER_MODE_VISIBLE_IN_TIME } from \"./constants\";\nimport { HoverModeContextProvider } from \"./useHoverModeContext\";\n/**\n * This component should normally be mounted near the root of your app to enable\n * hover mode for child components. However, it can also be used at other levels\n * if hover mode functionality should not carry over between two different parts\n * of the screen.\n *\n * @example\n * Separating Hover Mode\n * ```tsx\n * export default function Example(): ReactElement {\n *   return (\n *     <>\n *       <HoverModeProvider>\n *         <HeaderActions />\n *       </HoverModeProvider>\n *       <HoverModeProvider>\n *         <MainContent />\n *       </HoverModeProvider>\n *     </>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.8.0\n */\n\nexport function HoverModeProvider(_a) {\n  var children = _a.children,\n      _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      _c = _a.defaultVisibleInTime,\n      defaultVisibleInTime = _c === void 0 ? DEFAULT_HOVER_MODE_VISIBLE_IN_TIME : _c,\n      _d = _a.deactivateTime,\n      deactivateTime = _d === void 0 ? DEFAULT_HOVER_MODE_DEACTIVATION_TIME : _d;\n\n  var _e = __read(useState(defaultVisibleInTime), 2),\n      visibleInTime = _e[0],\n      setVisibleInTime = _e[1];\n\n  var timeoutRef = useRef();\n  var enableHoverMode = useCallback(function () {\n    if (disabled) {\n      return;\n    }\n\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(0);\n  }, [disabled]);\n  var disableHoverMode = useCallback(function () {\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(defaultVisibleInTime);\n  }, [defaultVisibleInTime]);\n  var startDisableTimer = useCallback(function () {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(function () {\n      setVisibleInTime(defaultVisibleInTime);\n    }, deactivateTime);\n  }, [defaultVisibleInTime, deactivateTime]);\n  useEffect(function () {\n    if (disabled) {\n      window.clearTimeout(timeoutRef.current);\n      setVisibleInTime(defaultVisibleInTime);\n    }\n  }, [disabled, defaultVisibleInTime]);\n  useOnUnmount(function () {\n    window.clearTimeout(timeoutRef.current);\n  });\n  var context = useMemo(function () {\n    return {\n      visibleInTime: visibleInTime,\n      enableHoverMode: enableHoverMode,\n      disableHoverMode: disableHoverMode,\n      startDisableTimer: startDisableTimer\n    };\n  }, [disableHoverMode, enableHoverMode, startDisableTimer, visibleInTime]);\n  return _jsx(HoverModeContextProvider, __assign({\n    value: context\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDC,QAAlD,QAAkE,OAAlE;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SACEC,oCADF,EAEEC,kCAFF,QAGO,aAHP;AAKA,SAASC,wBAAT,QAAyC,uBAAzC;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUC,iBAAV,CAA4BC,EAA5B,EAKmB;MAJvBC,QAAQ;MACRC;MAAAC,QAAQ,mBAAG,KAAH,GAAQD;MAChBE;MAAAC,oBAAoB,mBAAGR,kCAAH,GAAqCO;MACzDE;MAAAC,cAAc,mBAAGX,oCAAH,GAAuCU;;EAE/C,gBAAoCZ,QAAQ,CAACW,oBAAD,CAA5C,EAAkE,CAAlE;EAAA,IAACG,aAAa,QAAd;EAAA,IAAgBC,gBAAgB,QAAhC;;EACN,IAAMC,UAAU,GAAGjB,MAAM,EAAzB;EACA,IAAMkB,eAAe,GAAGrB,WAAW,CAAC;IAClC,IAAIa,QAAJ,EAAc;MACZ;IACD;;IAEDS,MAAM,CAACC,YAAP,CAAoBH,UAAU,CAACI,OAA/B;IACAL,gBAAgB,CAAC,CAAD,CAAhB;EACD,CAPkC,EAOhC,CAACN,QAAD,CAPgC,CAAnC;EAQA,IAAMY,gBAAgB,GAAGzB,WAAW,CAAC;IACnCsB,MAAM,CAACC,YAAP,CAAoBH,UAAU,CAACI,OAA/B;IACAL,gBAAgB,CAACJ,oBAAD,CAAhB;EACD,CAHmC,EAGjC,CAACA,oBAAD,CAHiC,CAApC;EAKA,IAAMW,iBAAiB,GAAG1B,WAAW,CAAC;IACpCsB,MAAM,CAACC,YAAP,CAAoBH,UAAU,CAACI,OAA/B;IACAJ,UAAU,CAACI,OAAX,GAAqBF,MAAM,CAACK,UAAP,CAAkB;MACrCR,gBAAgB,CAACJ,oBAAD,CAAhB;IACD,CAFoB,EAElBE,cAFkB,CAArB;EAGD,CALoC,EAKlC,CAACF,oBAAD,EAAuBE,cAAvB,CALkC,CAArC;EAOAhB,SAAS,CAAC;IACR,IAAIY,QAAJ,EAAc;MACZS,MAAM,CAACC,YAAP,CAAoBH,UAAU,CAACI,OAA/B;MACAL,gBAAgB,CAACJ,oBAAD,CAAhB;IACD;EACF,CALQ,EAKN,CAACF,QAAD,EAAWE,oBAAX,CALM,CAAT;EAOAV,YAAY,CAAC;IACXiB,MAAM,CAACC,YAAP,CAAoBH,UAAU,CAACI,OAA/B;EACD,CAFW,CAAZ;EAIA,IAAMI,OAAO,GAAG1B,OAAO,CACrB;IAAM,OAAC;MACLgB,aAAa,eADR;MAELG,eAAe,iBAFV;MAGLI,gBAAgB,kBAHX;MAILC,iBAAiB;IAJZ,CAAD;EAKJ,CANmB,EAOrB,CAACD,gBAAD,EAAmBJ,eAAnB,EAAoCK,iBAApC,EAAuDR,aAAvD,CAPqB,CAAvB;EAUA,OACEW,KAACrB,wBAAD,EAAyBsB;IAACC,KAAK,EAAEH;EAAR,GAAe;IAAAjB,UACrCA;EADqC,CAAf,CAAzB,CADF;AAKD","names":["useCallback","useEffect","useMemo","useRef","useState","useOnUnmount","DEFAULT_HOVER_MODE_DEACTIVATION_TIME","DEFAULT_HOVER_MODE_VISIBLE_IN_TIME","HoverModeContextProvider","HoverModeProvider","_a","children","_b","disabled","_c","defaultVisibleInTime","_d","deactivateTime","visibleInTime","setVisibleInTime","timeoutRef","enableHoverMode","window","clearTimeout","current","disableHoverMode","startDisableTimer","setTimeout","context","_jsx","__assign","value"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\hover\\HoverModeProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { useOnUnmount } from \"../useOnUnmount\";\nimport {\n  DEFAULT_HOVER_MODE_DEACTIVATION_TIME,\n  DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n} from \"./constants\";\nimport type { HoverModeContext } from \"./useHoverModeContext\";\nimport { HoverModeContextProvider } from \"./useHoverModeContext\";\n\n/** @remarks \\@since 2.8.0 */\nexport interface HoverModeConfiguration {\n  /**\n   * Boolean if the hover mode functionality should be disabled.\n   *\n   * @defaultValue `false`\n   */\n  disabled?: boolean;\n\n  /**\n   * The amount of time (in ms) the user must hover an element before the hover\n   * mode is enabled and the visibility is set to `true`.\n   *\n   * @defaultValue {@link DEFAULT_HOVER_MODE_VISIBLE_IN_TIME}\n   */\n  defaultVisibleInTime?: number;\n\n  /**\n   * The amount of time (in ms) the user must not hover any element connected to\n   * the hover mode.\n   *\n   * @defaultValue {@link DEFAULT_HOVER_MODE_DEACTIVATION_TIME}\n   */\n  deactivateTime?: number;\n}\n\n/** @remarks \\@since 2.8.0 */\nexport interface HoverModeProviderProps extends HoverModeConfiguration {\n  children: ReactNode;\n}\n\n/**\n * This component should normally be mounted near the root of your app to enable\n * hover mode for child components. However, it can also be used at other levels\n * if hover mode functionality should not carry over between two different parts\n * of the screen.\n *\n * @example\n * Separating Hover Mode\n * ```tsx\n * export default function Example(): ReactElement {\n *   return (\n *     <>\n *       <HoverModeProvider>\n *         <HeaderActions />\n *       </HoverModeProvider>\n *       <HoverModeProvider>\n *         <MainContent />\n *       </HoverModeProvider>\n *     </>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.8.0\n */\nexport function HoverModeProvider({\n  children,\n  disabled = false,\n  defaultVisibleInTime = DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n  deactivateTime = DEFAULT_HOVER_MODE_DEACTIVATION_TIME,\n}: HoverModeProviderProps): ReactElement {\n  const [visibleInTime, setVisibleInTime] = useState(defaultVisibleInTime);\n  const timeoutRef = useRef<number>();\n  const enableHoverMode = useCallback(() => {\n    if (disabled) {\n      return;\n    }\n\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(0);\n  }, [disabled]);\n  const disableHoverMode = useCallback(() => {\n    window.clearTimeout(timeoutRef.current);\n    setVisibleInTime(defaultVisibleInTime);\n  }, [defaultVisibleInTime]);\n\n  const startDisableTimer = useCallback(() => {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      setVisibleInTime(defaultVisibleInTime);\n    }, deactivateTime);\n  }, [defaultVisibleInTime, deactivateTime]);\n\n  useEffect(() => {\n    if (disabled) {\n      window.clearTimeout(timeoutRef.current);\n      setVisibleInTime(defaultVisibleInTime);\n    }\n  }, [disabled, defaultVisibleInTime]);\n\n  useOnUnmount(() => {\n    window.clearTimeout(timeoutRef.current);\n  });\n\n  const context = useMemo<HoverModeContext>(\n    () => ({\n      visibleInTime,\n      enableHoverMode,\n      disableHoverMode,\n      startDisableTimer,\n    }),\n    [disableHoverMode, enableHoverMode, startDisableTimer, visibleInTime]\n  );\n\n  return (\n    <HoverModeContextProvider value={context}>\n      {children}\n    </HoverModeContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}