{"ast":null,"code":"/**\n * The default  behavior when pressing the `\"Enter\"` key on a form control\n * (`input`, `textarea`, `select`) is to submit the form that the form control\n * is in. This util will try to polyfill this behavior for custom widgets that\n * use are using a role to act as a form control.\n *\n * The way this works is:\n * - Check if the `event.key` is the `\"Enter\"` key. Do nothing if it is not.\n * - Call `event.preventDefault()` and `event.stopPropagation()` to prevent\n *   other unwanted keyboard behavior\n * - Check the event target to see if it is contained in a `<form>`\n * - Try to find a submit button and click it by:\n *   - First check with `form.querySelector('[type=\"submit\"]')`\n *   - Fallback to `document.querySelector('[type=\"submit\"][form=\"{{FORM_ID}}\"]')`\n *     - submit buttons can be placed outside of the form and link it back using\n *       the `form` attribute pointing to the id of the form\n *\n *\n * The reason the submit button has to be found and clicked is because calling\n * `form.submit()` won't actually fire any attached `form.onsubmit` event\n * handlers. If you click the submit button though, the `form.onsubmit` handlers\n * will be called correctly.\n *\n * @param event - The keyboard event that should attempt to submit the form when\n * the enter key is pressed.\n * @returns `true` if the `event.key` was the `\"Enter\"` key so that other\n * keydown logic can be ignored.\n * @remarks \\@since 2.7.0\n */\nexport function tryToSubmitRelatedForm(event) {\n  var _a, _b;\n\n  if (event.key !== \"Enter\") {\n    return false;\n  }\n\n  event.preventDefault();\n  event.stopPropagation();\n  /* istanbul ignore next */\n\n  var form = (_b = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.closest) === null || _b === void 0 ? void 0 : _b.call(_a, \"form\");\n  var submit = form === null || form === void 0 ? void 0 : form.querySelector('[type=\"submit\"]');\n\n  if (!submit && (form === null || form === void 0 ? void 0 : form.id)) {\n    submit = document.querySelector(\"[type=\\\"submit\\\"][form=\\\"\".concat(form.id, \"\\\"]\"));\n  }\n\n  submit === null || submit === void 0 ? void 0 : submit.click();\n  return true;\n}","map":{"version":3,"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUA,sBAAV,CACJC,KADI,EAC6B;;;EAEjC,IAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;IACzB,OAAO,KAAP;EACD;;EAEDD,KAAK,CAACE,cAAN;EACAF,KAAK,CAACG,eAAN;EAEA;;EACA,IAAMC,IAAI,GAAG,YAACJ,KAAK,CAACK,aAAP,MAAgC,IAAhC,IAAgCC,aAAhC,GAAgC,MAAhC,GAAgCA,GAAEC,OAAlC,MAAyC,IAAzC,IAAyCC,aAAzC,GAAyC,MAAzC,GAAyCA,YAAG,MAAH,CAAtD;EACA,IAAIC,MAAM,GAAGL,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEM,aAAN,CAAuC,iBAAvC,CAAb;;EACA,IAAI,CAACD,MAAD,KAAWL,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEO,EAAjB,CAAJ,EAAyB;IACvBF,MAAM,GAAGG,QAAQ,CAACF,aAAT,CACP,mCAAyBN,IAAI,CAACO,EAA9B,EAAgC,KAAhC,CADO,CAAT;EAGD;;EAEDF,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEI,KAAR;EACA,OAAO,IAAP;AACD","names":["tryToSubmitRelatedForm","event","key","preventDefault","stopPropagation","form","currentTarget","_a","closest","_b","submit","querySelector","id","document","click"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\wia-aria\\tryToSubmitRelatedForm.ts"],"sourcesContent":["/**\n * Don't really need the full `event` for this, and picking these parts makes it\n * so that both the React keydown listener and native keydown listener can use\n * this function if needed.\n */\ntype KeyboardSubmitEventPartial = Pick<\n  KeyboardEvent,\n  \"key\" | \"preventDefault\" | \"stopPropagation\" | \"currentTarget\"\n>;\n\n/**\n * The default  behavior when pressing the `\"Enter\"` key on a form control\n * (`input`, `textarea`, `select`) is to submit the form that the form control\n * is in. This util will try to polyfill this behavior for custom widgets that\n * use are using a role to act as a form control.\n *\n * The way this works is:\n * - Check if the `event.key` is the `\"Enter\"` key. Do nothing if it is not.\n * - Call `event.preventDefault()` and `event.stopPropagation()` to prevent\n *   other unwanted keyboard behavior\n * - Check the event target to see if it is contained in a `<form>`\n * - Try to find a submit button and click it by:\n *   - First check with `form.querySelector('[type=\"submit\"]')`\n *   - Fallback to `document.querySelector('[type=\"submit\"][form=\"{{FORM_ID}}\"]')`\n *     - submit buttons can be placed outside of the form and link it back using\n *       the `form` attribute pointing to the id of the form\n *\n *\n * The reason the submit button has to be found and clicked is because calling\n * `form.submit()` won't actually fire any attached `form.onsubmit` event\n * handlers. If you click the submit button though, the `form.onsubmit` handlers\n * will be called correctly.\n *\n * @param event - The keyboard event that should attempt to submit the form when\n * the enter key is pressed.\n * @returns `true` if the `event.key` was the `\"Enter\"` key so that other\n * keydown logic can be ignored.\n * @remarks \\@since 2.7.0\n */\nexport function tryToSubmitRelatedForm(\n  event: KeyboardSubmitEventPartial\n): boolean {\n  if (event.key !== \"Enter\") {\n    return false;\n  }\n\n  event.preventDefault();\n  event.stopPropagation();\n\n  /* istanbul ignore next */\n  const form = (event.currentTarget as Element)?.closest?.(\"form\");\n  let submit = form?.querySelector<HTMLButtonElement>('[type=\"submit\"]');\n  if (!submit && form?.id) {\n    submit = document.querySelector<HTMLButtonElement>(\n      `[type=\"submit\"][form=\"${form.id}\"]`\n    );\n  }\n\n  submit?.click();\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}