{"ast":null,"code":"import { useEffect } from \"react\";\n/**\n * This is used with the `useScrollLock` effect to determine if the styles were\n * applied by scroll locking or not in the cleanup stage.\n */\n\nexport var DATA_RMD_NOSCROLL = \"data-rmd-noscroll\";\n/**\n * This will enable scroll locking for the provided element. Scroll locking\n * works by fixing the element within the page and hiding overflow for that\n * element.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll for.\n * @internal\n * @remarks \\@since 5.0.0 Renamed from `enable` to `enableScrollLock`.\n */\n\nexport function enableScrollLock(element) {\n  element.style.overflow = \"hidden\";\n  element.setAttribute(DATA_RMD_NOSCROLL, \"\");\n}\n/**\n * Attempts to disable the scroll locking behavior for an element. If the\n * element does not have `data-rmd-noscroll`, it will not be modified. This is\n * really just a safety catch to ensure that pre-existing styles aren't removed\n * on accident.\n *\n * If the `data-rmd-noscroll` attribute exists, overflow style and the\n * `data-rmd-noscroll` attribute will be removed.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll locking for.\n * @internal\n * @remarks \\@since 5.0.0 Renamed from `disable` to `disableScrollLock`.\n */\n\nexport function disableScrollLock(element) {\n  if (element.getAttribute(DATA_RMD_NOSCROLL) === null) {\n    return;\n  }\n\n  element.style.overflow = \"\";\n  element.removeAttribute(DATA_RMD_NOSCROLL);\n}\n/**\n * A hook that is used to dynamically add scroll locking to an element. By\n * default, this will use the main `<body>` tag for scroll locking, but a query\n * selector string or an HTML element can also be used instead.\n *\n * @param enabled - Boolean if the scroll locking behavior should be enabled\n * @param selectorOrElement - Either a query selector string, HTMLElement, or a\n * function that returns an HTMLElement to apply scroll locking to.\n */\n\nexport function useScrollLock(enabled, selectorOrElement) {\n  useEffect(function () {\n    if (!enabled || typeof document === \"undefined\") {\n      return;\n    }\n\n    var element = null;\n\n    if (typeof selectorOrElement === \"string\") {\n      element = document.querySelector(selectorOrElement);\n    } else if (typeof selectorOrElement === \"function\") {\n      element = selectorOrElement();\n    } else if (selectorOrElement) {\n      element = selectorOrElement;\n    } else {\n      element = document.body;\n    }\n\n    if (!element || element.getAttribute(DATA_RMD_NOSCROLL) !== null) {\n      return;\n    }\n\n    enableScrollLock(element);\n    return function () {\n      disableScrollLock(element);\n    };\n  }, [enabled, selectorOrElement]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA;;;;;AAIA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP;;;;;;;;;;;AAUA,OAAM,SAAUC,gBAAV,CAA2BC,OAA3B,EAA+C;EACnDA,OAAO,CAACC,KAAR,CAAcC,QAAd,GAAyB,QAAzB;EACAF,OAAO,CAACG,YAAR,CAAqBL,iBAArB,EAAwC,EAAxC;AACD;AAED;;;;;;;;;;;;;;;AAcA,OAAM,SAAUM,iBAAV,CAA4BJ,OAA5B,EAAgD;EACpD,IAAIA,OAAO,CAACK,YAAR,CAAqBP,iBAArB,MAA4C,IAAhD,EAAsD;IACpD;EACD;;EAEDE,OAAO,CAACC,KAAR,CAAcC,QAAd,GAAyB,EAAzB;EACAF,OAAO,CAACM,eAAR,CAAwBR,iBAAxB;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUS,aAAV,CACJC,OADI,EAEJC,iBAFI,EAEiE;EAErEZ,SAAS,CAAC;IACR,IAAI,CAACW,OAAD,IAAY,OAAOE,QAAP,KAAoB,WAApC,EAAiD;MAC/C;IACD;;IAED,IAAIV,OAAO,GAAuB,IAAlC;;IACA,IAAI,OAAOS,iBAAP,KAA6B,QAAjC,EAA2C;MACzCT,OAAO,GAAGU,QAAQ,CAACC,aAAT,CAAoCF,iBAApC,CAAV;IACD,CAFD,MAEO,IAAI,OAAOA,iBAAP,KAA6B,UAAjC,EAA6C;MAClDT,OAAO,GAAGS,iBAAiB,EAA3B;IACD,CAFM,MAEA,IAAIA,iBAAJ,EAAuB;MAC5BT,OAAO,GAAGS,iBAAV;IACD,CAFM,MAEA;MACLT,OAAO,GAAGU,QAAQ,CAACE,IAAnB;IACD;;IAED,IAAI,CAACZ,OAAD,IAAYA,OAAO,CAACK,YAAR,CAAqBP,iBAArB,MAA4C,IAA5D,EAAkE;MAChE;IACD;;IAEDC,gBAAgB,CAACC,OAAD,CAAhB;IACA,OAAO;MACLI,iBAAiB,CAACJ,OAAD,CAAjB;IACD,CAFD;EAGD,CAxBQ,EAwBN,CAACQ,OAAD,EAAUC,iBAAV,CAxBM,CAAT;AAyBD","names":["useEffect","DATA_RMD_NOSCROLL","enableScrollLock","element","style","overflow","setAttribute","disableScrollLock","getAttribute","removeAttribute","useScrollLock","enabled","selectorOrElement","document","querySelector","body"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\wia-aria\\useScrollLock.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * This is used with the `useScrollLock` effect to determine if the styles were\n * applied by scroll locking or not in the cleanup stage.\n */\nexport const DATA_RMD_NOSCROLL = \"data-rmd-noscroll\";\n\n/**\n * This will enable scroll locking for the provided element. Scroll locking\n * works by fixing the element within the page and hiding overflow for that\n * element.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll for.\n * @internal\n * @remarks \\@since 5.0.0 Renamed from `enable` to `enableScrollLock`.\n */\nexport function enableScrollLock(element: HTMLElement): void {\n  element.style.overflow = \"hidden\";\n  element.setAttribute(DATA_RMD_NOSCROLL, \"\");\n}\n\n/**\n * Attempts to disable the scroll locking behavior for an element. If the\n * element does not have `data-rmd-noscroll`, it will not be modified. This is\n * really just a safety catch to ensure that pre-existing styles aren't removed\n * on accident.\n *\n * If the `data-rmd-noscroll` attribute exists, overflow style and the\n * `data-rmd-noscroll` attribute will be removed.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll locking for.\n * @internal\n * @remarks \\@since 5.0.0 Renamed from `disable` to `disableScrollLock`.\n */\nexport function disableScrollLock(element: HTMLElement): void {\n  if (element.getAttribute(DATA_RMD_NOSCROLL) === null) {\n    return;\n  }\n\n  element.style.overflow = \"\";\n  element.removeAttribute(DATA_RMD_NOSCROLL);\n}\n\n/**\n * A hook that is used to dynamically add scroll locking to an element. By\n * default, this will use the main `<body>` tag for scroll locking, but a query\n * selector string or an HTML element can also be used instead.\n *\n * @param enabled - Boolean if the scroll locking behavior should be enabled\n * @param selectorOrElement - Either a query selector string, HTMLElement, or a\n * function that returns an HTMLElement to apply scroll locking to.\n */\nexport function useScrollLock(\n  enabled: boolean,\n  selectorOrElement?: string | HTMLElement | (() => HTMLElement) | null\n): void {\n  useEffect(() => {\n    if (!enabled || typeof document === \"undefined\") {\n      return;\n    }\n\n    let element: HTMLElement | null = null;\n    if (typeof selectorOrElement === \"string\") {\n      element = document.querySelector<HTMLElement>(selectorOrElement);\n    } else if (typeof selectorOrElement === \"function\") {\n      element = selectorOrElement();\n    } else if (selectorOrElement) {\n      element = selectorOrElement;\n    } else {\n      element = document.body;\n    }\n\n    if (!element || element.getAttribute(DATA_RMD_NOSCROLL) !== null) {\n      return;\n    }\n\n    enableScrollLock(element);\n    return () => {\n      disableScrollLock(element as HTMLElement);\n    };\n  }, [enabled, selectorOrElement]);\n}\n"]},"metadata":{},"sourceType":"module"}