{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { useFixedPositioning } from \"@react-md/transition\";\nimport { ABOVE_CENTER_ANCHOR, BELOW_CENTER_ANCHOR, CENTER_LEFT_ANCHOR, CENTER_RIGHT_ANCHOR, unitToNumber, useHoverMode, useOnUnmount, useUserInteractionMode } from \"@react-md/utils\";\nimport { DEFAULT_TOOLTIP_DELAY, DEFAULT_TOOLTIP_DENSE_SPACING, DEFAULT_TOOLTIP_MARGIN, DEFAULT_TOOLTIP_POSITION, DEFAULT_TOOLTIP_SPACING, DEFAULT_TOOLTIP_THRESHOLD, TOOLTIP_SPACING_VAR } from \"./constants\";\nimport { useTooltipPosition } from \"./useTooltipPosition\";\n/** @internal */\n\nfunction getAnchor(position) {\n  switch (position) {\n    case \"above\":\n      return ABOVE_CENTER_ANCHOR;\n\n    case \"below\":\n      return BELOW_CENTER_ANCHOR;\n\n    case \"left\":\n      return CENTER_LEFT_ANCHOR;\n\n    case \"right\":\n      return CENTER_RIGHT_ANCHOR;\n\n    default:\n      throw new Error(\"Invalid position: \".concat(position));\n  }\n}\n/**\n * This hook is used to handle the positioning and visibility of the tooltip\n * component mostly within the {@link Tooltipped} component.\n *\n * @example\n * Simple Usage\n * ```tsx\n * import { Button } from \"@react-md/button\";\n * import { useTooltip, Tooltip } from \"@react-md/tooltip\";\n *\n * function Example() {\n *   const { tooltipProps, elementProps } = useTooltip({\n *     baseId: 'my-element',\n *   });\n *\n *   return (\n *     <>\n *       <Button {...elementProps}>Button</Button>\n *       <Tooltip {...tooltipProps}>\n *         Tooltip Content\n *       </Tooltip>\n *     </>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.8.0\n * @param options - All the {@link TooltipHookOptions} to configure the tooltip behavior.\n * @returns The {@link TooltipHookReturnValue}\n */\n\n\nexport function useTooltip(_a) {\n  var baseId = _a.baseId,\n      propStyle = _a.style,\n      describedBy = _a.describedBy,\n      _b = _a.dense,\n      dense = _b === void 0 ? false : _b,\n      _c = _a.spacing,\n      spacing = _c === void 0 ? DEFAULT_TOOLTIP_SPACING : _c,\n      _d = _a.denseSpacing,\n      denseSpacing = _d === void 0 ? DEFAULT_TOOLTIP_DENSE_SPACING : _d,\n      determinedPosition = _a.position,\n      _e = _a.defaultPosition,\n      defaultPosition = _e === void 0 ? DEFAULT_TOOLTIP_POSITION : _e,\n      _f = _a.vwMargin,\n      vwMargin = _f === void 0 ? DEFAULT_TOOLTIP_MARGIN : _f,\n      _g = _a.vhMargin,\n      vhMargin = _g === void 0 ? DEFAULT_TOOLTIP_MARGIN : _g,\n      _h = _a.threshold,\n      threshold = _h === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _h,\n      _j = _a.touchTime,\n      touchTime = _j === void 0 ? DEFAULT_TOOLTIP_DELAY : _j,\n      _k = _a.focusTime,\n      focusTime = _k === void 0 ? DEFAULT_TOOLTIP_DELAY : _k,\n      propOnFocus = _a.onFocus,\n      propOnBlur = _a.onBlur,\n      propOnKeyDown = _a.onKeyDown,\n      onClick = _a.onClick,\n      onMouseEnter = _a.onMouseEnter,\n      onMouseLeave = _a.onMouseLeave,\n      propOnTouchStart = _a.onTouchStart,\n      propOnContextMenu = _a.onContextMenu,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExited = _a.onExited,\n      _l = _a.disabled,\n      disabled = _l === void 0 ? false : _l,\n      _m = _a.disableSwapping,\n      disableSwapping = _m === void 0 ? false : _m,\n      propDisableHoverMode = _a.disableHoverMode,\n      _o = _a.disableAutoSpacing,\n      disableAutoSpacing = _o === void 0 ? process.env.NODE_ENV === \"test\" : _o;\n  var containerRef = useRef(null);\n\n  var _p = __read(useTooltipPosition({\n    position: determinedPosition,\n    defaultPosition: defaultPosition,\n    threshold: threshold\n  }), 2),\n      position = _p[0],\n      updatePosition = _p[1];\n\n  var mode = useUserInteractionMode();\n\n  var _q = __read(useState(null), 2),\n      initiatedBy = _q[0],\n      setInitiatedBy = _q[1];\n\n  var windowFocusEvent = useRef(false);\n  var timeout = useRef(undefined);\n\n  var _r = useHoverMode({\n    disabled: propDisableHoverMode || disabled,\n    exitVisibilityDelay: 0\n  }),\n      visible = _r.visible,\n      setVisible = _r.setVisible,\n      handlers = _r.handlers,\n      _hoverHandlers = _r.hoverHandlers,\n      disableHoverMode = _r.disableHoverMode,\n      clearHoverTimeout = _r.clearHoverTimeout,\n      others = __rest(_r, [\"visible\", \"setVisible\", \"handlers\", \"hoverHandlers\", \"disableHoverMode\", \"clearHoverTimeout\"]);\n\n  var hide = useCallback(function () {\n    window.clearTimeout(timeout.current);\n    setVisible(false);\n    setInitiatedBy(null);\n  }, [setVisible]);\n\n  var onBlur = function (event) {\n    propOnBlur === null || propOnBlur === void 0 ? void 0 : propOnBlur(event);\n\n    if (disabled || initiatedBy !== \"keyboard\") {\n      return;\n    }\n\n    hide();\n  };\n\n  var onFocus = function (event) {\n    propOnFocus === null || propOnFocus === void 0 ? void 0 : propOnFocus(event);\n\n    if (disabled) {\n      return;\n    } // if the element gained focus immediately after the browser window gains\n    // focus, do not start timer and ignore this event instead\n\n\n    if (windowFocusEvent.current) {\n      windowFocusEvent.current = false;\n      return;\n    }\n\n    if (mode !== \"keyboard\" || initiatedBy !== null) {\n      return;\n    }\n\n    setInitiatedBy(\"keyboard\");\n    window.clearTimeout(timeout.current);\n    containerRef.current = event.currentTarget;\n    updatePosition(event.currentTarget);\n    timeout.current = window.setTimeout(function () {\n      setVisible(true);\n    }, focusTime);\n  };\n\n  var onKeyDown = function (event) {\n    propOnKeyDown === null || propOnKeyDown === void 0 ? void 0 : propOnKeyDown(event);\n\n    if (disabled || initiatedBy !== \"keyboard\" || event.key !== \"Escape\") {\n      return;\n    }\n\n    hide();\n  };\n\n  var onTouchStart = function (event) {\n    propOnTouchStart === null || propOnTouchStart === void 0 ? void 0 : propOnTouchStart(event);\n\n    if (event.isPropagationStopped() || disabled || mode !== \"touch\") {\n      return;\n    }\n\n    setInitiatedBy(\"touch\");\n    window.clearTimeout(timeout.current);\n    timeout.current = window.setTimeout(function () {\n      setVisible(true);\n    }, touchTime);\n    containerRef.current = event.currentTarget;\n    updatePosition(event.currentTarget);\n  };\n\n  var onContextMenu = function (event) {\n    var _a;\n\n    propOnContextMenu === null || propOnContextMenu === void 0 ? void 0 : propOnContextMenu(event);\n\n    if (event.isPropagationStopped() || disabled || mode !== \"touch\") {\n      return;\n    } // Need to prevent the context menu from displaying and display the tooltip\n    // instead.\n\n\n    event.preventDefault();\n    var selection = window.getSelection();\n    var node = (_a = selection === null || selection === void 0 ? void 0 : selection.anchorNode) === null || _a === void 0 ? void 0 : _a.parentElement;\n    /* istanbul ignore next */\n\n    if (selection && node && event.currentTarget.contains(node)) {\n      selection.empty();\n    }\n\n    setVisible(true);\n  };\n\n  useEffect(function () {\n    if (disabled) {\n      return;\n    }\n\n    if (mode !== \"keyboard\") {\n      windowFocusEvent.current = false;\n      return;\n    }\n\n    var handler = function () {\n      if (document.hidden) {\n        hide();\n        windowFocusEvent.current = document.activeElement === containerRef.current;\n      }\n    };\n\n    window.addEventListener(\"visibilitychange\", handler);\n    return function () {\n      window.removeEventListener(\"visibilitychange\", handler);\n    };\n  }, [disabled, hide, mode]);\n  useEffect(function () {\n    if (initiatedBy !== \"touch\") {\n      return;\n    }\n\n    window.addEventListener(\"scroll\", hide, true);\n    window.addEventListener(\"touchend\", hide, true);\n    return function () {\n      window.removeEventListener(\"scroll\", hide, true);\n      window.removeEventListener(\"touchend\", hide, true);\n    };\n  }, [hide, initiatedBy, setVisible]);\n  useOnUnmount(function () {\n    window.clearTimeout(timeout.current);\n  });\n  var nodeRef = useRef(null);\n\n  var _s = useFixedPositioning({\n    style: propStyle,\n    nodeRef: nodeRef,\n    anchor: getAnchor(position),\n    disableSwapping: disableSwapping !== null && disableSwapping !== void 0 ? disableSwapping : !!determinedPosition,\n    fixedTo: containerRef,\n    getFixedPositionOptions: function () {\n      var tooltipSpacing = dense ? denseSpacing : spacing;\n      var node = nodeRef.current;\n      /* istanbul ignore next */\n\n      if (!disableAutoSpacing && node) {\n        tooltipSpacing = window.getComputedStyle(node).getPropertyValue(TOOLTIP_SPACING_VAR);\n      }\n\n      var currentSpacing = unitToNumber(tooltipSpacing);\n      return {\n        vwMargin: vwMargin,\n        vhMargin: vhMargin,\n        xMargin: currentSpacing,\n        yMargin: currentSpacing\n      };\n    },\n    onResize: hide,\n    onScroll: hide,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExited: onExited\n  }),\n      ref = _s.ref,\n      style = _s.style,\n      transitionOptions = _s.callbacks;\n\n  var tooltipHandlers = {\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onTouchStart: onTouchStart,\n    onContextMenu: onContextMenu,\n    onClick: function (event) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(event);\n\n      if (event.isPropagationStopped() || disabled) {\n        return;\n      }\n\n      setVisible(false);\n      setInitiatedBy(null);\n      window.clearTimeout(timeout.current);\n      clearHoverTimeout();\n    },\n    onMouseEnter: function (event) {\n      onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n\n      if (disabled) {\n        return;\n      }\n\n      if (initiatedBy !== null) {\n        event.stopPropagation();\n        return;\n      }\n\n      containerRef.current = event.currentTarget;\n      updatePosition(event.currentTarget);\n      setInitiatedBy(\"mouse\");\n      handlers.onMouseEnter(event);\n    },\n    onMouseLeave: function (event) {\n      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);\n\n      if (disabled) {\n        return;\n      }\n\n      if (initiatedBy !== \"mouse\") {\n        event.stopPropagation();\n        return;\n      }\n\n      setInitiatedBy(null);\n      handlers.onMouseLeave(event);\n    }\n  };\n  var tooltipId = \"\".concat(baseId, \"-tooltip\");\n\n  var elementProps = __assign({\n    id: baseId,\n    \"aria-describedby\": cn(visible && tooltipId, describedBy) || undefined\n  }, tooltipHandlers);\n\n  var tooltipProps = __assign({\n    id: tooltipId,\n    ref: ref,\n    dense: dense,\n    visible: visible,\n    position: position,\n    style: style\n  }, transitionOptions);\n\n  return __assign(__assign({}, others), {\n    visible: visible,\n    setVisible: setVisible,\n    handlers: tooltipHandlers,\n    elementProps: elementProps,\n    tooltipProps: tooltipProps,\n    disableHoverMode: disableHoverMode,\n    clearHoverTimeout: clearHoverTimeout\n  });\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useRef","useState","cn","useFixedPositioning","ABOVE_CENTER_ANCHOR","BELOW_CENTER_ANCHOR","CENTER_LEFT_ANCHOR","CENTER_RIGHT_ANCHOR","unitToNumber","useHoverMode","useOnUnmount","useUserInteractionMode","DEFAULT_TOOLTIP_DELAY","DEFAULT_TOOLTIP_DENSE_SPACING","DEFAULT_TOOLTIP_MARGIN","DEFAULT_TOOLTIP_POSITION","DEFAULT_TOOLTIP_SPACING","DEFAULT_TOOLTIP_THRESHOLD","TOOLTIP_SPACING_VAR","useTooltipPosition","getAnchor","position","Error","useTooltip","_a","baseId","propStyle","describedBy","_b","dense","_c","spacing","_d","denseSpacing","determinedPosition","_e","defaultPosition","_f","vwMargin","_g","vhMargin","_h","threshold","_j","touchTime","_k","focusTime","propOnFocus","propOnBlur","propOnKeyDown","onClick","onMouseEnter","onMouseLeave","propOnTouchStart","propOnContextMenu","onEnter","onEntering","onEntered","onExited","_l","disabled","_m","disableSwapping","propDisableHoverMode","_o","disableAutoSpacing","process","env","NODE_ENV","containerRef","updatePosition","mode","initiatedBy","setInitiatedBy","windowFocusEvent","timeout","undefined","_r","exitVisibilityDelay","visible","setVisible","handlers","_hoverHandlers","disableHoverMode","clearHoverTimeout","others","hide","window","clearTimeout","current","onBlur","event","onFocus","currentTarget","setTimeout","onKeyDown","key","onTouchStart","isPropagationStopped","onContextMenu","preventDefault","selection","getSelection","node","anchorNode","parentElement","contains","empty","handler","document","hidden","activeElement","addEventListener","removeEventListener","nodeRef","style","anchor","fixedTo","getFixedPositionOptions","tooltipSpacing","getComputedStyle","getPropertyValue","currentSpacing","xMargin","yMargin","onResize","onScroll","ref","transitionOptions","tooltipHandlers","stopPropagation","tooltipId","elementProps","id","tooltipProps"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tooltip\\src\\useTooltip.ts"],"sourcesContent":["import type {\n  CSSProperties,\n  FocusEvent,\n  HTMLAttributes,\n  KeyboardEvent,\n  MouseEvent,\n  Ref,\n  TouchEvent,\n} from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport type {\n  FixedPositioningTransitionCallbacks,\n  TransitionCallbacks,\n} from \"@react-md/transition\";\nimport { useFixedPositioning } from \"@react-md/transition\";\nimport type {\n  HoverModeEventHandlers,\n  HoverModeHookReturnValue,\n  PositionAnchor,\n  SimplePosition,\n  UserInteractionMode,\n} from \"@react-md/utils\";\nimport {\n  ABOVE_CENTER_ANCHOR,\n  BELOW_CENTER_ANCHOR,\n  CENTER_LEFT_ANCHOR,\n  CENTER_RIGHT_ANCHOR,\n  unitToNumber,\n  useHoverMode,\n  useOnUnmount,\n  useUserInteractionMode,\n} from \"@react-md/utils\";\n\nimport {\n  DEFAULT_TOOLTIP_DELAY,\n  DEFAULT_TOOLTIP_DENSE_SPACING,\n  DEFAULT_TOOLTIP_MARGIN,\n  DEFAULT_TOOLTIP_POSITION,\n  DEFAULT_TOOLTIP_SPACING,\n  DEFAULT_TOOLTIP_THRESHOLD,\n  TOOLTIP_SPACING_VAR,\n} from \"./constants\";\nimport type { TooltipProps } from \"./Tooltip\";\nimport type { TooltipPositionHookOptions } from \"./useTooltipPosition\";\nimport { useTooltipPosition } from \"./useTooltipPosition\";\n\n/** @internal */\nfunction getAnchor(position: SimplePosition): PositionAnchor {\n  switch (position) {\n    case \"above\":\n      return ABOVE_CENTER_ANCHOR;\n    case \"below\":\n      return BELOW_CENTER_ANCHOR;\n    case \"left\":\n      return CENTER_LEFT_ANCHOR;\n    case \"right\":\n      return CENTER_RIGHT_ANCHOR;\n    default:\n      throw new Error(`Invalid position: ${position}`);\n  }\n}\n\n/**\n * @internal\n * @remarks \\@since 2.8.0\n */\nexport type TooltipInitiatedBy = UserInteractionMode | null;\n\n/** @remarks \\@since 2.8.0 */\nexport type TooltipTouchEventHandlers<E extends HTMLElement> = Pick<\n  HTMLAttributes<E>,\n  \"onTouchStart\" | \"onContextMenu\"\n>;\n\n/** @remarks \\@since 2.8.0 */\nexport type TooltipKeyboardEventHandlers<E extends HTMLElement> = Pick<\n  HTMLAttributes<E>,\n  \"onBlur\" | \"onFocus\" | \"onKeyDown\"\n>;\n\n/**\n * These are all the event handlers that are required to control the visibility\n * of a tooltip-like element.\n *\n * @remarks \\@since 2.8.0\n */\nexport type TooltippedElementEventHandlers<E extends HTMLElement> =\n  TooltipTouchEventHandlers<E> &\n    TooltipKeyboardEventHandlers<E> &\n    Pick<HTMLAttributes<E>, keyof HoverModeEventHandlers>;\n\n/** @remarks \\@since 2.8.0 */\nexport interface TooltipHookProvidedElementProps<E extends HTMLElement>\n  extends Required<TooltippedElementEventHandlers<E>> {\n  /**\n   * The DOM `id` required for a11y that is based off of the\n   * {@link TooltipHookOptions.baseId}.\n   */\n  id: string;\n\n  /**\n   * An optional `aria-describedby` that will be provided only while the tooltip\n   * is visible or the {@link TooltipHookOptions.describedBy} is provided.\n   */\n  \"aria-describedby\"?: string;\n}\n\n/** @remarks \\@since 2.8.0 */\nexport interface TooltipPositioningOptions {\n  /**\n   * An optional style object to merge and override the generated fixed\n   * positioning styles.\n   */\n  style?: CSSProperties;\n\n  /**\n   * This is the viewport width margin to use in the positioning calculation.\n   * This is just used so that the tooltip can be placed with some spacing\n   * between the left and right edges of the viewport if desired.\n   */\n  vwMargin?: number;\n\n  /**\n   * This is the viewport height margin to use in the positioning calculation.\n   * This is just used so that the tooltip can be placed with some spacing\n   * between the top and bottom edges of the viewport if desired.\n   */\n  vhMargin?: number;\n\n  /**\n   * Boolean if the tooltip is using the dense spec. This will reduce the\n   * padding, margin and font size for the tooltip and is usually used for\n   * desktop displays.\n   */\n  dense?: boolean;\n\n  /**\n   * The amount of spacing to use for a non-dense tooltip. This is the distance\n   * between the container element and the tooltip.\n   */\n  spacing?: number | string;\n\n  /**\n   * The amount of spacing to use for a dense tooltip. This is the distance\n   * between the container element and the tooltip.\n   */\n  denseSpacing?: number | string;\n\n  /**\n   * Boolean if the auto-swapping behavior should be disabled. When this value\n   * is `undefined`, it'll be treated as `true` when the `position` prop is\n   * defined, otherwise `false`.\n   */\n  disableSwapping?: boolean;\n\n  /**\n   * Since `react-md` provides mixins to automatically apply a dense spec\n   * through mixins via media queries, the dense spec might be applied in css\n   * instead of in JS. This component will actually check the current spacing\n   * amount that has been applied when the tooltip becomes visible.\n   *\n   * If this behavior is not desired, you can enable this prop and it will only\n   * use the provided `spacing` or `denseSpacing` props based on the `dense`\n   * prop.\n   *\n   * Note: This will be defaulted to `true` when the\n   * `process.env.NODE_ENV === 'test'` since test environments normally don't\n   * have a default `window.getComputedStyle` value that is not `NaN`\n   * which will display errors in your tests.\n   */\n  disableAutoSpacing?: boolean;\n}\n\n/** @remarks \\@since 2.8.0 */\nexport interface BaseTooltipHookOptions<E extends HTMLElement>\n  extends TransitionCallbacks,\n    TooltipPositionHookOptions,\n    TooltipPositioningOptions,\n    TooltippedElementEventHandlers<E> {\n  /**\n   * The amount of time to wait (in ms) before showing the tooltip after\n   * triggering a `touchstart` event. You _probably_ won't ever need to change\n   * this value.\n   *\n   * The default time is about the same it takes to display the context menu\n   * with a \"long touch\" and cancel displaying the context menu.\n   */\n  touchTime?: number;\n\n  /**\n   * The amount of time to wait (in ms) before showing the tooltip after a\n   * keyboard user has triggered a `focus` event. You _probably_ won't ever need\n   * to change this value.\n   */\n  focusTime?: number;\n\n  /**\n   * Boolean if the hover mode functionality should be disabled for this\n   * instance instead of inheriting the value from the\n   * {@link HoverModeProvider}.\n   */\n  disableHoverMode?: boolean;\n\n  /**\n   * Boolean if the event handlers should no longer attempt to show a tooltip. This\n   * should be set to `true` when your component might not have a tooltip associated\n   * with it.\n   *\n   * @example\n   * Real World Example\n   * ```tsx\n   * import type { ReactElement, ReactNode } from \"react\";\n   * import { Button, ButtonProps } from \"@react-md/button\";\n   * import { Tooltip, useTooltip } from \"@react-md/tooltip\":\n   *\n   * export interface TooltippedButtonProps extends ButtonProps {\n   *   id: string;\n   *   tooltip?: ReactNode;\n   * }\n   *\n   * export function TooltippedButton({\n   *   id,\n   *   tooltip,\n   *   children,\n   *   onClick,\n   *   onBlur,\n   *   onFocus,\n   *   onKeyDown,\n   *   onMouseEnter,\n   *   onMouseLeave,\n   *   onTouchStart,\n   *   onContextMenu,\n   *   ...props\n   * }: TooltippedButtonProps): ReactElement {\n   *   const { elementProps, tooltipProps } = useTooltip({\n   *     disabled: !tooltip,\n   *     baseId: id,\n   *     onClick,\n   *     onBlur,\n   *     onFocus,\n   *     onKeyDown,\n   *     onMouseEnter,\n   *     onMouseLeave,\n   *     onTouchStart,\n   *     onContextMenu,\n   *   });\n   *\n   *   return (\n   *     <>\n   *       <Button {...props} {...elementProps}>\n   *         {children}\n   *       </Button>\n   *       <Tooltip {...tooltipProps}>{tooltip}</Tooltip>\n   *     </>\n   *   );\n   * }\n   * ```\n   *\n   * @defaultValue `false`\n   * @remarks \\@since 5.1.0\n   */\n  disabled?: boolean;\n}\n\n/** @remarks \\@since 2.8.0 */\nexport interface TooltipHookOptions<E extends HTMLElement>\n  extends BaseTooltipHookOptions<E> {\n  /**\n   * This is the DOM `id` to use for the tooltipped element and is used to\n   * generate an `id` for the `Tooltip` component as:\n   *\n   * ```ts\n   * const tooltipId = `${baseId}-tooltip`\n   * ```\n   */\n  baseId: string;\n\n  /**\n   * An optional `aria-describedby` DOM `id` string to merge with the returned\n   * `aria-describedby` string since it only exists when the tooltip is visible.\n   */\n  describedBy?: string;\n}\n\n/**\n * The props that will be created from the {@link useTooltip} hook that should\n * be passed to the {@link Tooltip} component to work correctly.\n *\n * @remarks \\@since 2.8.0\n */\nexport type TooltipHookProvidedTooltipProps = Pick<TooltipProps, \"style\"> &\n  Required<FixedPositioningTransitionCallbacks> &\n  Required<Pick<TooltipProps, \"id\" | \"dense\" | \"position\" | \"visible\">> & {\n    ref: Ref<HTMLSpanElement>;\n  };\n\n/**\n * Note: This is _really_ an internal type since this is handled automatically\n * from the {@link Tooltipped} component.\n *\n * @remarks \\@since 2.8.0\n */\nexport interface TooltipHookReturnValue<E extends HTMLElement>\n  extends Omit<HoverModeHookReturnValue, \"handlers\" | \"hoverHandlers\"> {\n  /** {@inheritDoc TooltippedElementEventHandlers} */\n  handlers: Required<TooltippedElementEventHandlers<E>>;\n\n  /**\n   * These are the props that should be provided to the element the tooltip is\n   * attached to.\n   */\n  elementProps: TooltipHookProvidedElementProps<E>;\n\n  /**\n   * These props should be provided to the {@link Tooltip} component.\n   */\n  tooltipProps: TooltipHookProvidedTooltipProps;\n}\n\n/**\n * This hook is used to handle the positioning and visibility of the tooltip\n * component mostly within the {@link Tooltipped} component.\n *\n * @example\n * Simple Usage\n * ```tsx\n * import { Button } from \"@react-md/button\";\n * import { useTooltip, Tooltip } from \"@react-md/tooltip\";\n *\n * function Example() {\n *   const { tooltipProps, elementProps } = useTooltip({\n *     baseId: 'my-element',\n *   });\n *\n *   return (\n *     <>\n *       <Button {...elementProps}>Button</Button>\n *       <Tooltip {...tooltipProps}>\n *         Tooltip Content\n *       </Tooltip>\n *     </>\n *   );\n * }\n * ```\n *\n * @remarks \\@since 2.8.0\n * @param options - All the {@link TooltipHookOptions} to configure the tooltip behavior.\n * @returns The {@link TooltipHookReturnValue}\n */\nexport function useTooltip<E extends HTMLElement>({\n  baseId,\n  style: propStyle,\n  describedBy,\n  dense = false,\n  spacing = DEFAULT_TOOLTIP_SPACING,\n  denseSpacing = DEFAULT_TOOLTIP_DENSE_SPACING,\n  position: determinedPosition,\n  defaultPosition = DEFAULT_TOOLTIP_POSITION,\n  vwMargin = DEFAULT_TOOLTIP_MARGIN,\n  vhMargin = DEFAULT_TOOLTIP_MARGIN,\n  threshold = DEFAULT_TOOLTIP_THRESHOLD,\n  touchTime = DEFAULT_TOOLTIP_DELAY,\n  focusTime = DEFAULT_TOOLTIP_DELAY,\n  onFocus: propOnFocus,\n  onBlur: propOnBlur,\n  onKeyDown: propOnKeyDown,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchStart: propOnTouchStart,\n  onContextMenu: propOnContextMenu,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExited,\n  disabled = false,\n  disableSwapping = false,\n  disableHoverMode: propDisableHoverMode,\n  disableAutoSpacing = process.env.NODE_ENV === \"test\",\n}: TooltipHookOptions<E>): TooltipHookReturnValue<E> {\n  const containerRef = useRef<E | null>(null);\n  const [position, updatePosition] = useTooltipPosition({\n    position: determinedPosition,\n    defaultPosition,\n    threshold,\n  });\n  const mode = useUserInteractionMode();\n  const [initiatedBy, setInitiatedBy] = useState<TooltipInitiatedBy>(null);\n  const windowFocusEvent = useRef(false);\n  const timeout = useRef<number | undefined>(undefined);\n  const {\n    visible,\n    setVisible,\n    handlers,\n    hoverHandlers: _hoverHandlers,\n    disableHoverMode,\n    clearHoverTimeout,\n    ...others\n  } = useHoverMode({\n    disabled: propDisableHoverMode || disabled,\n    exitVisibilityDelay: 0,\n  });\n  const hide = useCallback(() => {\n    window.clearTimeout(timeout.current);\n    setVisible(false);\n    setInitiatedBy(null);\n  }, [setVisible]);\n\n  const onBlur = (event: FocusEvent<E>): void => {\n    propOnBlur?.(event);\n\n    if (disabled || initiatedBy !== \"keyboard\") {\n      return;\n    }\n\n    hide();\n  };\n  const onFocus = (event: FocusEvent<E>): void => {\n    propOnFocus?.(event);\n    if (disabled) {\n      return;\n    }\n\n    // if the element gained focus immediately after the browser window gains\n    // focus, do not start timer and ignore this event instead\n    if (windowFocusEvent.current) {\n      windowFocusEvent.current = false;\n      return;\n    }\n\n    if (mode !== \"keyboard\" || initiatedBy !== null) {\n      return;\n    }\n\n    setInitiatedBy(\"keyboard\");\n    window.clearTimeout(timeout.current);\n    containerRef.current = event.currentTarget;\n    updatePosition(event.currentTarget);\n    timeout.current = window.setTimeout(() => {\n      setVisible(true);\n    }, focusTime);\n  };\n\n  const onKeyDown = (event: KeyboardEvent<E>): void => {\n    propOnKeyDown?.(event);\n\n    if (disabled || initiatedBy !== \"keyboard\" || event.key !== \"Escape\") {\n      return;\n    }\n\n    hide();\n  };\n\n  const onTouchStart = (event: TouchEvent<E>): void => {\n    propOnTouchStart?.(event);\n\n    if (event.isPropagationStopped() || disabled || mode !== \"touch\") {\n      return;\n    }\n\n    setInitiatedBy(\"touch\");\n    window.clearTimeout(timeout.current);\n    timeout.current = window.setTimeout(() => {\n      setVisible(true);\n    }, touchTime);\n    containerRef.current = event.currentTarget;\n    updatePosition(event.currentTarget);\n  };\n\n  const onContextMenu = (event: MouseEvent<E>): void => {\n    propOnContextMenu?.(event);\n\n    if (event.isPropagationStopped() || disabled || mode !== \"touch\") {\n      return;\n    }\n\n    // Need to prevent the context menu from displaying and display the tooltip\n    // instead.\n    event.preventDefault();\n\n    const selection = window.getSelection();\n    const node = selection?.anchorNode?.parentElement;\n    /* istanbul ignore next */\n    if (selection && node && event.currentTarget.contains(node)) {\n      selection.empty();\n    }\n\n    setVisible(true);\n  };\n\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    if (mode !== \"keyboard\") {\n      windowFocusEvent.current = false;\n      return;\n    }\n\n    const handler = (): void => {\n      if (document.hidden) {\n        hide();\n        windowFocusEvent.current =\n          document.activeElement === containerRef.current;\n      }\n    };\n\n    window.addEventListener(\"visibilitychange\", handler);\n    return () => {\n      window.removeEventListener(\"visibilitychange\", handler);\n    };\n  }, [disabled, hide, mode]);\n  useEffect(() => {\n    if (initiatedBy !== \"touch\") {\n      return;\n    }\n\n    window.addEventListener(\"scroll\", hide, true);\n    window.addEventListener(\"touchend\", hide, true);\n    return () => {\n      window.removeEventListener(\"scroll\", hide, true);\n      window.removeEventListener(\"touchend\", hide, true);\n    };\n  }, [hide, initiatedBy, setVisible]);\n\n  useOnUnmount(() => {\n    window.clearTimeout(timeout.current);\n  });\n\n  const nodeRef = useRef<HTMLSpanElement>(null);\n  const {\n    ref,\n    style,\n    callbacks: transitionOptions,\n  } = useFixedPositioning({\n    style: propStyle,\n    nodeRef,\n    anchor: getAnchor(position),\n    disableSwapping: disableSwapping ?? !!determinedPosition,\n    fixedTo: containerRef,\n    getFixedPositionOptions() {\n      let tooltipSpacing = dense ? denseSpacing : spacing;\n      const node = nodeRef.current;\n      /* istanbul ignore next */\n      if (!disableAutoSpacing && node) {\n        tooltipSpacing = window\n          .getComputedStyle(node)\n          .getPropertyValue(TOOLTIP_SPACING_VAR);\n      }\n\n      const currentSpacing = unitToNumber(tooltipSpacing);\n\n      return {\n        vwMargin,\n        vhMargin,\n        xMargin: currentSpacing,\n        yMargin: currentSpacing,\n      };\n    },\n    onResize: hide,\n    onScroll: hide,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExited,\n  });\n\n  const tooltipHandlers: Required<TooltippedElementEventHandlers<E>> = {\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onTouchStart,\n    onContextMenu,\n    onClick(event) {\n      onClick?.(event);\n      if (event.isPropagationStopped() || disabled) {\n        return;\n      }\n\n      setVisible(false);\n      setInitiatedBy(null);\n      window.clearTimeout(timeout.current);\n      clearHoverTimeout();\n    },\n    onMouseEnter(event) {\n      onMouseEnter?.(event);\n      if (disabled) {\n        return;\n      }\n\n      if (initiatedBy !== null) {\n        event.stopPropagation();\n        return;\n      }\n\n      containerRef.current = event.currentTarget;\n      updatePosition(event.currentTarget);\n      setInitiatedBy(\"mouse\");\n      handlers.onMouseEnter(event);\n    },\n    onMouseLeave(event) {\n      onMouseLeave?.(event);\n      if (disabled) {\n        return;\n      }\n\n      if (initiatedBy !== \"mouse\") {\n        event.stopPropagation();\n        return;\n      }\n\n      setInitiatedBy(null);\n      handlers.onMouseLeave(event);\n    },\n  };\n\n  const tooltipId = `${baseId}-tooltip`;\n  const elementProps: TooltipHookProvidedElementProps<E> = {\n    id: baseId,\n    \"aria-describedby\": cn(visible && tooltipId, describedBy) || undefined,\n    ...tooltipHandlers,\n  };\n  const tooltipProps: TooltipHookProvidedTooltipProps = {\n    id: tooltipId,\n    ref,\n    dense,\n    visible,\n    position,\n    style,\n    ...transitionOptions,\n  };\n\n  return {\n    ...others,\n    visible,\n    setVisible,\n    handlers: tooltipHandlers,\n    elementProps,\n    tooltipProps,\n    disableHoverMode,\n    clearHoverTimeout,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}