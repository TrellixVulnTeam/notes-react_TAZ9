{"ast":null,"code":"import { useCallback, useRef } from \"react\";\nimport { applyRef } from \"../applyRef\";\nimport { useKeyboardFocusContext } from \"./movementContext\";\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\n\nexport function useKeyboardFocusableElement(ref) {\n  var _a = useKeyboardFocusContext(),\n      attach = _a.attach,\n      detach = _a.detach;\n\n  var nodeRef = useRef(null);\n  return useCallback(function (instance) {\n    applyRef(instance, ref);\n\n    if (instance) {\n      attach(instance);\n    } else if (nodeRef.current) {\n      detach(nodeRef.current);\n    }\n\n    nodeRef.current = instance;\n  }, [attach, detach, ref]);\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,uBAAT,QAAwC,mBAAxC;AAEA;;;;;AAIA,OAAM,SAAUC,2BAAV,CACJC,GADI,EACQ;EAEN,SAAqBF,uBAAuB,EAA5C;EAAA,IAAEG,MAAM,YAAR;EAAA,IAAUC,MAAM,YAAhB;;EACN,IAAMC,OAAO,GAAGP,MAAM,CAAW,IAAX,CAAtB;EAEA,OAAOD,WAAW,CAChB,UAACS,QAAD,EAAmB;IACjBP,QAAQ,CAACO,QAAD,EAAWJ,GAAX,CAAR;;IACA,IAAII,QAAJ,EAAc;MACZH,MAAM,CAACG,QAAD,CAAN;IACD,CAFD,MAEO,IAAID,OAAO,CAACE,OAAZ,EAAqB;MAC1BH,MAAM,CAACC,OAAO,CAACE,OAAT,CAAN;IACD;;IAEDF,OAAO,CAACE,OAAR,GAAkBD,QAAlB;EACD,CAVe,EAWhB,CAACH,MAAD,EAASC,MAAT,EAAiBF,GAAjB,CAXgB,CAAlB;AAaD","names":["useCallback","useRef","applyRef","useKeyboardFocusContext","useKeyboardFocusableElement","ref","attach","detach","nodeRef","instance","current"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\keyboardMovement\\useKeyboardFocusableElement.ts"],"sourcesContent":["import type { Ref, RefCallback } from \"react\";\nimport { useCallback, useRef } from \"react\";\n\nimport { applyRef } from \"../applyRef\";\nimport { useKeyboardFocusContext } from \"./movementContext\";\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport function useKeyboardFocusableElement<E extends HTMLElement>(\n  ref?: Ref<E>\n): RefCallback<E> {\n  const { attach, detach } = useKeyboardFocusContext();\n  const nodeRef = useRef<E | null>(null);\n\n  return useCallback(\n    (instance: E | null) => {\n      applyRef(instance, ref);\n      if (instance) {\n        attach(instance);\n      } else if (nodeRef.current) {\n        detach(nodeRef.current);\n      }\n\n      nodeRef.current = instance;\n    },\n    [attach, detach, ref]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}