{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useEffect } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n/**\n * Simple hook to use an interval with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param callback - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultRunning - Boolean if the interval should be started immediately\n * @returns a list containing a boolean if the interval is running, function to\n * start the interval, and a function to stop the interval.\n */\n\nexport function useInterval(callback, delay, defaultRunning) {\n  if (defaultRunning === void 0) {\n    defaultRunning = false;\n  }\n\n  var ref = useRefCache(callback);\n\n  var _a = __read(useToggle(defaultRunning), 3),\n      running = _a[0],\n      start = _a[1],\n      stop = _a[2];\n\n  useEffect(function () {\n    if (!running) {\n      return;\n    }\n\n    var interval = window.setInterval(function () {\n      ref.current(stop);\n    }, delay);\n    return function () {\n      window.clearInterval(interval);\n    }; // disabled since useRefCache for the callback\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, running, stop]);\n  return [running, start, stop];\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAOA;;;;;;;;;;;;AAWA,OAAM,SAAUC,WAAV,CACJC,QADI,EAEJC,KAFI,EAGJC,cAHI,EAGkB;EAAtB;IAAAA;EAAsB;;EAEtB,IAAMC,GAAG,GAAGN,WAAW,CAACG,QAAD,CAAvB;;EAEM,gBAAyBF,SAAS,CAACI,cAAD,CAAlC,EAAkD,CAAlD;EAAA,IAACE,OAAO,QAAR;EAAA,IAAUC,KAAK,QAAf;EAAA,IAAiBC,IAAI,QAArB;;EAENV,SAAS,CAAC;IACR,IAAI,CAACQ,OAAL,EAAc;MACZ;IACD;;IAED,IAAMG,QAAQ,GAAGC,MAAM,CAACC,WAAP,CAAmB;MAClCN,GAAG,CAACO,OAAJ,CAAYJ,IAAZ;IACD,CAFgB,EAEdL,KAFc,CAAjB;IAGA,OAAO;MACLO,MAAM,CAACG,aAAP,CAAqBJ,QAArB;IACD,CAFD,CARQ,CAWR;IACA;EACD,CAbQ,EAaN,CAACN,KAAD,EAAQG,OAAR,EAAiBE,IAAjB,CAbM,CAAT;EAeA,OAAO,CAACF,OAAD,EAAUC,KAAV,EAAiBC,IAAjB,CAAP;AACD","names":["useEffect","useRefCache","useToggle","useInterval","callback","delay","defaultRunning","ref","running","start","stop","interval","window","setInterval","current","clearInterval"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\useInterval.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n\ntype Running = boolean;\ntype StartInterval = () => void;\ntype StopInterval = () => void;\ntype ReturnValue = [Running, StartInterval, StopInterval];\n\n/**\n * Simple hook to use an interval with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param callback - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultRunning - Boolean if the interval should be started immediately\n * @returns a list containing a boolean if the interval is running, function to\n * start the interval, and a function to stop the interval.\n */\nexport function useInterval(\n  callback: (stop: () => void) => void,\n  delay: number,\n  defaultRunning = false\n): ReturnValue {\n  const ref = useRefCache(callback);\n\n  const [running, start, stop] = useToggle(defaultRunning);\n\n  useEffect(() => {\n    if (!running) {\n      return;\n    }\n\n    const interval = window.setInterval(() => {\n      ref.current(stop);\n    }, delay);\n    return () => {\n      window.clearInterval(interval);\n    };\n    // disabled since useRefCache for the callback\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, running, stop]);\n\n  return [running, start, stop];\n}\n"]},"metadata":{},"sourceType":"module"}