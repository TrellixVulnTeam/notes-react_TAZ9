{"ast":null,"code":"import { useEffect } from \"react\";\nimport { focusElementWithin } from \"./focusElementWithin\";\nimport { getInstance } from \"./getInstance\";\n/**\n * This hook is used to focus an element once a component has mounted. To help\n * with keyboard click events, it will actually wait for an animation frame\n * before attempting to focus as an enter key might click both elements at the\n * same time.\n *\n * This hook will first focus the HTMLElement (if it is focusable) and then\n * focus an element based on the defaultFocus prop.\n *\n * @param refOrInstance - This is either a ref object containing the element to\n * focus or the element itself.\n * @param defaultFocus - The element to focus within the containing element once\n * it has been mounted. This can either be \"first\" or \"last\" to focus the first\n * or last focusable elements or a query selector string to find an element to\n * focus.\n * @param preventScroll - Boolean if the focus events should try to prevent the\n * default scroll-into-view behavior. This is generally recommended to be kept\n * as `false`, but can be useful to enable if the component mounts offscreen\n * during a transition.\n * @param programmatic - Boolean if programmatically focusable elements should be\n * included instead of only tab focusable.\n * @param disabled - Boolean if the focus behavior should be disabled.\n */\n\nexport function useFocusOnMount(refOrInstance, defaultFocus, preventScroll, programmatic, disabled) {\n  if (preventScroll === void 0) {\n    preventScroll = false;\n  }\n\n  if (programmatic === void 0) {\n    programmatic = false;\n  }\n\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  useEffect(function () {\n    if (disabled) {\n      return;\n    }\n\n    var frame = window.requestAnimationFrame(function () {\n      var instance = getInstance(refOrInstance);\n\n      if (!instance) {\n        return;\n      }\n\n      instance.focus({\n        preventScroll: preventScroll\n      });\n      focusElementWithin(instance, defaultFocus, programmatic, preventScroll);\n    });\n    return function () {\n      window.cancelAnimationFrame(frame);\n    };\n  }, [defaultFocus, disabled, refOrInstance, programmatic, preventScroll]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAGA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUC,eAAV,CACJC,aADI,EAEJC,YAFI,EAGJC,aAHI,EAIJC,YAJI,EAKJC,QALI,EAKY;EAFhB;IAAAF;EAAqB;;EACrB;IAAAC;EAAoB;;EACpB;IAAAC;EAAgB;;EAEhBR,SAAS,CAAC;IACR,IAAIQ,QAAJ,EAAc;MACZ;IACD;;IAED,IAAMC,KAAK,GAAGC,MAAM,CAACC,qBAAP,CAA6B;MACzC,IAAMC,QAAQ,GAAGV,WAAW,CAACE,aAAD,CAA5B;;MACA,IAAI,CAACQ,QAAL,EAAe;QACb;MACD;;MAEDA,QAAQ,CAACC,KAAT,CAAe;QAAEP,aAAa;MAAf,CAAf;MACAL,kBAAkB,CAACW,QAAD,EAAWP,YAAX,EAAyBE,YAAzB,EAAuCD,aAAvC,CAAlB;IACD,CARa,CAAd;IAUA,OAAO;MACLI,MAAM,CAACI,oBAAP,CAA4BL,KAA5B;IACD,CAFD;EAGD,CAlBQ,EAkBN,CAACJ,YAAD,EAAeG,QAAf,EAAyBJ,aAAzB,EAAwCG,YAAxC,EAAsDD,aAAtD,CAlBM,CAAT;AAmBD","names":["useEffect","focusElementWithin","getInstance","useFocusOnMount","refOrInstance","defaultFocus","preventScroll","programmatic","disabled","frame","window","requestAnimationFrame","instance","focus","cancelAnimationFrame"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\wia-aria\\useFocusOnMount.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport type { Focus } from \"./focusElementWithin\";\nimport { focusElementWithin } from \"./focusElementWithin\";\nimport type { RefOrInstance } from \"./getInstance\";\nimport { getInstance } from \"./getInstance\";\n\n/**\n * This hook is used to focus an element once a component has mounted. To help\n * with keyboard click events, it will actually wait for an animation frame\n * before attempting to focus as an enter key might click both elements at the\n * same time.\n *\n * This hook will first focus the HTMLElement (if it is focusable) and then\n * focus an element based on the defaultFocus prop.\n *\n * @param refOrInstance - This is either a ref object containing the element to\n * focus or the element itself.\n * @param defaultFocus - The element to focus within the containing element once\n * it has been mounted. This can either be \"first\" or \"last\" to focus the first\n * or last focusable elements or a query selector string to find an element to\n * focus.\n * @param preventScroll - Boolean if the focus events should try to prevent the\n * default scroll-into-view behavior. This is generally recommended to be kept\n * as `false`, but can be useful to enable if the component mounts offscreen\n * during a transition.\n * @param programmatic - Boolean if programmatically focusable elements should be\n * included instead of only tab focusable.\n * @param disabled - Boolean if the focus behavior should be disabled.\n */\nexport function useFocusOnMount(\n  refOrInstance: RefOrInstance,\n  defaultFocus: Focus,\n  preventScroll = false,\n  programmatic = false,\n  disabled = false\n): void {\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    const frame = window.requestAnimationFrame(() => {\n      const instance = getInstance(refOrInstance);\n      if (!instance) {\n        return;\n      }\n\n      instance.focus({ preventScroll });\n      focusElementWithin(instance, defaultFocus, programmatic, preventScroll);\n    });\n\n    return () => {\n      window.cancelAnimationFrame(frame);\n    };\n  }, [defaultFocus, disabled, refOrInstance, programmatic, preventScroll]);\n}\n"]},"metadata":{},"sourceType":"module"}