{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useRef, useState } from \"react\";\nimport { useIcon } from \"@react-md/icon\";\nimport { defaultGetErrorIcon } from \"./getErrorIcon\";\nimport { defaultGetErrorMessage } from \"./getErrorMessage\";\nimport { defaultIsErrored } from \"./isErrored\";\n\nvar noop = function () {// do nothing\n};\n\nexport function useTextField(_a) {\n  var id = _a.id,\n      _b = _a.defaultValue,\n      defaultValue = _b === void 0 ? \"\" : _b,\n      theme = _a.theme,\n      pattern = _a.pattern,\n      required = _a.required,\n      minLength = _a.minLength,\n      maxLength = _a.maxLength,\n      _c = _a.disableMaxLength,\n      disableMaxLength = _c === void 0 ? false : _c,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      helpText = _a.helpText,\n      propErrorIcon = _a.errorIcon,\n      _d = _a.counter,\n      counter = _d === void 0 ? false : _d,\n      _e = _a.disableMessage,\n      disableMessage = _e === void 0 ? false : _e,\n      _f = _a.validateOnChange,\n      validateOnChange = _f === void 0 ? \"recommended\" : _f,\n      _g = _a.isErrored,\n      isErrored = _g === void 0 ? defaultIsErrored : _g,\n      _h = _a.onErrorChange,\n      onErrorChange = _h === void 0 ? noop : _h,\n      _j = _a.getErrorIcon,\n      getErrorIcon = _j === void 0 ? defaultGetErrorIcon : _j,\n      _k = _a.getErrorMessage,\n      getErrorMessage = _k === void 0 ? defaultGetErrorMessage : _k;\n\n  var _l = __read(useState(function () {\n    var value = typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\n    return {\n      value: value,\n      error: false,\n      errorMessage: \"\"\n    };\n  }), 2),\n      state = _l[0],\n      setState = _l[1];\n\n  var value = state.value,\n      error = state.error,\n      errorMessage = state.errorMessage;\n  var errored = useRef(false);\n  var fieldRef = useRef(null);\n  var messageId = \"\".concat(id, \"-message\");\n  var isCounting = counter && typeof maxLength === \"number\";\n  var reset = useCallback(function () {\n    /* istanbul ignore next */\n    if (fieldRef.current) {\n      fieldRef.current.setCustomValidity(\"\");\n    }\n\n    setState({\n      value: \"\",\n      error: false,\n      errorMessage: \"\"\n    });\n  }, []);\n  var updateState = useCallback(function (field, isBlurEvent) {\n    fieldRef.current = field; // need to temporarily set the `maxLength` back so it can be \"verified\"\n    // through the validity api\n\n    /* istanbul ignore next */\n\n    if (isBlurEvent && disableMaxLength && typeof maxLength === \"number\") {\n      field.maxLength = maxLength;\n    }\n\n    var value = field.value;\n    field.setCustomValidity(\"\");\n    field.checkValidity(); // remove the temporarily set `maxLength` attribute after checking the\n    // validity\n\n    /* istanbul ignore next */\n\n    if (disableMaxLength && typeof maxLength === \"number\") {\n      field.removeAttribute(\"maxLength\");\n    }\n\n    var options = {\n      value: value,\n      pattern: pattern,\n      required: required,\n      minLength: minLength,\n      maxLength: maxLength,\n      isBlurEvent: isBlurEvent,\n      validity: field.validity,\n      validationMessage: field.validationMessage,\n      validateOnChange: validateOnChange\n    };\n    var errorMessage = getErrorMessage(options);\n    var error = isErrored(__assign(__assign({}, options), {\n      errorMessage: errorMessage\n    }));\n\n    if (errored.current !== error) {\n      errored.current = error;\n      onErrorChange(id, error);\n    }\n    /* istanbul ignore next */\n\n\n    if (errorMessage !== field.validationMessage) {\n      field.setCustomValidity(errorMessage);\n    }\n\n    setState({\n      value: value,\n      error: error,\n      errorMessage: errorMessage\n    });\n  }, [disableMaxLength, getErrorMessage, id, isErrored, maxLength, minLength, onErrorChange, pattern, required, validateOnChange]);\n  var handleBlur = useCallback(function (event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (event.isPropagationStopped()) {\n      return;\n    }\n\n    updateState(event.currentTarget, true);\n  }, [onBlur, updateState]);\n  var handleChange = useCallback(function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n\n    if (event.isPropagationStopped()) {\n      return;\n    }\n\n    if (!validateOnChange || Array.isArray(validateOnChange) && !validateOnChange.length) {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          value: event.currentTarget.value\n        });\n      });\n      return;\n    }\n\n    updateState(event.currentTarget, false);\n  }, [onChange, updateState, validateOnChange]);\n  var errorIcon = useIcon(\"error\", propErrorIcon);\n  var props = {\n    id: id,\n    value: value,\n    theme: theme,\n    error: error,\n    required: required,\n    pattern: pattern,\n    minLength: minLength,\n    maxLength: disableMaxLength ? undefined : maxLength,\n    rightChildren: getErrorIcon(errorMessage, error, errorIcon),\n    onBlur: handleBlur,\n    onChange: handleChange\n  };\n\n  if (!disableMessage) {\n    props[\"aria-describedby\"] = messageId;\n    props.messageProps = {\n      id: messageId,\n      error: error,\n      theme: theme,\n      length: counter ? value.length : undefined,\n      maxLength: isCounting ? maxLength : undefined,\n      children: errorMessage || helpText\n    };\n  }\n\n  return [value, props, {\n    reset: reset,\n    setState: setState\n  }];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useRef","useState","useIcon","defaultGetErrorIcon","defaultGetErrorMessage","defaultIsErrored","noop","useTextField","_a","id","_b","defaultValue","theme","pattern","required","minLength","maxLength","_c","disableMaxLength","onBlur","onChange","helpText","propErrorIcon","_d","counter","_e","disableMessage","_f","validateOnChange","_g","isErrored","_h","onErrorChange","_j","getErrorIcon","_k","getErrorMessage","value","error","errorMessage","state","setState","errored","fieldRef","messageId","isCounting","reset","current","setCustomValidity","updateState","field","isBlurEvent","checkValidity","removeAttribute","options","validity","validationMessage","handleBlur","event","isPropagationStopped","currentTarget","handleChange","Array","isArray","length","prevState","errorIcon","props","undefined","rightChildren","messageProps","children"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\text-field\\useTextField.ts"],"sourcesContent":["import type {\n  ChangeEvent,\n  Dispatch,\n  FocusEvent,\n  HTMLAttributes,\n  ReactNode,\n  SetStateAction,\n} from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useIcon } from \"@react-md/icon\";\n\nimport type {\n  FormMessageInputLengthCounterProps,\n  FormMessageProps,\n} from \"../FormMessage\";\nimport type { GetErrorIcon } from \"./getErrorIcon\";\nimport { defaultGetErrorIcon } from \"./getErrorIcon\";\nimport type {\n  ChangeValidationBehavior,\n  ErrorMessageOptions,\n  GetErrorMessage,\n  TextConstraints,\n} from \"./getErrorMessage\";\nimport { defaultGetErrorMessage } from \"./getErrorMessage\";\nimport type { IsErrored } from \"./isErrored\";\nimport { defaultIsErrored } from \"./isErrored\";\nimport type { TextFieldProps } from \"./TextField\";\n\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type TextFieldChangeHandlers = Pick<\n  HTMLAttributes<HTMLInputElement | HTMLTextAreaElement>,\n  \"onBlur\" | \"onChange\"\n>;\n\n/**\n * A function that reports the error state changing. A good use-case for this is\n * to keep track of all the errors within your form and keep a submit button\n * disabled until they have been resolved.\n *\n * Example:\n *\n * ```ts\n * const [errors, setErrors] = useState<Record<string, boolean | undefined>>({});\n * const onErrorChange: ErrorChangeHandler = (id, error) =>\n *   setErrors((prevErrors) => ({ ...prevErrors, [id]: error }));\n *\n * const invalid = Object.values(errors).some(Boolean);\n *\n * // form implementation is left as an exercise for the reader\n * <Button type=\"submit\" disabled={invalid} onClick={submitForm}>Submit</Button>\n * ```\n *\n * @remarks \\@since 2.5.0\n */\nexport type ErrorChangeHandler = (id: string, error: boolean) => void;\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface TextFieldHookOptions\n  extends TextConstraints,\n    TextFieldChangeHandlers,\n    Pick<TextFieldProps, \"id\" | \"theme\"> {\n  /**\n   * Boolean if the `FormMessage` should also display a counter for the\n   * remaining letters allowed based on the `maxLength`.\n   *\n   * This will still be considered false if the `maxLength` value is not\n   * provided.\n   */\n  counter?: boolean;\n\n  /**\n   * The default value to use for the `TextField` or `TextArea` one initial\n   * render. If you want to manually change the value to something else after\n   * the initial render, either change the `key` for the component containing\n   * this hook, or use the `setState` function returned from this hook.\n   */\n  defaultValue?: string | (() => string);\n\n  /**\n   * An optional help text to display in the `FormMessage` component when there\n   * is not an error.\n   */\n  helpText?: ReactNode;\n\n  /**\n   * A function used to determine if the `TextField` or `TextArea` is an in\n   * errored state. See {@link defaultIsErrored} for the default implementation\n   * details.\n   */\n  isErrored?: IsErrored;\n\n  /**\n   * An optional error icon used in the {@link getErrorIcon} option.\n   */\n  errorIcon?: ReactNode;\n\n  /**\n   * A function used to get the error icon to display at the right of the\n   * `TextField` or `TextArea`. The default behavior will only show an icon when\n   * the `error` state is `true` and an `errorIcon` option has been provided.\n   */\n  getErrorIcon?: GetErrorIcon;\n\n  /**\n   * A function to get and display an error message based on the `TextField` or\n   * `TextArea` validity. See {@link defaultGetErrorMessage} for the default\n   * implementation details.\n   */\n  getErrorMessage?: GetErrorMessage;\n\n  /**\n   * An optional function that will be called whenever the `error` state is\n   * changed. This can be used for more complex forms to `disable` the Submit\n   * button or anything else if any field has an error.\n   */\n  onErrorChange?: ErrorChangeHandler;\n\n  /**\n   * Describes the validation behavior that should be done when the value within\n   * the `TextField` changes. This can either be:\n   *\n   * - a boolean\n   * - the string `\"recommended\"`\n   * - a single key of the ValidityState that should trigger the validation\n   * - a list of keys of the ValidityState that should trigger the validation\n   */\n  validateOnChange?: ChangeValidationBehavior;\n\n  /**\n   * Boolean if the `TextField` or `TextArea` will **not** be rendered along\n   * with a `FormMessage` component. This will prevent the `aria-describedby`\n   * prop from being returned when set to `true`.\n   */\n  disableMessage?: boolean;\n\n  /**\n   * Boolean if the `maxLength` prop should not be passed to the `TextField`\n   * component since it will prevent any additional characters from being\n   * entered in the text field which might feel like weird behavior to some\n   * users. This should really only be used when the `counter` option is also\n   * enabled and rendering along with a `FormMessage` component.\n   */\n  disableMaxLength?: boolean;\n}\n\n/**\n * All the props that will be generated and return from the `useTextField` hook\n * that should be passed to a `FormMessage` component.\n *\n * @remarks \\@since 2.5.0\n */\nexport interface ProvidedFormMessageProps\n  extends Pick<FormMessageProps, \"id\" | \"theme\" | \"children\">,\n    Required<Pick<TextFieldProps, \"error\">>,\n    Partial<Pick<FormMessageInputLengthCounterProps, \"length\" | \"maxLength\">> {}\n\n/**\n * All the props that will be generated and returned by the `useTextField` hook\n * that should be passed to a `TextField` component.\n *\n * @remarks \\@since 2.5.0\n */\nexport interface ProvidedTextFieldProps\n  extends TextConstraints,\n    Required<TextFieldChangeHandlers>,\n    Required<Pick<TextFieldProps, \"id\" | \"value\" | \"error\">>,\n    Pick<TextFieldProps, \"aria-describedby\" | \"theme\" | \"rightChildren\"> {}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface ProvidedTextFieldMessageProps extends ProvidedTextFieldProps {\n  /**\n   * These props will be defined as long as the `disableMessage` prop is not\n   * `true` from the `useTextField` hook.\n   */\n  messageProps: ProvidedFormMessageProps;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface TextFieldHookState {\n  /**\n   * The current value for the `TextField` or `TextArea`.\n   */\n  value: string;\n\n  /**\n   * Boolean if the `TextField` or `TextArea` are in an errored state.\n   *\n   * Note: This can be `true` while the `errorMessage` is an empty string since\n   * it's sometimes useful to show there's an error while the user is typing\n   * without reporting the full error message.\n   */\n  error: boolean;\n\n  /**\n   * The current error message that will be an empty string when there are no\n   * errors for the `TextField` or `TextArea` component or the message is hidden\n   * during change events.\n   */\n  errorMessage: string;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface TextFieldHookControls {\n  /**\n   * Resets the state back to:\n   * ```ts\n   * {\n   *   value: \"\",\n   *   error: false,\n   *   errorMessage: \"\",\n   * }\n   * ```\n   */\n  reset(): void;\n  setState: Dispatch<SetStateAction<TextFieldHookState>>;\n}\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport type TextFieldHookReturnType = [\n  string,\n  ProvidedTextFieldProps | ProvidedTextFieldMessageProps,\n  TextFieldHookControls\n];\n\n/**\n * This hook is used to control the `value` for a `TextField` or `TextArea`\n * component along with some simple validation checks using the browser validity\n * api/constraint validation. This also provides props that can be passed to the\n * `FormMessage` component to display error messages or help text.\n *\n * Note: Even though this hook exists, it is highly recommended to use a form\n * helper library like [react-hook-form](https://react-hook-form.com/) for more\n * complex forms\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\n * @param options - All the options used to control the functionality of this\n * hook.\n * @returns @see {@link TextFieldHookReturnType}\n * @remarks \\@since 2.5.0\n */\nexport function useTextField(\n  options: TextFieldHookOptions & { disableMessage: true }\n): [string, ProvidedTextFieldProps, TextFieldHookControls];\nexport function useTextField(\n  options: TextFieldHookOptions & { disableMessage: false }\n): [string, ProvidedTextFieldMessageProps, TextFieldHookControls];\nexport function useTextField(\n  options: TextFieldHookOptions & { disableMessage?: boolean }\n): [string, ProvidedTextFieldMessageProps, TextFieldHookControls];\nexport function useTextField({\n  id,\n  defaultValue = \"\",\n  theme,\n  pattern,\n  required,\n  minLength,\n  maxLength,\n  disableMaxLength = false,\n  onBlur,\n  onChange,\n  helpText,\n  errorIcon: propErrorIcon,\n  counter = false,\n  disableMessage = false,\n  validateOnChange = \"recommended\",\n  isErrored = defaultIsErrored,\n  onErrorChange = noop,\n  getErrorIcon = defaultGetErrorIcon,\n  getErrorMessage = defaultGetErrorMessage,\n}: TextFieldHookOptions): TextFieldHookReturnType {\n  const [state, setState] = useState<TextFieldHookState>(() => {\n    const value =\n      typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\n\n    return {\n      value,\n      error: false,\n      errorMessage: \"\",\n    };\n  });\n  const { value, error, errorMessage } = state;\n  const errored = useRef(false);\n  const fieldRef = useRef<HTMLInputElement | HTMLTextAreaElement | null>(null);\n\n  const messageId = `${id}-message`;\n  const isCounting = counter && typeof maxLength === \"number\";\n  const reset = useCallback(() => {\n    /* istanbul ignore next */\n    if (fieldRef.current) {\n      fieldRef.current.setCustomValidity(\"\");\n    }\n\n    setState({\n      value: \"\",\n      error: false,\n      errorMessage: \"\",\n    });\n  }, []);\n\n  const updateState = useCallback(\n    (field: HTMLInputElement | HTMLTextAreaElement, isBlurEvent: boolean) => {\n      fieldRef.current = field;\n\n      // need to temporarily set the `maxLength` back so it can be \"verified\"\n      // through the validity api\n      /* istanbul ignore next */\n      if (isBlurEvent && disableMaxLength && typeof maxLength === \"number\") {\n        field.maxLength = maxLength;\n      }\n\n      const { value } = field;\n      field.setCustomValidity(\"\");\n      field.checkValidity();\n\n      // remove the temporarily set `maxLength` attribute after checking the\n      // validity\n      /* istanbul ignore next */\n      if (disableMaxLength && typeof maxLength === \"number\") {\n        field.removeAttribute(\"maxLength\");\n      }\n\n      const options: ErrorMessageOptions = {\n        value,\n        pattern,\n        required,\n        minLength,\n        maxLength,\n        isBlurEvent,\n        validity: field.validity,\n        validationMessage: field.validationMessage,\n        validateOnChange,\n      };\n      const errorMessage = getErrorMessage(options);\n      const error = isErrored({ ...options, errorMessage });\n\n      if (errored.current !== error) {\n        errored.current = error;\n        onErrorChange(id, error);\n      }\n\n      /* istanbul ignore next */\n      if (errorMessage !== field.validationMessage) {\n        field.setCustomValidity(errorMessage);\n      }\n\n      setState({ value, error, errorMessage });\n    },\n    [\n      disableMaxLength,\n      getErrorMessage,\n      id,\n      isErrored,\n      maxLength,\n      minLength,\n      onErrorChange,\n      pattern,\n      required,\n      validateOnChange,\n    ]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => {\n      if (onBlur) {\n        onBlur(event);\n      }\n\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      updateState(event.currentTarget, true);\n    },\n    [onBlur, updateState]\n  );\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (onChange) {\n        onChange(event);\n      }\n\n      if (event.isPropagationStopped()) {\n        return;\n      }\n\n      if (\n        !validateOnChange ||\n        (Array.isArray(validateOnChange) && !validateOnChange.length)\n      ) {\n        setState((prevState) => ({\n          ...prevState,\n          value: event.currentTarget.value,\n        }));\n        return;\n      }\n\n      updateState(event.currentTarget, false);\n    },\n    [onChange, updateState, validateOnChange]\n  );\n\n  const errorIcon = useIcon(\"error\", propErrorIcon);\n  const props: ProvidedTextFieldProps & {\n    messageProps?: ProvidedFormMessageProps;\n  } = {\n    id,\n    value,\n    theme,\n    error,\n    required,\n    pattern,\n    minLength,\n    maxLength: disableMaxLength ? undefined : maxLength,\n    rightChildren: getErrorIcon(errorMessage, error, errorIcon),\n    onBlur: handleBlur,\n    onChange: handleChange,\n  };\n  if (!disableMessage) {\n    props[\"aria-describedby\"] = messageId;\n    props.messageProps = {\n      id: messageId,\n      error,\n      theme,\n      length: counter ? value.length : undefined,\n      maxLength: isCounting ? maxLength : undefined,\n      children: errorMessage || helpText,\n    };\n  }\n\n  return [\n    value,\n    props,\n    {\n      reset,\n      setState,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}