{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Checkbox } from \"@react-md/form\";\nimport { TableCell } from \"./TableCell\";\nvar DEFAULT_ARIA_LABEL = \"Toggle Row Selection\";\n/**\n * This is a simple wrapper for the `Checkbox` component that allows you to\n * render a nicely styled `Checkbox` within a `TableCell` element. This will\n * mostly just remove the additional padding applied and default an `aria-label`\n * since you normally don't want a checkbox with a label within a table since\n * it's more for selection.\n */\n\nexport var TableCheckbox = forwardRef(function TableCheckbox(_a, ref) {\n  var cellId = _a.cellId,\n      className = _a.className,\n      id = _a.id,\n      ariaLabel = _a[\"aria-label\"],\n      ariaLabelledBy = _a[\"aria-labelledby\"],\n      ariaChecked = _a[\"aria-checked\"],\n      ariaControls = _a[\"aria-controls\"],\n      checkboxRef = _a.checkboxRef,\n      checkboxStyle = _a.checkboxStyle,\n      checkboxClassName = _a.checkboxClassName,\n      icon = _a.icon,\n      iconStyle = _a.iconStyle,\n      iconClassName = _a.iconClassName,\n      toggleStyle = _a.toggleStyle,\n      toggleClassName = _a.toggleClassName,\n      disableIconOverlay = _a.disableIconOverlay,\n      name = _a.name,\n      value = _a.value,\n      checked = _a.checked,\n      onChange = _a.onChange,\n      defaultChecked = _a.defaultChecked,\n      indeterminate = _a.indeterminate,\n      props = __rest(_a, [\"cellId\", \"className\", \"id\", \"aria-label\", \"aria-labelledby\", \"aria-checked\", \"aria-controls\", \"checkboxRef\", \"checkboxStyle\", \"checkboxClassName\", \"icon\", \"iconStyle\", \"iconClassName\", \"toggleStyle\", \"toggleClassName\", \"disableIconOverlay\", \"name\", \"value\", \"checked\", \"onChange\", \"defaultChecked\", \"indeterminate\"]);\n\n  return _jsx(TableCell, __assign({}, props, {\n    ref: ref,\n    id: cellId,\n    header: false,\n    className: cn(\"rmd-table-cell--checkbox\", className)\n  }, {\n    children: _jsx(Checkbox, {\n      id: id,\n      \"aria-label\": (ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : ariaLabelledBy) ? undefined : DEFAULT_ARIA_LABEL,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-checked\": ariaChecked,\n      \"aria-controls\": ariaControls,\n      ref: checkboxRef,\n      style: checkboxStyle,\n      indeterminate: indeterminate,\n      className: checkboxClassName,\n      icon: icon,\n      iconStyle: iconStyle,\n      iconClassName: iconClassName,\n      toggleStyle: toggleStyle,\n      toggleClassName: toggleClassName,\n      disableIconOverlay: disableIconOverlay,\n      name: name,\n      value: value,\n      checked: checked,\n      onChange: onChange,\n      defaultChecked: defaultChecked\n    })\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAGA,SAASC,SAAT,QAA0B,aAA1B;AAoEA,IAAMC,kBAAkB,GAAG,sBAA3B;AAEA;;;;;;;;AAOA,OAAO,IAAMC,aAAa,GAAGL,UAAU,CAGrC,SAASK,aAAT,CACAC,EADA,EA0BAC,GA1BA,EA0BG;EAxBD,UAAM,YAAN;EAAA,IACAC,SAAS,eADT;EAAA,IAEAC,EAAE,QAFF;EAAA,IAGcC,SAAS,mBAHvB;EAAA,IAImBC,cAAc,wBAJjC;EAAA,IAKgBC,WAAW,qBAL3B;EAAA,IAMiBC,YAAY,sBAN7B;EAAA,IAOAC,WAAW,iBAPX;EAAA,IAQAC,aAAa,mBARb;EAAA,IASAC,iBAAiB,uBATjB;EAAA,IAUAC,IAAI,UAVJ;EAAA,IAWAC,SAAS,eAXT;EAAA,IAYAC,aAAa,mBAZb;EAAA,IAaAC,WAAW,iBAbX;EAAA,IAcAC,eAAe,qBAdf;EAAA,IAeAC,kBAAkB,wBAflB;EAAA,IAgBAC,IAAI,UAhBJ;EAAA,IAiBAC,KAAK,WAjBL;EAAA,IAkBAC,OAAO,aAlBP;EAAA,IAmBAC,QAAQ,cAnBR;EAAA,IAoBAC,cAAc,oBApBd;EAAA,IAqBAC,aAAa,mBArBb;EAAA,IAsBGC,KAAK,cAvBV,6TAuBU,CAtBR;;EA0BF,OACEC,KAAC3B,SAAD,EAAU4B,aACJF,KADI,EACC;IACTtB,GAAG,EAAEA,GADI;IAETE,EAAE,EAAEuB,MAFK;IAGTC,MAAM,EAAE,KAHC;IAITzB,SAAS,EAAEP,EAAE,CAAC,0BAAD,EAA6BO,SAA7B;EAJJ,CADD,EAK4C;IAAA0B,UAEpDJ,KAAC5B,QAAD,EAAS;MACPO,EAAE,EAAEA,EADG;MACD,cAEJ,UAAS,SAAT,aAAS,WAAT,eAAaE,cAAb,IAA8BwB,SAA9B,GAA0C/B,kBAHrC;MAGuD,mBAE7CO,cALV;MAKwB,gBACjBC,WANP;MAMkB,iBACVC,YAPR;MAQPN,GAAG,EAAEO,WARE;MASPsB,KAAK,EAAErB,aATA;MAUPa,aAAa,EAAEA,aAVR;MAWPpB,SAAS,EAAEQ,iBAXJ;MAYPC,IAAI,EAAEA,IAZC;MAaPC,SAAS,EAAEA,SAbJ;MAcPC,aAAa,EAAEA,aAdR;MAePC,WAAW,EAAEA,WAfN;MAgBPC,eAAe,EAAEA,eAhBV;MAiBPC,kBAAkB,EAAEA,kBAjBb;MAkBPC,IAAI,EAAEA,IAlBC;MAmBPC,KAAK,EAAEA,KAnBA;MAoBPC,OAAO,EAAEA,OApBF;MAqBPC,QAAQ,EAAEA,QArBH;MAsBPC,cAAc,EAAEA;IAtBT,CAAT;EAFoD,CAL5C,CAAV,CADF;AAkCD,CAjEsC,CAAhC","names":["forwardRef","cn","Checkbox","TableCell","DEFAULT_ARIA_LABEL","TableCheckbox","_a","ref","className","id","ariaLabel","ariaLabelledBy","ariaChecked","ariaControls","checkboxRef","checkboxStyle","checkboxClassName","icon","iconStyle","iconClassName","toggleStyle","toggleClassName","disableIconOverlay","name","value","checked","onChange","defaultChecked","indeterminate","props","_jsx","__assign","cellId","header","children","undefined","style"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\table\\src\\TableCheckbox.tsx"],"sourcesContent":["import type { CSSProperties, Ref, TdHTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { CheckboxProps } from \"@react-md/form\";\nimport { Checkbox } from \"@react-md/form\";\n\nimport type { TableCellProps } from \"./TableCell\";\nimport { TableCell } from \"./TableCell\";\n\ntype WantedCheckboxProps =\n  | \"name\"\n  | \"value\"\n  | \"icon\"\n  | \"iconStyle\"\n  | \"iconClassName\"\n  | \"toggleStyle\"\n  | \"toggleClassName\"\n  | \"disableIconOverlay\"\n  | \"checked\"\n  | \"onChange\"\n  | \"defaultChecked\"\n  | \"indeterminate\"\n  | \"aria-controls\";\n\nexport interface TableCheckboxProps\n  extends Omit<\n      TdHTMLAttributes<HTMLTableCellElement>,\n      \"onChange\" | \"scope\" | \"aria-sort\"\n    >,\n    Pick<CheckboxProps, WantedCheckboxProps>,\n    Pick<TableCellProps, \"sticky\"> {\n  /**\n   * The id for the checkbox. This is required for a11y.\n   */\n  id: string;\n\n  /**\n   * An optional id to provide to the `<td>` element. The base `id` prop is\n   * passed to the checkbox input instead.\n   */\n  cellId?: string;\n\n  /**\n   * An screen reader label to use for the checkbox. Either this or the\n   * `aria-labelledby` prop are required for a11y.\n   *\n   * Note: This is defaulted automatically to \"Toggle Row Selection\".\n   */\n  \"aria-label\"?: string;\n\n  /**\n   * An optional id or space-delimited list of ids that describe the checkbox.\n   * Either this or the `aria-label` props are required for a11y.\n   */\n  \"aria-labelledby\"?: string;\n\n  /**\n   * An optional `ref` to apply to the checkbox element. The base `ref` is\n   * passed to the `<td>` element.\n   */\n  checkboxRef?: Ref<HTMLInputElement>;\n\n  /**\n   * An optional style to apply to the checkbox. The base `style` is passed to\n   * the `<td>`.\n   */\n  checkboxStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the checkbox. The base `className` is\n   * passed to the `<td>`.\n   */\n  checkboxClassName?: string;\n}\n\nconst DEFAULT_ARIA_LABEL = \"Toggle Row Selection\";\n\n/**\n * This is a simple wrapper for the `Checkbox` component that allows you to\n * render a nicely styled `Checkbox` within a `TableCell` element. This will\n * mostly just remove the additional padding applied and default an `aria-label`\n * since you normally don't want a checkbox with a label within a table since\n * it's more for selection.\n */\nexport const TableCheckbox = forwardRef<\n  HTMLTableCellElement,\n  TableCheckboxProps\n>(function TableCheckbox(\n  {\n    cellId,\n    className,\n    id,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-checked\": ariaChecked,\n    \"aria-controls\": ariaControls,\n    checkboxRef,\n    checkboxStyle,\n    checkboxClassName,\n    icon,\n    iconStyle,\n    iconClassName,\n    toggleStyle,\n    toggleClassName,\n    disableIconOverlay,\n    name,\n    value,\n    checked,\n    onChange,\n    defaultChecked,\n    indeterminate,\n    ...props\n  },\n  ref\n) {\n  return (\n    <TableCell\n      {...props}\n      ref={ref}\n      id={cellId}\n      header={false}\n      className={cn(\"rmd-table-cell--checkbox\", className)}\n    >\n      <Checkbox\n        id={id}\n        aria-label={\n          ariaLabel ?? ariaLabelledBy ? undefined : DEFAULT_ARIA_LABEL\n        }\n        aria-labelledby={ariaLabelledBy}\n        aria-checked={ariaChecked}\n        aria-controls={ariaControls}\n        ref={checkboxRef}\n        style={checkboxStyle}\n        indeterminate={indeterminate}\n        className={checkboxClassName}\n        icon={icon}\n        iconStyle={iconStyle}\n        iconClassName={iconClassName}\n        toggleStyle={toggleStyle}\n        toggleClassName={toggleClassName}\n        disableIconOverlay={disableIconOverlay}\n        name={name}\n        value={value}\n        checked={checked}\n        onChange={onChange}\n        defaultChecked={defaultChecked}\n      />\n    </TableCell>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}