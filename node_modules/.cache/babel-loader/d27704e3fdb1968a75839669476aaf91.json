{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * This is a simple `array.find` implementation that will work for any\n * searchable item type and return the first item that starts with the current\n * query string ignoring case.\n *\n * @param query - The current query string to use to match with\n * @param searchable - The list of searchable items\n * @param options - The additional search options available.\n * @returns the found item in the searchable list or null\n */\n\nexport function findIgnoreCase(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n      getItemValue = _a.getItemValue,\n      valueKey = _a.valueKey,\n      trim = _a.trim,\n      ignoreWhitespace = _a.ignoreWhitespace;\n\n  query = getSearchString(query, true, trim, ignoreWhitespace);\n\n  if (!query.length || !searchable.length) {\n    return null;\n  }\n\n  var found = searchable.find(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);\n    return value.indexOf(query) === 0;\n  });\n  return typeof found === \"number\" ? found : found || null;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SAASC,sBAAT,EAAiCC,eAAjC,QAAwD,SAAxD;AAEA;;;;;;;;;;;AAUA,OAAM,SAAUC,cAAV,CACJC,KADI,EAEJC,UAFI,EAGJC,OAHI,EAG0B;EAA9B;IAAAA;EAA8B;;EAExB,SAAqDN,QAAQ,CACjEM,OADiE,EAEjEL,sBAFiE,CAA7D;EAAA,IAAEM,YAAY,kBAAd;EAAA,IAAgBC,QAAQ,cAAxB;EAAA,IAA0BC,IAAI,UAA9B;EAAA,IAAgCC,gBAAgB,sBAAhD;;EAKNN,KAAK,GAAGF,eAAe,CAACE,KAAD,EAAQ,IAAR,EAAcK,IAAd,EAAoBC,gBAApB,CAAvB;;EACA,IAAI,CAACN,KAAK,CAACO,MAAP,IAAiB,CAACN,UAAU,CAACM,MAAjC,EAAyC;IACvC,OAAO,IAAP;EACD;;EAED,IAAMC,KAAK,GAAGP,UAAU,CAACQ,IAAX,CAAgB,UAACC,IAAD,EAAK;IACjC,IAAMC,KAAK,GAAGb,eAAe,CAC3BK,YAAY,CAACO,IAAD,EAAON,QAAP,CADe,EAE3B,IAF2B,EAG3BC,IAH2B,EAI3BC,gBAJ2B,CAA7B;IAOA,OAAOK,KAAK,CAACC,OAAN,CAAcZ,KAAd,MAAyB,CAAhC;EACD,CATa,CAAd;EAWA,OAAO,OAAOQ,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,IAAI,IAApD;AACD","names":["defaults","DEFAULT_SEARCH_OPTIONS","getSearchString","findIgnoreCase","query","searchable","options","getItemValue","valueKey","trim","ignoreWhitespace","length","found","find","item","value","indexOf"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\search\\findIgnoreCase.ts"],"sourcesContent":["import { defaults } from \"../defaults\";\nimport type { SearchOptions } from \"./utils\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n\n/**\n * This is a simple `array.find` implementation that will work for any\n * searchable item type and return the first item that starts with the current\n * query string ignoring case.\n *\n * @param query - The current query string to use to match with\n * @param searchable - The list of searchable items\n * @param options - The additional search options available.\n * @returns the found item in the searchable list or null\n */\nexport function findIgnoreCase<T = unknown>(\n  query: string,\n  searchable: readonly T[],\n  options: SearchOptions<T> = {}\n): T | null {\n  const { getItemValue, valueKey, trim, ignoreWhitespace } = defaults(\n    options,\n    DEFAULT_SEARCH_OPTIONS\n  );\n\n  query = getSearchString(query, true, trim, ignoreWhitespace);\n  if (!query.length || !searchable.length) {\n    return null;\n  }\n\n  const found = searchable.find((item) => {\n    const value = getSearchString(\n      getItemValue(item, valueKey),\n      true,\n      trim,\n      ignoreWhitespace\n    );\n\n    return value.indexOf(query) === 0;\n  });\n\n  return typeof found === \"number\" ? found : found || null;\n}\n"]},"metadata":{},"sourceType":"module"}