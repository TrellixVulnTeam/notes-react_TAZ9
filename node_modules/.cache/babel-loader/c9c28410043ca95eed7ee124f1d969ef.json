{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\n/**\n * This hooks provides an easy way to toggle a boolean flag for React\n * components.  The main use case for this will be toggling the visibility of\n * something. All the provided actions are guaranteed to never change.\n *\n * @param defaultToggled - Boolean if the visibility should be enabled first\n * render.\n * @returns an array containing the toggled state, an enable function, a disable\n * function, a toggle function, and then a manual set toggle function.\n */\n\nexport function useToggle(defaultToggled) {\n  var _a = __read(useState(defaultToggled), 2),\n      toggled = _a[0],\n      setToggled = _a[1];\n\n  var previous = useRefCache(toggled);\n  var enable = useCallback(function () {\n    if (!previous.current) {\n      setToggled(true);\n    } // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var disable = useCallback(function () {\n    if (previous.current) {\n      setToggled(false);\n    } // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var toggle = useCallback(function () {\n    setToggled(function (prevVisible) {\n      return !prevVisible;\n    });\n  }, []);\n  return [toggled, enable, disable, toggle, setToggled];\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,WAAT,QAA4B,eAA5B;AASA;;;;;;;;;;;AAUA,OAAM,SAAUC,SAAV,CACJC,cADI,EACqC;EAEnC,gBAAwBH,QAAQ,CAACG,cAAD,CAAhC,EAAgD,CAAhD;EAAA,IAACC,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;;EACN,IAAMC,QAAQ,GAAGL,WAAW,CAACG,OAAD,CAA5B;EAEA,IAAMG,MAAM,GAAGR,WAAW,CAAC;IACzB,IAAI,CAACO,QAAQ,CAACE,OAAd,EAAuB;MACrBH,UAAU,CAAC,IAAD,CAAV;IACD,CAHwB,CAIzB;IACA;;EACD,CANyB,EAMvB,EANuB,CAA1B;EAOA,IAAMI,OAAO,GAAGV,WAAW,CAAC;IAC1B,IAAIO,QAAQ,CAACE,OAAb,EAAsB;MACpBH,UAAU,CAAC,KAAD,CAAV;IACD,CAHyB,CAI1B;IACA;;EACD,CAN0B,EAMxB,EANwB,CAA3B;EAQA,IAAMK,MAAM,GAAGX,WAAW,CAAC;IACzBM,UAAU,CAAC,UAACM,WAAD,EAAY;MAAK,QAACA,WAAD;IAAY,CAA9B,CAAV;EACD,CAFyB,EAEvB,EAFuB,CAA1B;EAIA,OAAO,CAACP,OAAD,EAAUG,MAAV,EAAkBE,OAAlB,EAA2BC,MAA3B,EAAmCL,UAAnC,CAAP;AACD","names":["useCallback","useState","useRefCache","useToggle","defaultToggled","toggled","setToggled","previous","enable","current","disable","toggle","prevVisible"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\useToggle.ts"],"sourcesContent":["import type { Dispatch, SetStateAction } from \"react\";\nimport { useCallback, useState } from \"react\";\n\nimport { useRefCache } from \"./useRefCache\";\n\ntype Enable = () => void;\ntype Disable = () => void;\ntype Toggle = () => void;\ntype SetToggle = Dispatch<SetStateAction<boolean>>;\n\ntype ReturnValue = [boolean, Enable, Disable, Toggle, SetToggle];\n\n/**\n * This hooks provides an easy way to toggle a boolean flag for React\n * components.  The main use case for this will be toggling the visibility of\n * something. All the provided actions are guaranteed to never change.\n *\n * @param defaultToggled - Boolean if the visibility should be enabled first\n * render.\n * @returns an array containing the toggled state, an enable function, a disable\n * function, a toggle function, and then a manual set toggle function.\n */\nexport function useToggle(\n  defaultToggled: boolean | (() => boolean)\n): ReturnValue {\n  const [toggled, setToggled] = useState(defaultToggled);\n  const previous = useRefCache(toggled);\n\n  const enable = useCallback(() => {\n    if (!previous.current) {\n      setToggled(true);\n    }\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const disable = useCallback(() => {\n    if (previous.current) {\n      setToggled(false);\n    }\n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const toggle = useCallback(() => {\n    setToggled((prevVisible) => !prevVisible);\n  }, []);\n\n  return [toggled, enable, disable, toggle, setToggled];\n}\n"]},"metadata":{},"sourceType":"module"}