{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { CSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\nimport { DEFAULT_OVERLAY_TIMEOUT, DEFAULT_OVERLAY_CLASSNAMES } from \"./constants\";\nvar block = bem(\"rmd-overlay\");\n/**\n * The `Overlay` component is a simple component used to render a full page\n * overlay in the page with an enter and exit animation. If there are overflow\n * issues or you need to portal the overlay to a different area within your app,\n * you should use the `OverlayPortal` component instead.\n */\n\nexport var Overlay = forwardRef(function Overlay(_a, nodeRef) {\n  var className = _a.className,\n      visible = _a.visible,\n      _b = _a.hidden,\n      hidden = _b === void 0 ? false : _b,\n      _c = _a.clickable,\n      clickable = _c === void 0 ? true : _c,\n      _d = _a.timeout,\n      timeout = _d === void 0 ? DEFAULT_OVERLAY_TIMEOUT : _d,\n      _e = _a.classNames,\n      classNames = _e === void 0 ? DEFAULT_OVERLAY_CLASSNAMES : _e,\n      children = _a.children,\n      _f = _a.temporary,\n      temporary = _f === void 0 ? true : _f,\n      onRequestClose = _a.onRequestClose,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited,\n      portal = _a.portal,\n      portalInto = _a.portalInto,\n      portalIntoId = _a.portalIntoId,\n      _g = _a.tabIndex,\n      tabIndex = _g === void 0 ? -1 : _g,\n      onClick = _a.onClick,\n      props = __rest(_a, [\"className\", \"visible\", \"hidden\", \"clickable\", \"timeout\", \"classNames\", \"children\", \"temporary\", \"onRequestClose\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"portal\", \"portalInto\", \"portalIntoId\", \"tabIndex\", \"onClick\"]);\n\n  return _jsx(ConditionalPortal, __assign({\n    portal: portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: _jsx(CSSTransition, __assign({\n      appear: true,\n      nodeRef: nodeRef,\n      transitionIn: visible,\n      classNames: hidden ? \"\" : classNames,\n      timeout: hidden ? 0 : timeout,\n      temporary: temporary,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: onExited\n    }, {\n      children: _jsx(\"span\", __assign({}, props, {\n        className: cn(block({\n          visible: visible,\n          clickable: clickable\n        }), className),\n        onClick: function (event) {\n          onClick === null || onClick === void 0 ? void 0 : onClick(event);\n\n          if (event.isPropagationStopped()) {\n            return;\n          }\n\n          onRequestClose();\n        },\n        tabIndex: tabIndex\n      }, {\n        children: children\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,SACEC,uBADF,EAEEC,0BAFF,QAGO,aAHP;AAsCA,IAAMC,KAAK,GAAGH,GAAG,CAAC,aAAD,CAAjB;AAEA;;;;;;;AAMA,OAAO,IAAMI,OAAO,GAAGR,UAAU,CAC/B,SAASQ,OAAT,CACEC,EADF,EAwBEC,OAxBF,EAwBS;EAtBL,aAAS,eAAT;EAAA,IACAC,OAAO,aADP;EAAA,IAEAC,cAFA;EAAA,IAEAC,MAAM,mBAAG,KAAH,GAAQD,EAFd;EAAA,IAGAE,iBAHA;EAAA,IAGAC,SAAS,mBAAG,IAAH,GAAOD,EAHhB;EAAA,IAIAE,eAJA;EAAA,IAIAC,OAAO,mBAAGZ,uBAAH,GAA0BW,EAJjC;EAAA,IAKAE,kBALA;EAAA,IAKAC,UAAU,mBAAGb,0BAAH,GAA6BY,EALvC;EAAA,IAMAE,QAAQ,cANR;EAAA,IAOAC,iBAPA;EAAA,IAOAC,SAAS,mBAAG,IAAH,GAAOD,EAPhB;EAAA,IAQAE,cAAc,oBARd;EAAA,IASAC,OAAO,aATP;EAAA,IAUAC,UAAU,gBAVV;EAAA,IAWAC,SAAS,eAXT;EAAA,IAYAC,MAAM,YAZN;EAAA,IAaAC,SAAS,eAbT;EAAA,IAcAC,QAAQ,cAdR;EAAA,IAeAC,MAAM,YAfN;EAAA,IAgBAC,UAAU,gBAhBV;EAAA,IAiBAC,YAAY,kBAjBZ;EAAA,IAkBAC,gBAlBA;EAAA,IAkBAC,QAAQ,mBAAG,CAAC,CAAJ,GAAKD,EAlBb;EAAA,IAmBAE,OAAO,aAnBP;EAAA,IAoBGC,KAAK,cArBV,2PAqBU,CApBR;;EAwBF,OACEC,KAACnC,iBAAD,EAAkBoC;IAChBR,MAAM,EAAEA,MADQ;IAEhBC,UAAU,EAAEA,UAFI;IAGhBC,YAAY,EAAEA;EAHE,GAGU;IAAAZ,UAE1BiB,KAAClC,aAAD,EAAcmC;MACZC,MAAM,MADM;MAEZ7B,OAAO,EAAEA,OAFG;MAGZ8B,YAAY,EAAE7B,OAHF;MAIZQ,UAAU,EAAEN,MAAM,GAAG,EAAH,GAAQM,UAJd;MAKZF,OAAO,EAAEJ,MAAM,GAAG,CAAH,GAAOI,OALV;MAMZK,SAAS,EAAEA,SANC;MAOZE,OAAO,EAAEA,OAPG;MAQZC,UAAU,EAAEA,UARA;MASZC,SAAS,EAAEA,SATC;MAUZC,MAAM,EAAEA,MAVI;MAWZC,SAAS,EAAEA,SAXC;MAYZC,QAAQ,EAAEA;IAZE,GAYM;MAAAT,UAElBiB,0BACMD,KADN,EACW;QACTK,SAAS,EAAExC,EAAE,CACXM,KAAK,CAAC;UACJI,OAAO,SADH;UAEJI,SAAS;QAFL,CAAD,CADM,EAKX0B,SALW,CADJ;QAQTN,OAAO,EAAE,UAACO,KAAD,EAAM;UACbP,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAGO,KAAH,CAAP;;UACA,IAAIA,KAAK,CAACC,oBAAN,EAAJ,EAAkC;YAChC;UACD;;UAEDpB,cAAc;QACf,CAfQ;QAgBTW,QAAQ,EAAEA;MAhBD,CADX,EAiBoB;QAAAd,UAEjBA;MAFiB,CAjBpB;IAFkB,CAZN,CAAd;EAF0B,CAHV,CAAlB,CADF;AA4CD,CAvE8B,CAA1B","names":["forwardRef","cn","ConditionalPortal","CSSTransition","bem","DEFAULT_OVERLAY_TIMEOUT","DEFAULT_OVERLAY_CLASSNAMES","block","Overlay","_a","nodeRef","visible","_b","hidden","_c","clickable","_d","timeout","_e","classNames","children","_f","temporary","onRequestClose","onEnter","onEntering","onEntered","onExit","onExiting","onExited","portal","portalInto","portalIntoId","_g","tabIndex","onClick","props","_jsx","__assign","appear","transitionIn","className","event","isPropagationStopped"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\overlay\\src\\Overlay.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */\nimport type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport type { CSSTransitionComponentProps } from \"@react-md/transition\";\nimport { CSSTransition } from \"@react-md/transition\";\nimport { bem } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_OVERLAY_TIMEOUT,\n  DEFAULT_OVERLAY_CLASSNAMES,\n} from \"./constants\";\n\nexport interface OverlayProps\n  extends HTMLAttributes<HTMLSpanElement>,\n    CSSTransitionComponentProps,\n    RenderConditionalPortalProps {\n  /**\n   * Boolean if the overlay is currently visible. When this prop changes, the\n   * overlay will enter/exit with an opacity transition.\n   */\n  visible: boolean;\n\n  /**\n   * A function that should change the `visible` prop to `false`. This is used\n   * so that clicking the overlay can hide the overlay.\n   */\n  onRequestClose(): void;\n\n  /**\n   * Boolean if the overlay should still be \"hidden\" from the user while\n   * visible. This will just make it so the opacity stays at 0. This is really\n   * just helpful if you'd like to create a simple close on outside click\n   * feature since you can hook into the `onRequestClose` prop since the overlay\n   * will be clicked.\n   */\n  hidden?: boolean;\n\n  /**\n   * Boolean if the overlay should gain the pointer cursor while it's visible.\n   * You normally want this enabled by default except when used as a modal's\n   * overlay.\n   */\n  clickable?: boolean;\n}\n\nconst block = bem(\"rmd-overlay\");\n\n/**\n * The `Overlay` component is a simple component used to render a full page\n * overlay in the page with an enter and exit animation. If there are overflow\n * issues or you need to portal the overlay to a different area within your app,\n * you should use the `OverlayPortal` component instead.\n */\nexport const Overlay = forwardRef<HTMLDivElement, OverlayProps>(\n  function Overlay(\n    {\n      className,\n      visible,\n      hidden = false,\n      clickable = true,\n      timeout = DEFAULT_OVERLAY_TIMEOUT,\n      classNames = DEFAULT_OVERLAY_CLASSNAMES,\n      children,\n      temporary = true,\n      onRequestClose,\n      onEnter,\n      onEntering,\n      onEntered,\n      onExit,\n      onExiting,\n      onExited,\n      portal,\n      portalInto,\n      portalIntoId,\n      tabIndex = -1,\n      onClick,\n      ...props\n    },\n    nodeRef\n  ) {\n    return (\n      <ConditionalPortal\n        portal={portal}\n        portalInto={portalInto}\n        portalIntoId={portalIntoId}\n      >\n        <CSSTransition\n          appear\n          nodeRef={nodeRef}\n          transitionIn={visible}\n          classNames={hidden ? \"\" : classNames}\n          timeout={hidden ? 0 : timeout}\n          temporary={temporary}\n          onEnter={onEnter}\n          onEntering={onEntering}\n          onEntered={onEntered}\n          onExit={onExit}\n          onExiting={onExiting}\n          onExited={onExited}\n        >\n          <span\n            {...props}\n            className={cn(\n              block({\n                visible,\n                clickable,\n              }),\n              className\n            )}\n            onClick={(event) => {\n              onClick?.(event);\n              if (event.isPropagationStopped()) {\n                return;\n              }\n\n              onRequestClose();\n            }}\n            tabIndex={tabIndex}\n          >\n            {children}\n          </span>\n        </CSSTransition>\n      </ConditionalPortal>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}