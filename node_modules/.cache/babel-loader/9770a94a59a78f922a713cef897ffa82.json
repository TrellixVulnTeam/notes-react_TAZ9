{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useTableConfig } from \"./config\";\nvar block = bem(\"rmd-tr\");\n/**\n * Creates a `<tr>` element with some general styles that are inherited from the\n * base table configuration.\n */\n\nexport var TableRow = forwardRef(function TableRow(_a, ref) {\n  var className = _a.className,\n      propDisableHover = _a.disableHover,\n      propDisableBorders = _a.disableBorders,\n      children = _a.children,\n      _b = _a.selected,\n      selected = _b === void 0 ? false : _b,\n      _c = _a.clickable,\n      clickable = _c === void 0 ? false : _c,\n      props = __rest(_a, [\"className\", \"disableHover\", \"disableBorders\", \"children\", \"selected\", \"clickable\"]);\n\n  var _d = useTableConfig({\n    disableHover: propDisableHover,\n    disableBorders: propDisableBorders\n  }),\n      disableHover = _d.disableHover,\n      disableBorders = _d.disableBorders;\n\n  return _jsx(\"tr\", __assign({}, props, {\n    ref: ref,\n    className: cn(block({\n      bordered: !disableBorders,\n      hoverable: !disableHover,\n      clickable: clickable,\n      selected: selected,\n      \"selected-hoverable\": selected && !disableHover\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAGA,SAASC,cAAT,QAA+B,UAA/B;AAkBA,IAAMC,KAAK,GAAGF,GAAG,CAAC,QAAD,CAAjB;AAEA;;;;;AAIA,OAAO,IAAMG,QAAQ,GAAGL,UAAU,CAChC,SAASK,QAAT,CACEC,EADF,EAUEC,GAVF,EAUK;EARD,aAAS,eAAT;EAAA,IACcC,gBAAgB,kBAD9B;EAAA,IAEgBC,kBAAkB,oBAFlC;EAAA,IAGAC,QAAQ,cAHR;EAAA,IAIAC,gBAJA;EAAA,IAIAC,QAAQ,mBAAG,KAAH,GAAQD,EAJhB;EAAA,IAKAE,iBALA;EAAA,IAKAC,SAAS,mBAAG,KAAH,GAAQD,EALjB;EAAA,IAMGE,KAAK,cAPV,oFAOU,CANR;;EAUI,SAAmCZ,cAAc,CAAC;IACtDa,YAAY,EAAER,gBADwC;IAEtDS,cAAc,EAAER;EAFsC,CAAD,CAAjD;EAAA,IAAEO,YAAY,kBAAd;EAAA,IAAgBC,cAAc,oBAA9B;;EAKN,OACEC,wBACMH,KADN,EACW;IACTR,GAAG,EAAEA,GADI;IAETY,SAAS,EAAElB,EAAE,CACXG,KAAK,CAAC;MACJgB,QAAQ,EAAE,CAACH,cADP;MAEJI,SAAS,EAAE,CAACL,YAFR;MAGJF,SAAS,WAHL;MAIJF,QAAQ,UAJJ;MAKJ,sBAAsBA,QAAQ,IAAI,CAACI;IAL/B,CAAD,CADM,EAQXG,SARW;EAFJ,CADX,EAYG;IAAAT,UAEAA;EAFA,CAZH,EADF;AAkBD,CApC+B,CAA3B","names":["forwardRef","cn","bem","useTableConfig","block","TableRow","_a","ref","propDisableHover","propDisableBorders","children","_b","selected","_c","clickable","props","disableHover","disableBorders","_jsx","className","bordered","hoverable"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\table\\src\\TableRow.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TableRowConfiguration } from \"./config\";\nimport { useTableConfig } from \"./config\";\n\nexport interface TableRowProps\n  extends HTMLAttributes<HTMLTableRowElement>,\n    TableRowConfiguration {\n  /**\n   * Boolean if the current row has been selected and should apply the selected\n   * background-color.\n   */\n  selected?: boolean;\n\n  /**\n   * Boolean if the row should be clickable and update the cursor while hovered\n   * to be a pointer.\n   */\n  clickable?: boolean;\n}\n\nconst block = bem(\"rmd-tr\");\n\n/**\n * Creates a `<tr>` element with some general styles that are inherited from the\n * base table configuration.\n */\nexport const TableRow = forwardRef<HTMLTableRowElement, TableRowProps>(\n  function TableRow(\n    {\n      className,\n      disableHover: propDisableHover,\n      disableBorders: propDisableBorders,\n      children,\n      selected = false,\n      clickable = false,\n      ...props\n    },\n    ref\n  ) {\n    const { disableHover, disableBorders } = useTableConfig({\n      disableHover: propDisableHover,\n      disableBorders: propDisableBorders,\n    });\n\n    return (\n      <tr\n        {...props}\n        ref={ref}\n        className={cn(\n          block({\n            bordered: !disableBorders,\n            hoverable: !disableHover,\n            clickable,\n            selected,\n            \"selected-hoverable\": selected && !disableHover,\n          }),\n          className\n        )}\n      >\n        {children}\n      </tr>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}