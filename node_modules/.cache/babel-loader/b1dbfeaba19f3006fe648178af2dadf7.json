{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { Label } from \"../label/Label\";\nimport { ToggleContainer } from \"./ToggleContainer\";\nimport { SwitchTrack } from \"./SwitchTrack\";\nexport var Switch = forwardRef(function Switch(_a, ref) {\n  var style = _a.style,\n      className = _a.className,\n      ballStyle = _a.ballStyle,\n      ballClassName = _a.ballClassName,\n      trackStyle = _a.trackStyle,\n      trackClassName = _a.trackClassName,\n      label = _a.label,\n      labelStyle = _a.labelStyle,\n      labelClassName = _a.labelClassName,\n      labelDisabled = _a.labelDisabled,\n      _b = _a.error,\n      error = _b === void 0 ? false : _b,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      _d = _a.stacked,\n      stacked = _d === void 0 ? false : _d,\n      _e = _a.inline,\n      inline = _e === void 0 ? false : _e,\n      _f = _a.iconAfter,\n      iconAfter = _f === void 0 ? false : _f,\n      children = _a.children,\n      props = __rest(_a, [\"style\", \"className\", \"ballStyle\", \"ballClassName\", \"trackStyle\", \"trackClassName\", \"label\", \"labelStyle\", \"labelClassName\", \"labelDisabled\", \"error\", \"disabled\", \"stacked\", \"inline\", \"iconAfter\", \"children\"]);\n\n  var id = props.id;\n  return _jsx(ToggleContainer, __assign({\n    style: style,\n    className: cn(\"rmd-switch-container\", className),\n    inline: inline,\n    stacked: stacked\n  }, {\n    children: _jsx(TextIconSpacing, __assign({\n      icon: _jsx(Label, __assign({\n        style: labelStyle,\n        className: labelClassName,\n        htmlFor: id,\n        error: error,\n        disabled: labelDisabled !== null && labelDisabled !== void 0 ? labelDisabled : disabled\n      }, {\n        children: label\n      })),\n      iconAfter: !iconAfter\n    }, {\n      children: _jsx(SwitchTrack, __assign({}, props, {\n        ref: ref,\n        style: trackStyle,\n        className: trackClassName,\n        disabled: disabled,\n        ballStyle: ballStyle,\n        ballClassName: ballClassName\n      }, {\n        children: children\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,WAAT,QAA4B,eAA5B;AAwFA,OAAO,IAAMC,MAAM,GAAGN,UAAU,CAAgC,SAASM,MAAT,CAC9DC,EAD8D,EAoB9DC,GApB8D,EAoB3D;EAlBD,SAAK,WAAL;EAAA,IACAC,SAAS,eADT;EAAA,IAEAC,SAAS,eAFT;EAAA,IAGAC,aAAa,mBAHb;EAAA,IAIAC,UAAU,gBAJV;EAAA,IAKAC,cAAc,oBALd;EAAA,IAMAC,KAAK,WANL;EAAA,IAOAC,UAAU,gBAPV;EAAA,IAQAC,cAAc,oBARd;EAAA,IASAC,aAAa,mBATb;EAAA,IAUAC,aAVA;EAAA,IAUAC,KAAK,mBAAG,KAAH,GAAQD,EAVb;EAAA,IAWAE,gBAXA;EAAA,IAWAC,QAAQ,mBAAG,KAAH,GAAQD,EAXhB;EAAA,IAYAE,eAZA;EAAA,IAYAC,OAAO,mBAAG,KAAH,GAAQD,EAZf;EAAA,IAaAE,cAbA;EAAA,IAaAC,MAAM,mBAAG,KAAH,GAAQD,EAbd;EAAA,IAcAE,iBAdA;EAAA,IAcAC,SAAS,mBAAG,KAAH,GAAQD,EAdjB;EAAA,IAeAE,QAAQ,cAfR;EAAA,IAgBGC,KAAK,cAjBV,iNAiBU,CAhBR;;EAoBM,MAAE,GAAKA,KAAK,GAAZ;EAER,OACEC,KAAC1B,eAAD,EAAgB2B;IACdC,KAAK,EAAEA,KADO;IAEdvB,SAAS,EAAER,EAAE,CAAC,sBAAD,EAAyBQ,SAAzB,CAFC;IAGdgB,MAAM,EAAEA,MAHM;IAIdF,OAAO,EAAEA;EAJK,GAIE;IAAAK,UAEhBE,KAAC5B,eAAD,EAAgB6B;MACdE,IAAI,EACFH,KAAC3B,KAAD,EAAM4B;QACJC,KAAK,EAAEjB,UADH;QAEJN,SAAS,EAAEO,cAFP;QAGJkB,OAAO,EAAEC,EAHL;QAIJhB,KAAK,EAAEA,KAJH;QAKJE,QAAQ,EAAEJ,aAAa,SAAb,iBAAa,WAAb,mBAAiBI;MALvB,GAK+B;QAAAO,UAElCd;MAFkC,CAL/B,CAAN,CAFY;MAYda,SAAS,EAAE,CAACA;IAZE,GAYO;MAAAC,UAErBE,KAACzB,WAAD,EAAY0B,aACNF,KADM,EACD;QACTrB,GAAG,EAAEA,GADI;QAETwB,KAAK,EAAEpB,UAFE;QAGTH,SAAS,EAAEI,cAHF;QAITQ,QAAQ,EAAEA,QAJD;QAKTX,SAAS,EAAEA,SALF;QAMTC,aAAa,EAAEA;MANN,CADC,EAOkB;QAAAiB,UAE3BA;MAF2B,CAPlB,CAAZ;IAFqB,CAZP,CAAhB;EAFgB,CAJF,CAAhB,CADF;AAmCD,CA3D+B,CAAzB","names":["forwardRef","cn","TextIconSpacing","Label","ToggleContainer","SwitchTrack","Switch","_a","ref","className","ballStyle","ballClassName","trackStyle","trackClassName","label","labelStyle","labelClassName","labelDisabled","_b","error","_c","disabled","_d","stacked","_e","inline","_f","iconAfter","children","props","_jsx","__assign","style","icon","htmlFor","id"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\toggle\\Switch.tsx"],"sourcesContent":["import type { CSSProperties, InputHTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\n\nimport { Label } from \"../label/Label\";\nimport { ToggleContainer } from \"./ToggleContainer\";\nimport { SwitchTrack } from \"./SwitchTrack\";\n\nexport interface SwitchProps\n  extends Omit<InputHTMLAttributes<HTMLInputElement>, \"type\" | \"readOnly\"> {\n  /**\n   * The id for the radio or checkbox. This is required for a11y and will be\n   * used as the `for` attribute if the `label` prop is provided.\n   */\n  id: string;\n\n  /**\n   * An optional style to apply to the switch's ball.\n   */\n  ballStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the switch's ball.\n   */\n  ballClassName?: string;\n\n  /**\n   * An optional style to apply to the switch's track (this is the\n   * `<input type=\"checkbox\">` used behind the scenes).\n   */\n  trackStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the switch's track (this is the\n   * `<input type=\"checkbox\">` used behind the scenes).\n   */\n  trackClassName?: string;\n\n  /**\n   * Boolean if the input toggle is currently errored. This will update the\n   * label and the input to gain error colors.\n   */\n  error?: boolean;\n\n  /**\n   * Boolean if the container element should be rendered as `inline-flex`\n   * instead of `flex`.\n   */\n  inline?: boolean;\n\n  /**\n   * Boolean if the label should be stacked above/below the input toggle instead\n   * of inline.\n   */\n  stacked?: boolean;\n\n  /**\n   * An optional label to display with the input. If this prop is omitted and\n   * you aren't adding a custom `<label>` anywhere else, you **should** apply an\n   * `aria-label` or `aria-labelledby` for a11y.\n   */\n  label?: ReactNode;\n\n  /**\n   * An optional style to apply to the `<label>` when the `label` prop is used.\n   */\n  labelStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the `<label>` when the `label` prop is\n   * used.\n   */\n  labelClassName?: string;\n\n  /**\n   * An optional boolean if the label should gain the disabled style. When this\n   * is `undefined`, the `disabled` prop will be used instead. This is really\n   * just useful when you want to disable the switch from being toggled while\n   * some async action is being called, but not changing styles during the wait.\n   */\n  labelDisabled?: boolean;\n\n  /**\n   * Boolean if the input toggle should appear after the label instead of\n   * before.\n   */\n  iconAfter?: boolean;\n\n  /**\n   * Any optional children that should be displayed within the switch's ball.\n   */\n  children?: ReactNode;\n}\n\nexport const Switch = forwardRef<HTMLInputElement, SwitchProps>(function Switch(\n  {\n    style,\n    className,\n    ballStyle,\n    ballClassName,\n    trackStyle,\n    trackClassName,\n    label,\n    labelStyle,\n    labelClassName,\n    labelDisabled,\n    error = false,\n    disabled = false,\n    stacked = false,\n    inline = false,\n    iconAfter = false,\n    children,\n    ...props\n  },\n  ref\n) {\n  const { id } = props;\n\n  return (\n    <ToggleContainer\n      style={style}\n      className={cn(\"rmd-switch-container\", className)}\n      inline={inline}\n      stacked={stacked}\n    >\n      <TextIconSpacing\n        icon={\n          <Label\n            style={labelStyle}\n            className={labelClassName}\n            htmlFor={id}\n            error={error}\n            disabled={labelDisabled ?? disabled}\n          >\n            {label}\n          </Label>\n        }\n        iconAfter={!iconAfter}\n      >\n        <SwitchTrack\n          {...props}\n          ref={ref}\n          style={trackStyle}\n          className={trackClassName}\n          disabled={disabled}\n          ballStyle={ballStyle}\n          ballClassName={ballClassName}\n        >\n          {children}\n        </SwitchTrack>\n      </TextIconSpacing>\n    </ToggleContainer>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}