{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { TreeItem } from \"./TreeItem\";\n\nfunction isElementType(contentComponent) {\n  return typeof contentComponent !== \"undefined\";\n}\n/**\n * A \"reasonable\" default implementation for rendering a tree item that extracts\n * the most used ListItem props and passes them down to the `TreeItem`.\n *\n * This is actually exported from this package so it can be used along with a\n * custom renderer for all items that have `isCustom` enabled.\n *\n * ```tsx\n * const itemRenderer: TreeItemRenderer<MyTreeItem> = (\n *   itemProps,\n *   item,\n *   treeProps\n * ) => {\n *   const { key } = itemProps;\n *   const { isCustom } = item;\n *   if (isCustom) {\n *     return <MyFancyNonTreeItem item={item} key={key} />\n *   }\n *\n *   return defaultTreeItemRenderer(itemProps, item, treeProps);\n * }\n * ```\n *\n * @param itemProps - The provided tree item props that should be passed down\n * for keyboard functionality, accessibility, and a `key` for the item.\n * @param item - The item itself. This is used to extract any of the common\n * ListItemChildren props.\n * @param treeProps - The props for the Tree this item is being rendered in.\n * This is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,\n * `getItemLabel`, and `getItemProps` can be used to render the TreeItem\n * itself.\n * @returns a `TreeItem` or a custom `ReactElement`\n */\n\n\nexport function defaultTreeItemRenderer(itemProps, item, treeProps) {\n  var treeItem = item;\n  var focused = itemProps.focused,\n      selected = itemProps.selected,\n      expanded = itemProps.expanded;\n  var expanderLeft = treeProps.expanderLeft,\n      expanderIcon = treeProps.expanderIcon,\n      labelKey = treeProps.labelKey,\n      getItemLabel = treeProps.getItemLabel,\n      getItemProps = treeProps.getItemProps,\n      linkComponent = treeProps.linkComponent;\n  var leftAddon = treeItem.leftAddon,\n      leftAddonType = treeItem.leftAddonType,\n      leftAddonPosition = treeItem.leftAddonPosition,\n      rightAddon = treeItem.rightAddon,\n      rightAddonType = treeItem.rightAddonType,\n      rightAddonPosition = treeItem.rightAddonPosition,\n      as = treeItem.as,\n      to = treeItem.to,\n      href = treeItem.href;\n  var isLink;\n  var readOnly;\n  var disabled;\n  var className;\n  var liClassName;\n\n  if (typeof treeItem.isLink === \"boolean\") {\n    isLink = treeItem.isLink;\n  }\n\n  if (typeof treeItem.readOnly === \"boolean\") {\n    readOnly = treeItem.readOnly;\n  }\n\n  if (typeof treeItem.disabled === \"boolean\") {\n    disabled = treeItem.disabled;\n  }\n\n  if (typeof treeItem.className === \"string\") {\n    className = treeItem.className;\n  }\n\n  if (typeof treeItem.liClassName === \"string\") {\n    liClassName = treeItem.liClassName;\n  }\n\n  var overrides = getItemProps(__assign(__assign({}, treeItem), {\n    focused: focused,\n    selected: selected,\n    expanded: expanded\n  }));\n  var children = overrides && overrides.children || undefined;\n\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(treeItem, labelKey);\n  }\n\n  var contentComponent;\n\n  if (isElementType(treeItem.contentComponent)) {\n    contentComponent = treeItem.contentComponent;\n  }\n\n  if (isLink !== false && (to || href || isLink)) {\n    contentComponent = contentComponent || linkComponent;\n  }\n\n  return _jsx(TreeItem, __assign({}, itemProps, {\n    as: as,\n    to: to,\n    href: href,\n    isLink: isLink,\n    contentComponent: contentComponent,\n    readOnly: readOnly,\n    disabled: disabled,\n    leftAddon: leftAddon,\n    leftAddonType: leftAddonType,\n    leftAddonPosition: leftAddonPosition,\n    rightAddon: rightAddon,\n    rightAddonType: rightAddonType,\n    rightAddonPosition: rightAddonPosition,\n    expanderLeft: expanderLeft,\n    expanderIcon: expanderIcon,\n    className: className,\n    liClassName: liClassName\n  }, overrides, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":"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","names":["TreeItem","isElementType","contentComponent","defaultTreeItemRenderer","itemProps","item","treeProps","treeItem","selected","expanded","expanderIcon","labelKey","getItemLabel","getItemProps","linkComponent","leftAddonType","leftAddonPosition","rightAddon","rightAddonType","rightAddonPosition","as","to","href","isLink","readOnly","disabled","className","liClassName","overrides","focused","children","undefined","_jsx","__assign","leftAddon","expanderLeft"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tree\\src\\defaultTreeItemRenderer.tsx"],"sourcesContent":["import type { ElementType, ReactElement, ReactNode } from \"react\";\n\nimport { TreeItem } from \"./TreeItem\";\nimport type {\n  BaseTreeItem,\n  ProvidedTreeItemProps,\n  ProvidedTreeProps,\n  UnknownTreeItem,\n} from \"./types\";\n\nfunction isElementType(\n  contentComponent: unknown\n): contentComponent is ElementType {\n  return typeof contentComponent !== \"undefined\";\n}\n\n/**\n * A \"reasonable\" default implementation for rendering a tree item that extracts\n * the most used ListItem props and passes them down to the `TreeItem`.\n *\n * This is actually exported from this package so it can be used along with a\n * custom renderer for all items that have `isCustom` enabled.\n *\n * ```tsx\n * const itemRenderer: TreeItemRenderer<MyTreeItem> = (\n *   itemProps,\n *   item,\n *   treeProps\n * ) => {\n *   const { key } = itemProps;\n *   const { isCustom } = item;\n *   if (isCustom) {\n *     return <MyFancyNonTreeItem item={item} key={key} />\n *   }\n *\n *   return defaultTreeItemRenderer(itemProps, item, treeProps);\n * }\n * ```\n *\n * @param itemProps - The provided tree item props that should be passed down\n * for keyboard functionality, accessibility, and a `key` for the item.\n * @param item - The item itself. This is used to extract any of the common\n * ListItemChildren props.\n * @param treeProps - The props for the Tree this item is being rendered in.\n * This is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,\n * `getItemLabel`, and `getItemProps` can be used to render the TreeItem\n * itself.\n * @returns a `TreeItem` or a custom `ReactElement`\n */\nexport function defaultTreeItemRenderer(\n  itemProps: ProvidedTreeItemProps,\n  item: BaseTreeItem & { visibleIndex: number },\n  treeProps: ProvidedTreeProps\n): ReactElement {\n  const treeItem = item as UnknownTreeItem & { visibleIndex: number };\n  const { focused, selected, expanded } = itemProps;\n  const {\n    expanderLeft,\n    expanderIcon,\n    labelKey,\n    getItemLabel,\n    getItemProps,\n    linkComponent,\n  } = treeProps;\n  const {\n    leftAddon,\n    leftAddonType,\n    leftAddonPosition,\n    rightAddon,\n    rightAddonType,\n    rightAddonPosition,\n    as,\n    to,\n    href,\n  } = treeItem;\n  let isLink: boolean | undefined;\n  let readOnly: boolean | undefined;\n  let disabled: boolean | undefined;\n  let className: string | undefined;\n  let liClassName: string | undefined;\n  if (typeof treeItem.isLink === \"boolean\") {\n    ({ isLink } = treeItem);\n  }\n\n  if (typeof treeItem.readOnly === \"boolean\") {\n    ({ readOnly } = treeItem);\n  }\n\n  if (typeof treeItem.disabled === \"boolean\") {\n    ({ disabled } = treeItem);\n  }\n\n  if (typeof treeItem.className === \"string\") {\n    ({ className } = treeItem);\n  }\n\n  if (typeof treeItem.liClassName === \"string\") {\n    ({ liClassName } = treeItem);\n  }\n\n  const overrides = getItemProps({\n    ...treeItem,\n    focused,\n    selected,\n    expanded,\n  });\n\n  let children: ReactNode = (overrides && overrides.children) || undefined;\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(treeItem, labelKey);\n  }\n\n  let contentComponent: ElementType | undefined;\n  if (isElementType(treeItem.contentComponent)) {\n    ({ contentComponent } = treeItem);\n  }\n\n  if (isLink !== false && (to || href || isLink)) {\n    contentComponent = contentComponent || linkComponent;\n  }\n\n  return (\n    <TreeItem\n      {...itemProps}\n      as={as}\n      to={to}\n      href={href}\n      isLink={isLink}\n      contentComponent={contentComponent}\n      readOnly={readOnly}\n      disabled={disabled}\n      leftAddon={leftAddon}\n      leftAddonType={leftAddonType}\n      leftAddonPosition={leftAddonPosition}\n      rightAddon={rightAddon}\n      rightAddonType={rightAddonType}\n      rightAddonPosition={rightAddonPosition}\n      expanderLeft={expanderLeft}\n      expanderIcon={expanderIcon}\n      className={className}\n      liClassName={liClassName}\n      {...overrides}\n    >\n      {children}\n    </TreeItem>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}