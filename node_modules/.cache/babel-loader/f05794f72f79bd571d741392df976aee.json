{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar styles = bem(\"rmd-switch\");\n/**\n * This is most likely an internal only component that is used to render the\n * switch element either as a checkbox or in the `MenuItemSwitch` component.\n *\n * @remarks \\@since 2.8.0\n */\n\nexport var SwitchTrack = forwardRef(function SwitchTrack(_a, ref) {\n  var id = _a.id,\n      _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      className = _a.className,\n      ballStyle = _a.ballStyle,\n      ballClassName = _a.ballClassName,\n      containerProps = _a.containerProps,\n      children = _a.children,\n      props = __rest(_a, [\"id\", \"disabled\", \"className\", \"ballStyle\", \"ballClassName\", \"containerProps\", \"children\"]);\n\n  var _c = props.checked,\n      checked = _c === void 0 ? false : _c;\n  return _jsxs(\"span\", __assign({}, containerProps, {\n    className: cn(styles(), className, containerProps === null || containerProps === void 0 ? void 0 : containerProps.className)\n  }, {\n    children: [id && _jsxs(_Fragment, {\n      children: [_jsx(\"input\", __assign({}, props, {\n        id: id,\n        ref: ref,\n        type: \"checkbox\",\n        className: cn(styles(\"input\")),\n        disabled: disabled\n      })), _jsx(\"label\", __assign({\n        htmlFor: id,\n        \"aria-hidden\": true,\n        style: ballStyle,\n        className: cn(styles(\"ball\"), ballClassName)\n      }, {\n        children: children\n      }))]\n    }), !id && _jsx(\"span\", {\n      style: ballStyle,\n      className: cn(styles(\"ball\", {\n        checked: checked\n      }), ballClassName)\n    })]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,GAAT,QAAoB,iBAApB;AAEA,IAAMC,MAAM,GAAGD,GAAG,CAAC,YAAD,CAAlB;AAmCA;;;;;;;AAMA,OAAO,IAAME,WAAW,GAAGJ,UAAU,CACnC,SAASI,WAAT,CACEC,EADF,EAWEC,GAXF,EAWK;EATD,MAAE,QAAF;EAAA,IACAC,gBADA;EAAA,IACAC,QAAQ,mBAAG,KAAH,GAAQD,EADhB;EAAA,IAEAE,SAAS,eAFT;EAAA,IAGAC,SAAS,eAHT;EAAA,IAIAC,aAAa,mBAJb;EAAA,IAKAC,cAAc,oBALd;EAAA,IAMAC,QAAQ,cANR;EAAA,IAOGC,KAAK,cARV,2FAQU,CAPR;;EAWM,SAAoBA,KAAK,QAAzB;EAAA,WAAO,mBAAG,KAAH,GAAQC,EAAf;EACR,OACEC,2BACMJ,cADN,EACoB;IAClBH,SAAS,EAAER,EAAE,CAACE,MAAM,EAAP,EAAWM,SAAX,EAAsBG,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEH,SAAtC;EADK,CADpB,EAE+D;IAAAI,WAE5DI,EAAE,IACDD;MAAAH,WACEK,2BACMJ,KADN,EACW;QACTG,EAAE,EAAEA,EADK;QAETX,GAAG,EAAEA,GAFI;QAGTa,IAAI,EAAC,UAHI;QAITV,SAAS,EAAER,EAAE,CAACE,MAAM,CAAC,OAAD,CAAP,CAJJ;QAKTK,QAAQ,EAAEA;MALD,CADX,EADF,EASEU;QACEE,OAAO,EAAEH,EADX;QACa,mBADb;QAGEI,KAAK,EAAEX,SAHT;QAIED,SAAS,EAAER,EAAE,CAACE,MAAM,CAAC,MAAD,CAAP,EAAiBQ,aAAjB;MAJf,GAI8C;QAAAE,UAE3CA;MAF2C,CAJ9C,EATF;IAAA,EAH2D,EAsB5D,CAACI,EAAD,IACCC;MACEG,KAAK,EAAEX,SADT;MAEED,SAAS,EAAER,EAAE,CAACE,MAAM,CAAC,MAAD,EAAS;QAAEmB,OAAO;MAAT,CAAT,CAAP,EAA8BX,aAA9B;IAFf,EAvB2D;EAAA,CAF/D,EADF;AAiCD,CAhDkC,CAA9B","names":["forwardRef","cn","bem","styles","SwitchTrack","_a","ref","_b","disabled","className","ballStyle","ballClassName","containerProps","children","props","_c","_jsxs","id","_jsx","type","htmlFor","style","checked"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\toggle\\SwitchTrack.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, InputHTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { PropsWithRef } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\nconst styles = bem(\"rmd-switch\");\n\n/** @remarks \\@since 2.8.0 */\nexport interface SwitchTrackProps\n  extends InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * If an `id` is provided, the track will contain a checkbox input element and\n   * render the \"ball\" as a `<label>`. If the `id` is omitted, no input element\n   * will be rendered and the \"ball\" will be rendered as a `<span>`.\n   *\n   * Basically only omit the `id` if this is used in another accessible widget\n   * like `menuitemcheckbox`.\n   */\n  id?: string;\n\n  /**\n   * An optional style object to provide to the ball.\n   */\n  ballStyle?: CSSProperties;\n\n  /**\n   * An optional class name to provide to the ball.\n   */\n  ballClassName?: string;\n\n  /**\n   * Any additional props and optional ref to provide to the track itself since\n   * all the props are normally provided to the `<input>` element instead.\n   */\n  containerProps?: PropsWithRef<\n    HTMLAttributes<HTMLSpanElement>,\n    HTMLSpanElement\n  >;\n}\n\n/**\n * This is most likely an internal only component that is used to render the\n * switch element either as a checkbox or in the `MenuItemSwitch` component.\n *\n * @remarks \\@since 2.8.0\n */\nexport const SwitchTrack = forwardRef<HTMLInputElement, SwitchTrackProps>(\n  function SwitchTrack(\n    {\n      id,\n      disabled = false,\n      className,\n      ballStyle,\n      ballClassName,\n      containerProps,\n      children,\n      ...props\n    },\n    ref\n  ) {\n    const { checked = false } = props;\n    return (\n      <span\n        {...containerProps}\n        className={cn(styles(), className, containerProps?.className)}\n      >\n        {id && (\n          <>\n            <input\n              {...props}\n              id={id}\n              ref={ref}\n              type=\"checkbox\"\n              className={cn(styles(\"input\"))}\n              disabled={disabled}\n            />\n            <label\n              htmlFor={id}\n              aria-hidden\n              style={ballStyle}\n              className={cn(styles(\"ball\"), ballClassName)}\n            >\n              {children}\n            </label>\n          </>\n        )}\n        {!id && (\n          <span\n            style={ballStyle}\n            className={cn(styles(\"ball\", { checked }), ballClassName)}\n          />\n        )}\n      </span>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}