{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { FormMessage } from \"./FormMessage\";\n/**\n * A wrapper component that can be used to display a `TextField` related\n * component or `TextArea` along with the `FormMessage` component.\n *\n * @remarks \\@since 2.5.0\n */\n\nexport var FormMessageContainer = forwardRef(function FormMessageContainer(_a, ref) {\n  var className = _a.className,\n      children = _a.children,\n      messageProps = _a.messageProps,\n      props = __rest(_a, [\"className\", \"children\", \"messageProps\"]);\n\n  if (!messageProps) {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n\n  return _jsxs(\"div\", __assign({}, props, {\n    ref: ref,\n    className: cn(\"rmd-field-message-container\", className)\n  }, {\n    children: [children, _jsx(FormMessage, __assign({}, messageProps))]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAIA,SAASC,WAAT,QAA4B,eAA5B;AA2CA;;;;;;;AAMA,OAAO,IAAMC,oBAAoB,GAAGH,UAAU,CAG5C,SAASG,oBAAT,CACAC,EADA,EAEAC,GAFA,EAEG;EADD,aAAS,eAAT;EAAA,IAAWC,QAAQ,cAAnB;EAAA,IAAqBC,YAAY,kBAAjC;EAAA,IAAsCC,KAAK,cAA7C,yCAA6C,CAA3C;;EAGF,IAAI,CAACD,YAAL,EAAmB;IACjB,OAAOE;MAAAH,UAAGA;IAAH,EAAP;EACD;;EAED,OACEI,0BACMF,KADN,EACW;IACTH,GAAG,EAAEA,GADI;IAETM,SAAS,EAAEV,EAAE,CAAC,6BAAD,EAAgCU,SAAhC;EAFJ,CADX,EAGyD;IAAAL,WAEtDA,QAFsD,EAGvDG,KAACP,WAAD,EAAYU,aAAKL,YAAL,CAAZ,CAHuD;EAAA,CAHzD,EADF;AAUD,CArB6C,CAAvC","names":["forwardRef","cn","FormMessage","FormMessageContainer","_a","ref","children","messageProps","props","_jsx","_jsxs","className","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\FormMessageContainer.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactElement } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\nimport type { FormMessageProps } from \"./FormMessage\";\nimport { FormMessage } from \"./FormMessage\";\n\ntype DivAttributes = HTMLAttributes<HTMLDivElement>;\ntype MessageProps = PropsWithRef<FormMessageProps, HTMLDivElement>;\ntype MessageContainerProps = PropsWithRef<DivAttributes, HTMLDivElement>;\n\n/**\n * This is a utility type that allows for a component to \"extend\" the\n * `FieldMessageContainer` component. This should really be used internally with\n * any `TextField` or `TextArea` related components.\n *\n * @remarks \\@since 2.5.0\n */\nexport type FieldMessageContainerExtension<P> = P & {\n  /**\n   * If the extension doesn't actually want to render the `FormMessage`\n   * component, these props are optional. It kind of eliminates the whole\n   * purpose of this component though.\n   */\n  messageProps?: MessageProps;\n\n  /**\n   * Any props (and an optional ref) to provide to the `<div>` surrounding the\n   * children and `FormMessage` component.\n   *\n   * Note: This will not be used if the `messageProps` are not provided since\n   * only the `children` will be returned without the container.\n   */\n  messageContainerProps?: MessageContainerProps;\n};\n\n/**\n * @remarks \\@since 2.5.0\n */\nexport interface FormMessageContainerProps extends DivAttributes {\n  /**\n   * If the extension doesn't actually want to render the `FormMessage`\n   * component, these props are optional. It kind of eliminates the whole\n   * purpose of this component though.\n   */\n  messageProps?: MessageProps;\n}\n\n/**\n * A wrapper component that can be used to display a `TextField` related\n * component or `TextArea` along with the `FormMessage` component.\n *\n * @remarks \\@since 2.5.0\n */\nexport const FormMessageContainer = forwardRef<\n  HTMLDivElement,\n  FormMessageContainerProps\n>(function FormMessageContainer(\n  { className, children, messageProps, ...props },\n  ref\n): ReactElement {\n  if (!messageProps) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div\n      {...props}\n      ref={ref}\n      className={cn(\"rmd-field-message-container\", className)}\n    >\n      {children}\n      <FormMessage {...messageProps} />\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}