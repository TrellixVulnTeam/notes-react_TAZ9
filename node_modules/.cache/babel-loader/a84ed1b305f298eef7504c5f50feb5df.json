{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo, useRef } from \"react\";\nimport { useDir } from \"../Dir\";\nimport { DEFAULT_KEYBOARD_MOVEMENT, DEFAULT_LTR_KEYBOARD_MOVEMENT, DEFAULT_RTL_KEYBOARD_MOVEMENT, KeyboardMovementContextProvider } from \"./movementContext\";\nimport { getSearchText } from \"./utils\";\n/**\n * @example\n * Main Usage\n * ```tsx\n * function Example() {\n *   return (\n *     <KeyboardMovementProvider>\n *       <CustomKeyboardFocusWidget />\n *     </KeyboardMovementProvider>\n *   );\n * }\n *\n * function CustomKeyboardFocusWidget() {\n *   const { focusIndex: _focusIndex, ...eventHandlers } = useKeyboardFocus();\n *   return (\n *     <div {...eventHandlers}>\n *       <FocusableChild />\n *       <FocusableChild />\n *       <FocusableChild />\n *       <FocusableChild />\n *     </div>\n *   );\n * }\n *\n * function FocusableChild() {\n *   const refCallback = useKeyboardFocusableElement()\n *\n *   return <div role=\"menuitem\" tabIndex={-1} ref={refCallback}>Content</div>;\n * }\n * ```\n *\n * @remarks \\@since 5.0.0\n */\n\nexport function KeyboardMovementProvider(_a) {\n  var children = _a.children,\n      _b = _a.loopable,\n      loopable = _b === void 0 ? false : _b,\n      _c = _a.searchable,\n      searchable = _c === void 0 ? false : _c,\n      _d = _a.horizontal,\n      horizontal = _d === void 0 ? false : _d,\n      _e = _a.includeDisabled,\n      includeDisabled = _e === void 0 ? false : _e,\n      propIncrementKeys = _a.incrementKeys,\n      propDecrementKeys = _a.decrementKeys,\n      propJumpToFirstKeys = _a.jumpToFirstKeys,\n      propJumpToLastKeys = _a.jumpToLastKeys;\n  var isRTL = useDir().dir === \"rtl\";\n  var defaults;\n\n  if (horizontal) {\n    defaults = isRTL ? DEFAULT_RTL_KEYBOARD_MOVEMENT : DEFAULT_LTR_KEYBOARD_MOVEMENT;\n  } else {\n    defaults = DEFAULT_KEYBOARD_MOVEMENT;\n  }\n\n  var incrementKeys = propIncrementKeys || defaults.incrementKeys;\n  var decrementKeys = propDecrementKeys || defaults.decrementKeys;\n  var jumpToFirstKeys = propJumpToFirstKeys || defaults.jumpToFirstKeys;\n  var jumpToLastKeys = propJumpToLastKeys || defaults.jumpToLastKeys;\n  var watching = useRef([]);\n  var configuration = {\n    incrementKeys: incrementKeys,\n    decrementKeys: decrementKeys,\n    jumpToFirstKeys: jumpToFirstKeys,\n    jumpToLastKeys: jumpToLastKeys\n  };\n  var config = useRef(configuration);\n  config.current = configuration;\n  var value = useMemo(function () {\n    return {\n      attach: function (element) {\n        watching.current.push({\n          element: element,\n          content: getSearchText(element, searchable)\n        });\n      },\n      detach: function (element) {\n        watching.current = watching.current.filter(function (cache) {\n          return cache.element !== element;\n        });\n      },\n      watching: watching,\n      config: config,\n      loopable: loopable,\n      searchable: searchable,\n      horizontal: horizontal,\n      includeDisabled: includeDisabled\n    };\n  }, [horizontal, includeDisabled, loopable, searchable]);\n  return _jsx(KeyboardMovementContextProvider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AACA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,SACEC,yBADF,EAEEC,6BAFF,EAGEC,6BAHF,EAIEC,+BAJF,QAKO,mBALP;AAaA,SAASC,aAAT,QAA8B,SAA9B;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAM,SAAUC,wBAAV,CAAmCC,EAAnC,EAU0B;MAT9BC,QAAQ;MACRC;MAAAC,QAAQ,mBAAG,KAAH,GAAQD;MAChBE;MAAAC,UAAU,mBAAG,KAAH,GAAQD;MAClBE;MAAAC,UAAU,mBAAG,KAAH,GAAQD;MAClBE;MAAAC,eAAe,mBAAG,KAAH,GAAQD;MACRE,iBAAiB;MACjBC,iBAAiB;MACfC,mBAAmB;MACpBC,kBAAkB;EAElC,IAAMC,KAAK,GAAGrB,MAAM,GAAGsB,GAAT,KAAiB,KAA/B;EACA,IAAIC,QAAJ;;EACA,IAAIT,UAAJ,EAAgB;IACdS,QAAQ,GAAGF,KAAK,GACZlB,6BADY,GAEZD,6BAFJ;EAGD,CAJD,MAIO;IACLqB,QAAQ,GAAGtB,yBAAX;EACD;;EAED,IAAMuB,aAAa,GAAGP,iBAAiB,IAAIM,QAAQ,CAACC,aAApD;EACA,IAAMC,aAAa,GAAGP,iBAAiB,IAAIK,QAAQ,CAACE,aAApD;EACA,IAAMC,eAAe,GAAGP,mBAAmB,IAAII,QAAQ,CAACG,eAAxD;EACA,IAAMC,cAAc,GAAGP,kBAAkB,IAAIG,QAAQ,CAACI,cAAtD;EAEA,IAAMC,QAAQ,GAAG7B,MAAM,CAA6B,EAA7B,CAAvB;EACA,IAAM8B,aAAa,GAA2B;IAC5CL,aAAa,eAD+B;IAE5CC,aAAa,eAF+B;IAG5CC,eAAe,iBAH6B;IAI5CC,cAAc;EAJ8B,CAA9C;EAMA,IAAMG,MAAM,GAAG/B,MAAM,CAAC8B,aAAD,CAArB;EACAC,MAAM,CAACC,OAAP,GAAiBF,aAAjB;EAEA,IAAMG,KAAK,GAAGlC,OAAO,CACnB;IAAM,OAAC;MACLmC,MAAM,YAACC,OAAD,EAAQ;QACZN,QAAQ,CAACG,OAAT,CAAiBI,IAAjB,CAAsB;UACpBD,OAAO,SADa;UAEpBE,OAAO,EAAE/B,aAAa,CAAC6B,OAAD,EAAUtB,UAAV;QAFF,CAAtB;MAID,CANI;MAOLyB,MAAM,YAACH,OAAD,EAAQ;QACZN,QAAQ,CAACG,OAAT,GAAmBH,QAAQ,CAACG,OAAT,CAAiBO,MAAjB,CACjB,UAACC,KAAD,EAAM;UAAK,YAAK,CAACL,OAAN,KAAkBA,OAAlB;QAAyB,CADnB,CAAnB;MAGD,CAXI;MAYLN,QAAQ,UAZH;MAaLE,MAAM,QAbD;MAcLpB,QAAQ,UAdH;MAeLE,UAAU,YAfL;MAgBLE,UAAU,YAhBL;MAiBLE,eAAe,EAAEA;IAjBZ,CAAD;EAkBJ,CAnBiB,EAoBnB,CAACF,UAAD,EAAaE,eAAb,EAA8BN,QAA9B,EAAwCE,UAAxC,CApBmB,CAArB;EAuBA,OACE4B,KAACpC,+BAAD,EAAgCqC;IAACT,KAAK,EAAEA;EAAR,GAAa;IAAAxB,UAC1CA;EAD0C,CAAb,CAAhC,CADF;AAKD","names":["useMemo","useRef","useDir","DEFAULT_KEYBOARD_MOVEMENT","DEFAULT_LTR_KEYBOARD_MOVEMENT","DEFAULT_RTL_KEYBOARD_MOVEMENT","KeyboardMovementContextProvider","getSearchText","KeyboardMovementProvider","_a","children","_b","loopable","_c","searchable","_d","horizontal","_e","includeDisabled","propIncrementKeys","propDecrementKeys","propJumpToFirstKeys","propJumpToLastKeys","isRTL","dir","defaults","incrementKeys","decrementKeys","jumpToFirstKeys","jumpToLastKeys","watching","configuration","config","current","value","attach","element","push","content","detach","filter","cache","_jsx","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\keyboardMovement\\KeyboardMovementProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { useMemo, useRef } from \"react\";\n\nimport { useDir } from \"../Dir\";\nimport {\n  DEFAULT_KEYBOARD_MOVEMENT,\n  DEFAULT_LTR_KEYBOARD_MOVEMENT,\n  DEFAULT_RTL_KEYBOARD_MOVEMENT,\n  KeyboardMovementContextProvider,\n} from \"./movementContext\";\nimport type {\n  KeyboardFocusContext,\n  KeyboardFocusElementData,\n  KeyboardMovementBehavior,\n  KeyboardMovementConfig,\n  KeyboardMovementConfiguration,\n} from \"./types\";\nimport { getSearchText } from \"./utils\";\n\n/**\n * @remarks \\@since 5.0.0\n */\nexport interface KeyboardMovementProviderProps\n  extends KeyboardMovementBehavior,\n    KeyboardMovementConfiguration {\n  children: ReactNode;\n}\n\n/**\n * @example\n * Main Usage\n * ```tsx\n * function Example() {\n *   return (\n *     <KeyboardMovementProvider>\n *       <CustomKeyboardFocusWidget />\n *     </KeyboardMovementProvider>\n *   );\n * }\n *\n * function CustomKeyboardFocusWidget() {\n *   const { focusIndex: _focusIndex, ...eventHandlers } = useKeyboardFocus();\n *   return (\n *     <div {...eventHandlers}>\n *       <FocusableChild />\n *       <FocusableChild />\n *       <FocusableChild />\n *       <FocusableChild />\n *     </div>\n *   );\n * }\n *\n * function FocusableChild() {\n *   const refCallback = useKeyboardFocusableElement()\n *\n *   return <div role=\"menuitem\" tabIndex={-1} ref={refCallback}>Content</div>;\n * }\n * ```\n *\n * @remarks \\@since 5.0.0\n */\nexport function KeyboardMovementProvider({\n  children,\n  loopable = false,\n  searchable = false,\n  horizontal = false,\n  includeDisabled = false,\n  incrementKeys: propIncrementKeys,\n  decrementKeys: propDecrementKeys,\n  jumpToFirstKeys: propJumpToFirstKeys,\n  jumpToLastKeys: propJumpToLastKeys,\n}: KeyboardMovementProviderProps): ReactElement {\n  const isRTL = useDir().dir === \"rtl\";\n  let defaults: Readonly<Required<KeyboardMovementConfiguration>>;\n  if (horizontal) {\n    defaults = isRTL\n      ? DEFAULT_RTL_KEYBOARD_MOVEMENT\n      : DEFAULT_LTR_KEYBOARD_MOVEMENT;\n  } else {\n    defaults = DEFAULT_KEYBOARD_MOVEMENT;\n  }\n\n  const incrementKeys = propIncrementKeys || defaults.incrementKeys;\n  const decrementKeys = propDecrementKeys || defaults.decrementKeys;\n  const jumpToFirstKeys = propJumpToFirstKeys || defaults.jumpToFirstKeys;\n  const jumpToLastKeys = propJumpToLastKeys || defaults.jumpToLastKeys;\n\n  const watching = useRef<KeyboardFocusElementData[]>([]);\n  const configuration: KeyboardMovementConfig = {\n    incrementKeys,\n    decrementKeys,\n    jumpToFirstKeys,\n    jumpToLastKeys,\n  };\n  const config = useRef(configuration);\n  config.current = configuration;\n\n  const value = useMemo<KeyboardFocusContext>(\n    () => ({\n      attach(element) {\n        watching.current.push({\n          element,\n          content: getSearchText(element, searchable),\n        });\n      },\n      detach(element) {\n        watching.current = watching.current.filter(\n          (cache) => cache.element !== element\n        );\n      },\n      watching,\n      config,\n      loopable,\n      searchable,\n      horizontal,\n      includeDisabled: includeDisabled,\n    }),\n    [horizontal, includeDisabled, loopable, searchable]\n  );\n\n  return (\n    <KeyboardMovementContextProvider value={value}>\n      {children}\n    </KeyboardMovementContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}