{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { bem } from \"@react-md/utils\";\nimport { useInheritContext } from \"./useInheritContext\";\nvar block = bem(\"rmd-app-bar\");\n/**\n * This component is really just a simple wrapper for the `Button` component\n * that adds some additional styles for adding spacing before and after this\n * button so that it aligns to the main \"keyline\" of your application's\n * navigation. In simpler terms, it will make the left side of the icon in this\n * button aligns with all the other icons that appear in `ListItem`s in your\n * main navigation.\n *\n * This component is generally really only used when you want to have a\n * temporary navigation element like a hamburger menu.\n */\n\nexport var AppBarNav = forwardRef(function AppBarNav(_a, ref) {\n  var className = _a.className,\n      children = _a.children,\n      inheritColor = _a.inheritColor,\n      floating = _a.floating,\n      _b = _a.theme,\n      theme = _b === void 0 ? floating ? \"secondary\" : \"clear\" : _b,\n      _c = _a.buttonType,\n      buttonType = _c === void 0 ? \"icon\" : _c,\n      props = __rest(_a, [\"className\", \"children\", \"inheritColor\", \"floating\", \"theme\", \"buttonType\"]);\n\n  return _jsx(Button, __assign({}, props, {\n    theme: theme,\n    floating: floating,\n    buttonType: buttonType,\n    ref: ref,\n    className: cn(block(\"nav\", {\n      inherit: useInheritContext(inheritColor)\n    }), className)\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAGA,SAASC,iBAAT,QAAkC,qBAAlC;AAIA,IAAMC,KAAK,GAAGF,GAAG,CAAC,aAAD,CAAjB;AAEA;;;;;;;;;;;;AAWA,OAAO,IAAMG,SAAS,GAAGN,UAAU,CACjC,SAASM,SAAT,CACEC,EADF,EAUEC,GAVF,EAUK;EARD,aAAS,eAAT;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,YAAY,kBAFZ;EAAA,IAGAC,QAAQ,cAHR;EAAA,IAIAC,aAJA;EAAA,IAIAC,KAAK,mBAAGF,QAAQ,GAAG,WAAH,GAAiB,OAA5B,GAAmCC,EAJxC;EAAA,IAKAE,kBALA;EAAA,IAKAC,UAAU,mBAAG,MAAH,GAASD,EALnB;EAAA,IAMGE,KAAK,cAPV,4EAOU,CANR;;EAUF,OACEC,KAACf,MAAD,EAAOgB,aACDF,KADC,EACI;IACTH,KAAK,EAAEA,KADE;IAETF,QAAQ,EAAEA,QAFD;IAGTI,UAAU,EAAEA,UAHH;IAITP,GAAG,EAAEA,GAJI;IAKTW,SAAS,EAAElB,EAAE,CACXI,KAAK,CAAC,KAAD,EAAQ;MACXe,OAAO,EAAEhB,iBAAiB,CAACM,YAAD;IADf,CAAR,CADM,EAIXS,SAJW;EALJ,CADJ,EAWJ;IAAAV,UAEAA;EAFA,CAXI,CAAP,CADF;AAiBD,CA9BgC,CAA5B","names":["forwardRef","cn","Button","bem","useInheritContext","block","AppBarNav","_a","ref","children","inheritColor","floating","_b","theme","_c","buttonType","props","_jsx","__assign","className","inherit"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\app-bar\\src\\AppBarNav.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ButtonProps } from \"@react-md/button\";\nimport { Button } from \"@react-md/button\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { AppBarColorInherit } from \"./useInheritContext\";\nimport { useInheritContext } from \"./useInheritContext\";\n\nexport interface AppBarNavProps extends ButtonProps, AppBarColorInherit {}\n\nconst block = bem(\"rmd-app-bar\");\n\n/**\n * This component is really just a simple wrapper for the `Button` component\n * that adds some additional styles for adding spacing before and after this\n * button so that it aligns to the main \"keyline\" of your application's\n * navigation. In simpler terms, it will make the left side of the icon in this\n * button aligns with all the other icons that appear in `ListItem`s in your\n * main navigation.\n *\n * This component is generally really only used when you want to have a\n * temporary navigation element like a hamburger menu.\n */\nexport const AppBarNav = forwardRef<HTMLButtonElement, AppBarNavProps>(\n  function AppBarNav(\n    {\n      className,\n      children,\n      inheritColor,\n      floating,\n      theme = floating ? \"secondary\" : \"clear\",\n      buttonType = \"icon\",\n      ...props\n    },\n    ref\n  ) {\n    return (\n      <Button\n        {...props}\n        theme={theme}\n        floating={floating}\n        buttonType={buttonType}\n        ref={ref}\n        className={cn(\n          block(\"nav\", {\n            inherit: useInheritContext(inheritColor),\n          }),\n          className\n        )}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}