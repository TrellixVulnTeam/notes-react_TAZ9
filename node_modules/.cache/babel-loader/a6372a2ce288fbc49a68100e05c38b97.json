{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { AppBar, AppBarTitle } from \"@react-md/app-bar\";\nimport { bem } from \"@react-md/utils\";\nimport { LayoutCloseNavigationButton } from \"./LayoutCloseNavigationButton\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nvar styles = bem(\"rmd-layout-nav-header\");\n/**\n * The default implementation for the `AppBar` within the `LayoutNavigation`\n * that allows for rendering a title along with the `LayoutCloseNavigationButton`.\n */\n\nexport var LayoutNavigationHeader = forwardRef(function LayoutNavigationHeader(_a, ref) {\n  var _b = _a.theme,\n      theme = _b === void 0 ? \"clear\" : _b,\n      children = _a.children,\n      className = _a.className,\n      closeNav = _a.closeNav,\n      closeNavProps = _a.closeNavProps,\n      propTitle = _a.title,\n      titleProps = _a.titleProps,\n      _c = _a.disableBorderBottom,\n      disableBorderBottom = _c === void 0 ? false : _c,\n      props = __rest(_a, [\"theme\", \"children\", \"className\", \"closeNav\", \"closeNavProps\", \"title\", \"titleProps\", \"disableBorderBottom\"]);\n\n  var layout = useLayoutConfig().layout;\n\n  if (layout === \"clipped\" || layout === \"floating\") {\n    return null;\n  }\n\n  var title = null;\n\n  if (propTitle) {\n    title = _jsx(AppBarTitle, __assign({}, titleProps, {\n      children: propTitle\n    }));\n  }\n\n  var action = closeNav;\n\n  if (typeof action === \"undefined\") {\n    action = _jsx(LayoutCloseNavigationButton, __assign({}, closeNavProps));\n  }\n\n  return _jsxs(AppBar, __assign({}, props, {\n    ref: ref,\n    theme: theme,\n    className: cn(styles({\n      bordered: !disableBorderBottom\n    }), className)\n  }, {\n    children: [title, children, action]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,mBAApC;AAEA,SAASC,GAAT,QAAoB,iBAApB;AAGA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAyCA,IAAMC,MAAM,GAAGH,GAAG,CAAC,uBAAD,CAAlB;AAEA;;;;;AAIA,OAAO,IAAMI,sBAAsB,GAAGR,UAAU,CAG9C,SAASQ,sBAAT,CACAC,EADA,EAYAC,GAZA,EAYG;EAVD;EAAA,SAAK,mBAAG,OAAH,GAAUC,EAAf;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,SAAS,eAFT;EAAA,IAGAC,QAAQ,cAHR;EAAA,IAIAC,aAAa,mBAJb;EAAA,IAKOC,SAAS,WALhB;EAAA,IAMAC,UAAU,gBANV;EAAA,IAOAC,2BAPA;EAAA,IAOAC,mBAAmB,mBAAG,KAAH,GAAQD,EAP3B;EAAA,IAQGE,KAAK,cATV,6GASU,CARR;;EAYM,UAAM,GAAKd,eAAe,GAAEe,MAA5B;;EACR,IAAIA,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,UAAvC,EAAmD;IACjD,OAAO,IAAP;EACD;;EAED,IAAIC,KAAK,GAAc,IAAvB;;EACA,IAAIN,SAAJ,EAAe;IACbM,KAAK,GAAGC,KAACpB,WAAD,EAAYqB,aAAKP,UAAL,EAAe;MAAAL,UAAGI;IAAH,CAAf,CAAZ,CAAR;EACD;;EAED,IAAIS,MAAM,GAAGX,QAAb;;EACA,IAAI,OAAOW,MAAP,KAAkB,WAAtB,EAAmC;IACjCA,MAAM,GAAGF,KAAClB,2BAAD,EAA4BmB,aAAKT,aAAL,CAA5B,CAAT;EACD;;EAED,OACEW,MAACxB,MAAD,EAAOsB,aACDJ,KADC,EACI;IACTV,GAAG,EAAEA,GADI;IAETiB,KAAK,EAAEA,KAFE;IAGTd,SAAS,EAAEZ,EAAE,CAACM,MAAM,CAAC;MAAEqB,QAAQ,EAAE,CAACT;IAAb,CAAD,CAAP,EAA6CN,SAA7C;EAHJ,CADJ,EAI+D;IAAAD,WAEnEU,KAFmE,EAGnEV,QAHmE,EAInEa,MAJmE;EAAA,CAJ/D,CAAP,CADF;AAYD,CA5C+C,CAAzC","names":["forwardRef","cn","AppBar","AppBarTitle","bem","LayoutCloseNavigationButton","useLayoutConfig","styles","LayoutNavigationHeader","_a","ref","_b","children","className","closeNav","closeNavProps","propTitle","titleProps","_c","disableBorderBottom","props","layout","title","_jsx","__assign","action","_jsxs","theme","bordered"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\layout\\src\\LayoutNavigationHeader.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { AppBarProps } from \"@react-md/app-bar\";\nimport { AppBar, AppBarTitle } from \"@react-md/app-bar\";\nimport type { PropsWithRef } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { LayoutCloseNavigationButtonProps } from \"./LayoutCloseNavigationButton\";\nimport { LayoutCloseNavigationButton } from \"./LayoutCloseNavigationButton\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\n\nexport interface LayoutNavigationHeaderProps\n  extends Omit<AppBarProps, \"title\"> {\n  /**\n   * An optional title to display that will be wrapped in the `AppBarTitle`\n   * component.\n   *\n   * Note: If you do not want to wrap the title with the `AppBarTitle` component\n   * and want additional configuration, just provide your own `children`\n   * instead.\n   */\n  title?: ReactNode;\n\n  /**\n   * Any additional props to provide to the `AppBarTitle` when the `title` prop\n   * was provided.\n   */\n  titleProps?: PropsWithRef<AppBarProps, HTMLDivElement>;\n\n  /**\n   * Boolean if the header should gain a border-bottom.\n   */\n  disableBorderBottom?: boolean;\n\n  /**\n   * An optional close navigation button to use instead of the default\n   * `LayoutCloseNavigationButton`.\n   */\n  closeNav?: ReactNode;\n\n  /**\n   * Any props to pass to the default `LayoutCloseNavigationButton` when the\n   * `closeNav` prop was omitted.\n   */\n  closeNavProps?: PropsWithRef<\n    LayoutCloseNavigationButtonProps,\n    HTMLButtonElement\n  >;\n}\n\nconst styles = bem(\"rmd-layout-nav-header\");\n\n/**\n * The default implementation for the `AppBar` within the `LayoutNavigation`\n * that allows for rendering a title along with the `LayoutCloseNavigationButton`.\n */\nexport const LayoutNavigationHeader = forwardRef<\n  HTMLDivElement,\n  LayoutNavigationHeaderProps\n>(function LayoutNavigationHeader(\n  {\n    theme = \"clear\",\n    children,\n    className,\n    closeNav,\n    closeNavProps,\n    title: propTitle,\n    titleProps,\n    disableBorderBottom = false,\n    ...props\n  },\n  ref\n) {\n  const { layout } = useLayoutConfig();\n  if (layout === \"clipped\" || layout === \"floating\") {\n    return null;\n  }\n\n  let title: ReactNode = null;\n  if (propTitle) {\n    title = <AppBarTitle {...titleProps}>{propTitle}</AppBarTitle>;\n  }\n\n  let action = closeNav;\n  if (typeof action === \"undefined\") {\n    action = <LayoutCloseNavigationButton {...closeNavProps} />;\n  }\n\n  return (\n    <AppBar\n      {...props}\n      ref={ref}\n      theme={theme}\n      className={cn(styles({ bordered: !disableBorderBottom }), className)}\n    >\n      {title}\n      {children}\n      {action}\n    </AppBar>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}