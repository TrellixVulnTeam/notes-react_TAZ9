{"ast":null,"code":"import { useAppSize } from \"./useAppSize\";\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\n\nexport function MobileOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n\n  var _c = useAppSize(),\n      isPhone = _c.isPhone,\n      isTablet = _c.isTablet;\n\n  if (isPhone || isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\n\nexport function PhoneOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n  var isPhone = useAppSize().isPhone;\n\n  if (isPhone) {\n    return children;\n  }\n\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\n\nexport function TabletOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n  var isTablet = useAppSize().isTablet;\n\n  if (isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\n\nexport function DesktopOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n  var isDesktop = useAppSize().isDesktop;\n\n  if (isDesktop) {\n    return children;\n  }\n\n  return fallback;\n}","map":{"version":3,"mappings":"AAEA,SAASA,UAAT,QAA2B,cAA3B;AAcA;;;;;;AAKA,OAAM,SAAUC,UAAV,CAAqBC,EAArB,EAGW;MAFfC,QAAQ;MACRC;MAAAC,QAAQ,mBAAG,IAAH,GAAOD;;EAET,SAAwBJ,UAAU,EAAlC;EAAA,IAAEM,OAAO,aAAT;EAAA,IAAWC,QAAQ,cAAnB;;EACN,IAAID,OAAO,IAAIC,QAAf,EAAyB;IACvB,OAAOJ,QAAP;EACD;;EAED,OAAOE,QAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUG,SAAV,CAAoBN,EAApB,EAGW;MAFfC,QAAQ;MACRC;MAAAC,QAAQ,mBAAG,IAAH,GAAOD;EAEP,WAAO,GAAKJ,UAAU,GAAEM,OAAxB;;EACR,IAAIA,OAAJ,EAAa;IACX,OAAOH,QAAP;EACD;;EAED,OAAOE,QAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUI,UAAV,CAAqBP,EAArB,EAGW;MAFfC,QAAQ;MACRC;MAAAC,QAAQ,mBAAG,IAAH,GAAOD;EAEP,YAAQ,GAAKJ,UAAU,GAAEO,QAAzB;;EACR,IAAIA,QAAJ,EAAc;IACZ,OAAOJ,QAAP;EACD;;EAED,OAAOE,QAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUK,WAAV,CAAsBR,EAAtB,EAGW;MAFfC,QAAQ;MACRC;MAAAC,QAAQ,mBAAG,IAAH,GAAOD;EAEP,aAAS,GAAKJ,UAAU,GAAEW,SAA1B;;EACR,IAAIA,SAAJ,EAAe;IACb,OAAOR,QAAP;EACD;;EAED,OAAOE,QAAP;AACD","names":["useAppSize","MobileOnly","_a","children","_b","fallback","isPhone","isTablet","PhoneOnly","TabletOnly","DesktopOnly","isDesktop"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\sizing\\MediaOnly.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\n\nimport { useAppSize } from \"./useAppSize\";\n\nexport interface MediaOnlyProps {\n  /**\n   * The children to display.\n   */\n  children: ReactElement | null;\n\n  /**\n   * An optional fallback element to show when the media queries do not match.\n   */\n  fallback?: ReactElement | null;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\nexport function MobileOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isPhone, isTablet } = useAppSize();\n  if (isPhone || isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\nexport function PhoneOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isPhone } = useAppSize();\n  if (isPhone) {\n    return children;\n  }\n\n  return fallback;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\nexport function TabletOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isTablet } = useAppSize();\n  if (isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\nexport function DesktopOnly({\n  children,\n  fallback = null,\n}: MediaOnlyProps): ReactElement | null {\n  const { isDesktop } = useAppSize();\n  if (isDesktop) {\n    return children;\n  }\n\n  return fallback;\n}\n"]},"metadata":{},"sourceType":"module"}