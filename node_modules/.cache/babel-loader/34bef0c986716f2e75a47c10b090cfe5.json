{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\nimport { TableFooterProvider } from \"./footer\";\nimport { StickyTableProvider } from \"./sticky\";\nvar block = bem(\"rmd-foot\");\n/**\n * Creates a `<tfoot>` element with some basic styles. This component will\n * disable the hover effect and line wrapping by default, but the hover effect\n * and line-wrapping can be re-enabled if desired through the `hoverable` and\n * `disableNoWrap` props.\n */\n\nexport var TableFooter = forwardRef(function TableFooter(_a, ref) {\n  var className = _a.className,\n      _b = _a.hoverable,\n      hoverable = _b === void 0 ? false : _b,\n      propLineWrap = _a.lineWrap,\n      children = _a.children,\n      _c = _a.sticky,\n      sticky = _c === void 0 ? false : _c,\n      props = __rest(_a, [\"className\", \"hoverable\", \"lineWrap\", \"children\", \"sticky\"]); // update the table configuration with the custom overrides for the `<tfoot>`\n\n\n  var _d = useTableConfig({\n    lineWrap: propLineWrap,\n    disableHover: !hoverable\n  }),\n      hAlign = _d.hAlign,\n      vAlign = _d.vAlign,\n      lineWrap = _d.lineWrap,\n      disableHover = _d.disableHover,\n      disableBorders = _d.disableBorders;\n\n  var configuration = useMemo(function () {\n    return {\n      header: false,\n      hAlign: hAlign,\n      vAlign: vAlign,\n      lineWrap: lineWrap,\n      disableBorders: disableBorders,\n      disableHover: disableHover\n    };\n  }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);\n  return _jsx(TableConfigProvider, __assign({\n    value: configuration\n  }, {\n    children: _jsx(TableFooterProvider, __assign({\n      value: true\n    }, {\n      children: _jsx(\"tfoot\", __assign({}, props, {\n        ref: ref,\n        className: cn(block(), className)\n      }, {\n        children: _jsx(StickyTableProvider, __assign({\n          value: sticky\n        }, {\n          children: children\n        }))\n      }))\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAGA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,UAApD;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,SAASC,mBAAT,QAAoC,UAApC;AAmBA,IAAMC,KAAK,GAAGL,GAAG,CAAC,UAAD,CAAjB;AAEA;;;;;;;AAMA,OAAO,IAAMM,WAAW,GAAGT,UAAU,CAGnC,SAASS,WAAT,CACAC,EADA,EASAC,GATA,EASG;EAPD,aAAS,eAAT;EAAA,IACAC,iBADA;EAAA,IACAC,SAAS,mBAAG,KAAH,GAAQD,EADjB;EAAA,IAEUE,YAAY,cAFtB;EAAA,IAGAC,QAAQ,cAHR;EAAA,IAIAC,cAJA;EAAA,IAIAC,MAAM,mBAAG,KAAH,GAAQD,EAJd;EAAA,IAKGE,KAAK,cANV,4DAMU,CALR,CAOC,CAEH;;;EACM,SACJb,cAAc,CAAC;IACbc,QAAQ,EAAEL,YADG;IAEbM,YAAY,EAAE,CAACP;EAFF,CAAD,CADV;EAAA,IAAEQ,MAAM,YAAR;EAAA,IAAUC,MAAM,YAAhB;EAAA,IAAkBH,QAAQ,cAA1B;EAAA,IAA4BC,YAAY,kBAAxC;EAAA,IAA0CG,cAAc,oBAAxD;;EAMN,IAAMC,aAAa,GAAGvB,OAAO,CAC3B;IAAM,OAAC;MACLwB,MAAM,EAAE,KADH;MAELJ,MAAM,QAFD;MAGLC,MAAM,QAHD;MAILH,QAAQ,UAJH;MAKLI,cAAc,gBALT;MAMLH,YAAY;IANP,CAAD;EAOJ,CARyB,EAS3B,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2BI,cAA3B,EAA2CH,YAA3C,CAT2B,CAA7B;EAYA,OACEM,KAACtB,mBAAD,EAAoBuB;IAACC,KAAK,EAAEJ;EAAR,GAAqB;IAAAT,UACvCW,KAACpB,mBAAD,EAAoBqB;MAACC,KAAK;IAAN,GAAM;MAAAb,UACxBW,2BAAWR,KAAX,EAAgB;QAAEP,GAAG,EAAEA,GAAP;QAAYkB,SAAS,EAAE3B,EAAE,CAACM,KAAK,EAAN,EAAUqB,SAAV;MAAzB,CAAhB,EAA6D;QAAAd,UAC3DW,KAACnB,mBAAD,EAAoBoB;UAACC,KAAK,EAAEX;QAAR,GAAc;UAAAF,UAAGA;QAAH,CAAd,CAApB;MAD2D,CAA7D;IADwB,CAAN,CAApB;EADuC,CAArB,CAApB,CADF;AASD,CA1CoC,CAA9B","names":["forwardRef","useMemo","cn","bem","TableConfigProvider","useTableConfig","TableFooterProvider","StickyTableProvider","block","TableFooter","_a","ref","_b","hoverable","propLineWrap","children","_c","sticky","props","lineWrap","disableHover","hAlign","vAlign","disableBorders","configuration","header","_jsx","__assign","value","className"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\table\\src\\TableFooter.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef, useMemo } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TableCellConfig } from \"./config\";\nimport { TableConfigProvider, useTableConfig } from \"./config\";\nimport { TableFooterProvider } from \"./footer\";\nimport { StickyTableProvider } from \"./sticky\";\n\nexport interface TableFooterProps\n  extends HTMLAttributes<HTMLTableSectionElement>,\n    Pick<TableCellConfig, \"lineWrap\"> {\n  /**\n   * This is a rename of the `disableHover` of the `TableConfig` since table\n   * footers are not hoverable by default. This prop can be enabled to add the\n   * row hover color within table footers, but it is not really recommended.\n   */\n  hoverable?: boolean;\n\n  /**\n   * Boolean if the footer should be rendered as a sticky footer that will cover\n   * the table contents as the page or `TableContainer` is scrolled.\n   */\n  sticky?: boolean;\n}\n\nconst block = bem(\"rmd-foot\");\n\n/**\n * Creates a `<tfoot>` element with some basic styles. This component will\n * disable the hover effect and line wrapping by default, but the hover effect\n * and line-wrapping can be re-enabled if desired through the `hoverable` and\n * `disableNoWrap` props.\n */\nexport const TableFooter = forwardRef<\n  HTMLTableSectionElement,\n  TableFooterProps\n>(function TableFooter(\n  {\n    className,\n    hoverable = false,\n    lineWrap: propLineWrap,\n    children,\n    sticky = false,\n    ...props\n  },\n  ref\n) {\n  // update the table configuration with the custom overrides for the `<tfoot>`\n  const { hAlign, vAlign, lineWrap, disableHover, disableBorders } =\n    useTableConfig({\n      lineWrap: propLineWrap,\n      disableHover: !hoverable,\n    });\n\n  const configuration = useMemo(\n    () => ({\n      header: false,\n      hAlign,\n      vAlign,\n      lineWrap,\n      disableBorders,\n      disableHover,\n    }),\n    [hAlign, vAlign, lineWrap, disableBorders, disableHover]\n  );\n\n  return (\n    <TableConfigProvider value={configuration}>\n      <TableFooterProvider value>\n        <tfoot {...props} ref={ref} className={cn(block(), className)}>\n          <StickyTableProvider value={sticky}>{children}</StickyTableProvider>\n        </tfoot>\n      </TableFooterProvider>\n    </TableConfigProvider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}