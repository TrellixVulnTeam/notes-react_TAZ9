{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from \"react\";\nimport { applyRef } from \"@react-md/utils\";\n/**\n * This is a small hook that is used to automatically create a vertical divider\n * based on the computed height of its parent element.\n *\n * @param maxHeight - The max height for the vertical divider. When the value is\n * between 0 and 1, it will be used as a percentage. Otherwise the smaller value\n * of parent element height and this will be used.\n * @remarks \\@since 5.0.0 The hook accepts an object instead of using multiple\n * params and uses a generic for the HTMLElement type.\n */\n\nexport function useVerticalDividerHeight(_a) {\n  var ref = _a.ref,\n      style = _a.style,\n      maxHeight = _a.maxHeight;\n\n  var _b = __read(useState(undefined), 2),\n      height = _b[0],\n      setHeight = _b[1];\n\n  var refCallback = useCallback(function (instance) {\n    applyRef(instance, ref);\n\n    if (!instance || !instance.parentElement || maxHeight === 0) {\n      return;\n    }\n\n    var height = instance.parentElement.offsetHeight;\n\n    if (maxHeight <= 1) {\n      setHeight(height * maxHeight);\n    } else {\n      setHeight(Math.min(height, maxHeight));\n    }\n  }, [maxHeight, ref]);\n  return {\n    ref: refCallback,\n    style: maxHeight <= 0 ? style : __assign(__assign({}, style), {\n      height: height\n    })\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AA+BA;;;;;;;;;;;AAUA,OAAM,SAAUC,wBAAV,CAA0DC,EAA1D,EAI0B;MAH9BC,GAAG;MACHC,KAAK;MACLC,SAAS;;EAEH,gBAAsBN,QAAQ,CAAqBO,SAArB,CAA9B,EAA6D,CAA7D;EAAA,IAACC,MAAM,QAAP;EAAA,IAASC,SAAS,QAAlB;;EACN,IAAMC,WAAW,GAAGX,WAAW,CAC7B,UAACY,QAAD,EAAmB;IACjBV,QAAQ,CAACU,QAAD,EAAWP,GAAX,CAAR;;IACA,IAAI,CAACO,QAAD,IAAa,CAACA,QAAQ,CAACC,aAAvB,IAAwCN,SAAS,KAAK,CAA1D,EAA6D;MAC3D;IACD;;IAED,IAAME,MAAM,GAAGG,QAAQ,CAACC,aAAT,CAAuBC,YAAtC;;IACA,IAAIP,SAAS,IAAI,CAAjB,EAAoB;MAClBG,SAAS,CAACD,MAAM,GAAGF,SAAV,CAAT;IACD,CAFD,MAEO;MACLG,SAAS,CAACK,IAAI,CAACC,GAAL,CAASP,MAAT,EAAiBF,SAAjB,CAAD,CAAT;IACD;EACF,CAb4B,EAc7B,CAACA,SAAD,EAAYF,GAAZ,CAd6B,CAA/B;EAiBA,OAAO;IACLA,GAAG,EAAEM,WADA;IAELL,KAAK,EAAEC,SAAS,IAAI,CAAb,GAAiBD,KAAjB,GAAwBW,sBAAMX,KAAN,GAAW;MAAEG,MAAM;IAAR,CAAX;EAF1B,CAAP;AAID","names":["useCallback","useState","applyRef","useVerticalDividerHeight","_a","ref","style","maxHeight","undefined","height","setHeight","refCallback","instance","parentElement","offsetHeight","Math","min","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\divider\\src\\useVerticalDividerHeight.ts"],"sourcesContent":["import type { CSSProperties, Ref, RefCallback } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport { applyRef } from \"@react-md/utils\";\n\n/** @remarks \\@since 5.0.0 */\nexport interface VerticalDividerHookOptions<E extends HTMLElement> {\n  /**\n   * An optional ref to merge with the returned ref.\n   */\n  ref?: Ref<E>;\n\n  /**\n   * An optional style object to merge with the divider's height style.\n   */\n  style?: CSSProperties;\n\n  /**\n   * The max height for the vertical divider. When this is `<= 0`, the hook will\n   * be disabled.\n   *\n   * When the value is between 0 and 1, it will be used as a multiplier with the\n   * parent element's height. When the value is greater than 1, it will be used\n   * in `Math.min(parentElementHeight, maxHeight)`.\n   */\n  maxHeight: number;\n}\n\n/** @remarks \\@since 5.0.0 */\nexport interface VerticalDividerHeight<E extends HTMLElement> {\n  ref: RefCallback<E>;\n  style: CSSProperties | undefined;\n}\n\n/**\n * This is a small hook that is used to automatically create a vertical divider\n * based on the computed height of its parent element.\n *\n * @param maxHeight - The max height for the vertical divider. When the value is\n * between 0 and 1, it will be used as a percentage. Otherwise the smaller value\n * of parent element height and this will be used.\n * @remarks \\@since 5.0.0 The hook accepts an object instead of using multiple\n * params and uses a generic for the HTMLElement type.\n */\nexport function useVerticalDividerHeight<E extends HTMLElement>({\n  ref,\n  style,\n  maxHeight,\n}: VerticalDividerHookOptions<E>): VerticalDividerHeight<E> {\n  const [height, setHeight] = useState<number | undefined>(undefined);\n  const refCallback = useCallback(\n    (instance: E | null) => {\n      applyRef(instance, ref);\n      if (!instance || !instance.parentElement || maxHeight === 0) {\n        return;\n      }\n\n      const height = instance.parentElement.offsetHeight;\n      if (maxHeight <= 1) {\n        setHeight(height * maxHeight);\n      } else {\n        setHeight(Math.min(height, maxHeight));\n      }\n    },\n    [maxHeight, ref]\n  );\n\n  return {\n    ref: refCallback,\n    style: maxHeight <= 0 ? style : { ...style, height },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}