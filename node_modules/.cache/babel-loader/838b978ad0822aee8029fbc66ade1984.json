{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Children, cloneElement } from \"react\";\nimport { DEFAULT_TOOLTIP_DENSE_SPACING, DEFAULT_TOOLTIP_MARGIN, DEFAULT_TOOLTIP_POSITION, DEFAULT_TOOLTIP_SPACING, DEFAULT_TOOLTIP_THRESHOLD } from \"./constants\";\nimport { Tooltip } from \"./Tooltip\";\nimport { useTooltip } from \"./useTooltip\";\nvar MERGABLE_PROPS = [\"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"onTouchStart\", \"onFocus\", \"onKeyDown\", \"onContextMenu\"];\n/**\n * The `Tooltipped` component can be used to dynamically add a tooltip to child\n * element by cloning the required event handlers and accessibility props into\n * the child with `React.cloneChild`.\n *\n * Note: This component is _kind of_ deprecated in favor of using the\n * `useTooltip` hook and `Tooltip` component instead.\n *\n * @see {@link Tooltip} for an example\n */\n\nexport function Tooltipped(_a) {\n  var id = _a.id,\n      style = _a.style,\n      children = _a.children,\n      tooltipChildren = _a.tooltip,\n      _b = _a.dense,\n      dense = _b === void 0 ? false : _b,\n      _c = _a.vhMargin,\n      vhMargin = _c === void 0 ? DEFAULT_TOOLTIP_MARGIN : _c,\n      _d = _a.vwMargin,\n      vwMargin = _d === void 0 ? DEFAULT_TOOLTIP_MARGIN : _d,\n      _e = _a.spacing,\n      spacing = _e === void 0 ? DEFAULT_TOOLTIP_SPACING : _e,\n      _f = _a.denseSpacing,\n      denseSpacing = _f === void 0 ? DEFAULT_TOOLTIP_DENSE_SPACING : _f,\n      propPosition = _a.position,\n      _g = _a.threshold,\n      threshold = _g === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _g,\n      onClick = _a.onClick,\n      onMouseEnter = _a.onMouseEnter,\n      onMouseLeave = _a.onMouseLeave,\n      onTouchStart = _a.onTouchStart,\n      onContextMenu = _a.onContextMenu,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      onKeyDown = _a.onKeyDown,\n      describedBy = _a[\"aria-describedby\"],\n      _h = _a.defaultPosition,\n      defaultPosition = _h === void 0 ? DEFAULT_TOOLTIP_POSITION : _h,\n      _j = _a.temporary,\n      temporary = _j === void 0 ? true : _j,\n      disableSwapping = _a.disableSwapping,\n      disableHoverMode = _a.disableHoverMode,\n      _k = _a.disableAutoSpacing,\n      disableAutoSpacing = _k === void 0 ? process.env.NODE_ENV === \"test\" : _k,\n      props = __rest(_a, [\"id\", \"style\", \"children\", \"tooltip\", \"dense\", \"vhMargin\", \"vwMargin\", \"spacing\", \"denseSpacing\", \"position\", \"threshold\", \"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"onTouchStart\", \"onContextMenu\", \"onBlur\", \"onFocus\", \"onKeyDown\", \"aria-describedby\", \"defaultPosition\", \"temporary\", \"disableSwapping\", \"disableHoverMode\", \"disableAutoSpacing\"]);\n\n  var _l = useTooltip({\n    baseId: id,\n    style: style,\n    dense: dense,\n    spacing: spacing,\n    denseSpacing: denseSpacing,\n    vwMargin: vwMargin,\n    vhMargin: vhMargin,\n    position: propPosition,\n    defaultPosition: defaultPosition,\n    disableSwapping: disableSwapping,\n    disableHoverMode: disableHoverMode,\n    disableAutoSpacing: disableAutoSpacing,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onTouchStart: onTouchStart,\n    onContextMenu: onContextMenu,\n    threshold: threshold\n  }),\n      elementProps = _l.elementProps,\n      tooltipProps = _l.tooltipProps;\n\n  if (!tooltipChildren) {\n    if (typeof children === \"function\") {\n      return children({\n        id: id,\n        tooltip: null,\n        \"aria-describedby\": describedBy\n      });\n    }\n\n    var child_1 = Children.only(children);\n    return cloneElement(child_1, {\n      id: id,\n      \"aria-describedby\": describedBy\n    });\n  }\n\n  var tooltip = _jsx(Tooltip, __assign({}, tooltipProps, props, {\n    temporary: temporary\n  }, {\n    children: tooltipChildren\n  }));\n\n  if (typeof children === \"function\") {\n    return children(__assign(__assign({}, elementProps), {\n      tooltip: tooltip\n    }));\n  }\n\n  var child = Children.only(children); // TODO: remove this mess since you should provide handlers to the\n  // `Tooltipped` component instead of the child element.\n\n  /* istanbul ignore next */\n\n  var merged = MERGABLE_PROPS.reduce(function (result, propName) {\n    var propHandler = child.props[propName];\n    var configHandler = elementProps[propName];\n\n    if (!propHandler) {\n      result[propName] = configHandler;\n    } else if (!configHandler) {\n      result[propName] = propHandler;\n    } else {\n      // not sure of a way to actually strongly type this nicely.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      result[propName] = function (event) {\n        propHandler(event);\n        configHandler(event);\n      };\n    }\n\n    return result;\n  }, __assign({}, elementProps));\n  return _jsxs(_Fragment, {\n    children: [cloneElement(child, merged), tooltip]\n  });\n}","map":{"version":3,"mappings":"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","names":["Children","cloneElement","DEFAULT_TOOLTIP_DENSE_SPACING","DEFAULT_TOOLTIP_MARGIN","DEFAULT_TOOLTIP_POSITION","DEFAULT_TOOLTIP_SPACING","DEFAULT_TOOLTIP_THRESHOLD","Tooltip","useTooltip","MERGABLE_PROPS","Tooltipped","_a","style","children","tooltipChildren","_b","dense","_c","vhMargin","_d","vwMargin","_e","spacing","_f","denseSpacing","propPosition","_g","threshold","onClick","onMouseEnter","onMouseLeave","onTouchStart","onContextMenu","onBlur","onFocus","onKeyDown","describedBy","_h","defaultPosition","_j","temporary","disableSwapping","disableHoverMode","_k","disableAutoSpacing","process","env","NODE_ENV","props","baseId","id","position","elementProps","tooltipProps","tooltip","child_1","only","_jsx","__assign","child","merged","reduce","result","propName","propHandler","configHandler","event","_jsxs"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tooltip\\src\\Tooltipped.tsx"],"sourcesContent":["import type { CSSProperties, ReactElement, ReactNode } from \"react\";\nimport { Children, cloneElement } from \"react\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\n\nimport {\n  DEFAULT_TOOLTIP_DENSE_SPACING,\n  DEFAULT_TOOLTIP_MARGIN,\n  DEFAULT_TOOLTIP_POSITION,\n  DEFAULT_TOOLTIP_SPACING,\n  DEFAULT_TOOLTIP_THRESHOLD,\n} from \"./constants\";\nimport type { TooltipProps } from \"./Tooltip\";\nimport { Tooltip } from \"./Tooltip\";\nimport type {\n  TooltippedElementEventHandlers,\n  BaseTooltipHookOptions,\n} from \"./useTooltip\";\nimport { useTooltip } from \"./useTooltip\";\n\ninterface TooltippedProvidedProps\n  extends TooltippedElementEventHandlers<HTMLElement> {\n  id: string;\n  \"aria-describedby\"?: string;\n  tooltip: ReactNode;\n}\n\nexport type ChildrenRenderer = (props: TooltippedProvidedProps) => ReactElement;\n\ntype R = Record<string, unknown>;\ntype ChildProps = Partial<Omit<TooltippedProvidedProps, \"tooltip\">>;\ntype ChildElement = ReactElement<ChildProps>;\n\nconst MERGABLE_PROPS: (keyof TooltippedElementEventHandlers<HTMLElement>)[] = [\n  \"onClick\",\n  \"onMouseEnter\",\n  \"onMouseLeave\",\n  \"onTouchStart\",\n  \"onFocus\",\n  \"onKeyDown\",\n  \"onContextMenu\",\n];\n\nexport interface TooltippedProps\n  extends RenderConditionalPortalProps,\n    BaseTooltipHookOptions<HTMLElement>,\n    Pick<TooltipProps, \"dense\" | \"lineWrap\" | \"temporary\"> {\n  /**\n   * The id for the element that has a tooltip. This is always required since it\n   * will be passed down to the `containerProps` in the children renderer\n   * function. It is also used to generate a `tooltipId` when there is a\n   * tooltip.\n   */\n  id: string;\n\n  /**\n   * The tooltip to display. When this is false-ish, the children renderer will\n   * always return `null` for the `tooltip` prop.\n   */\n  tooltip?: ReactNode;\n\n  /**\n   * An optional additional `aria-describedby` id or ids to merge with the\n   * tooltip id. This is really used for things like notifications or when\n   * multiple elements describe your tooltipped element.\n   */\n  \"aria-describedby\"?: string;\n\n  /**\n   * An optional style for the tooltip.\n   */\n  style?: CSSProperties;\n\n  /**\n   * An optional className for the tooltip\n   */\n  className?: string;\n\n  /**\n   * The children for this component should either be a function or a single\n   * element. When the children is a single React element, this component will\n   * clone in an `id`, `aria-describedby`, and all the event handlers required\n   * to show and hide a tooltip relative to that element. This means that you\n   * will need to ensure that the child component accepts and passes down the\n   * `on*` event handlers to a DOM node as well as the `id` and\n   * `aria-describedby` for accessibility. Every component within react-md\n   * should do this by default.\n   *\n   * If the children is a function, the `id`, `aria-describedby`, and event\n   * handlers will be provided as well as a new `tooltip` prop so that you have\n   * more control over rendering the tooltip.\n   *\n   * If the tooltip prop was not provided to this component, the\n   * `aria-describedby` and the event handlers will be omitted.\n   */\n  children: ChildElement | ChildrenRenderer;\n}\n\n/**\n * The `Tooltipped` component can be used to dynamically add a tooltip to child\n * element by cloning the required event handlers and accessibility props into\n * the child with `React.cloneChild`.\n *\n * Note: This component is _kind of_ deprecated in favor of using the\n * `useTooltip` hook and `Tooltip` component instead.\n *\n * @see {@link Tooltip} for an example\n */\nexport function Tooltipped({\n  id,\n  style,\n  children,\n  tooltip: tooltipChildren,\n  dense = false,\n  vhMargin = DEFAULT_TOOLTIP_MARGIN,\n  vwMargin = DEFAULT_TOOLTIP_MARGIN,\n  spacing = DEFAULT_TOOLTIP_SPACING,\n  denseSpacing = DEFAULT_TOOLTIP_DENSE_SPACING,\n  position: propPosition,\n  threshold = DEFAULT_TOOLTIP_THRESHOLD,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n  onTouchStart,\n  onContextMenu,\n  onBlur,\n  onFocus,\n  onKeyDown,\n  \"aria-describedby\": describedBy,\n  defaultPosition = DEFAULT_TOOLTIP_POSITION,\n  temporary = true,\n  disableSwapping,\n  disableHoverMode,\n  disableAutoSpacing = process.env.NODE_ENV === \"test\",\n  ...props\n}: TooltippedProps): ReactElement {\n  const { elementProps, tooltipProps } = useTooltip({\n    baseId: id,\n    style,\n    dense,\n    spacing,\n    denseSpacing,\n    vwMargin,\n    vhMargin,\n    position: propPosition,\n    defaultPosition,\n    disableSwapping,\n    disableHoverMode,\n    disableAutoSpacing,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart,\n    onContextMenu,\n    threshold,\n  });\n\n  if (!tooltipChildren) {\n    if (typeof children === \"function\") {\n      return children({ id, tooltip: null, \"aria-describedby\": describedBy });\n    }\n\n    const child = Children.only(children);\n    return cloneElement(child, { id, \"aria-describedby\": describedBy });\n  }\n\n  const tooltip = (\n    <Tooltip {...tooltipProps} {...props} temporary={temporary}>\n      {tooltipChildren}\n    </Tooltip>\n  );\n\n  if (typeof children === \"function\") {\n    return children({ ...elementProps, tooltip });\n  }\n\n  const child = Children.only(children);\n  // TODO: remove this mess since you should provide handlers to the\n  // `Tooltipped` component instead of the child element.\n  /* istanbul ignore next */\n  const merged = MERGABLE_PROPS.reduce(\n    (result, propName) => {\n      const propHandler = child.props[propName];\n      const configHandler = elementProps[propName];\n      if (!propHandler) {\n        (result as R)[propName] = configHandler;\n      } else if (!configHandler) {\n        (result as R)[propName] = propHandler;\n      } else {\n        // not sure of a way to actually strongly type this nicely.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        result[propName] = (event: any) => {\n          propHandler(event);\n          configHandler(event);\n        };\n      }\n\n      return result;\n    },\n    { ...elementProps }\n  );\n\n  return (\n    <>\n      {cloneElement(child, merged)}\n      {tooltip}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}