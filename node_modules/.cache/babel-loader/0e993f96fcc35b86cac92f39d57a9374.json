{"ast":null,"code":"import { useEffect, useMemo } from \"react\";\nimport { useNestedDialogContext } from \"./NestedDialogContext\";\n/**\n * This hook is used to fix the nested overlays and the escape keypress when\n * multiple dialogs are rendered at the same time on a page. All it really does\n * is keep a stack of the dialog ids that are current visible. If there is more\n * than 1 dialog visible and the dialog is not at the top of the stack, the\n * overlay and escape keypress will be disabled.\n *\n * NOTE: This will not work if you nest dialogs together and have them become\n * visible at the same time because the ids will get added from child to parent\n * instead of parent -&gt; child. This flow shouldn't really happen though so it\n * isn't planned on being fixed.\n */\n\nexport function useNestedDialogFixes(_a) {\n  var id = _a.id,\n      visible = _a.visible,\n      disabled = _a.disabled,\n      propDisableEscapeClose = _a.disableEscapeClose;\n\n  var _b = useNestedDialogContext(),\n      add = _b.add,\n      remove = _b.remove,\n      stack = _b.stack;\n\n  useEffect(function () {\n    if (disabled || !visible) {\n      return;\n    }\n\n    add(id);\n    return function () {\n      remove(id);\n    };\n  }, [visible, disabled, id, add, remove]);\n  return useMemo(function () {\n    var disableOverlay = false;\n    var disableEscapeClose = propDisableEscapeClose;\n\n    if (!disabled && visible && stack.length > 1) {\n      var lastIndex = stack.length - 1;\n      var i = stack.findIndex(function (dialogId) {\n        return id === dialogId;\n      });\n      disableOverlay = i < lastIndex;\n\n      if (!propDisableEscapeClose) {\n        disableEscapeClose = i < lastIndex;\n      }\n    }\n\n    return {\n      disableOverlay: disableOverlay,\n      disableEscapeClose: disableEscapeClose\n    };\n  }, [id, propDisableEscapeClose, disabled, visible, stack]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AAEA,SAASC,sBAAT,QAAuC,uBAAvC;AAcA;;;;;;;;;;;;;AAYA,OAAM,SAAUC,oBAAV,CAA+BC,EAA/B,EAKI;MAJRC,EAAE;MACFC,OAAO;MACPC,QAAQ;MACYC,sBAAsB;;EAEpC,SAAyBN,sBAAsB,EAA/C;EAAA,IAAEO,GAAG,SAAL;EAAA,IAAOC,MAAM,YAAb;EAAA,IAAeC,KAAK,WAApB;;EACNX,SAAS,CAAC;IACR,IAAIO,QAAQ,IAAI,CAACD,OAAjB,EAA0B;MACxB;IACD;;IAEDG,GAAG,CAACJ,EAAD,CAAH;IACA,OAAO;MACLK,MAAM,CAACL,EAAD,CAAN;IACD,CAFD;EAGD,CATQ,EASN,CAACC,OAAD,EAAUC,QAAV,EAAoBF,EAApB,EAAwBI,GAAxB,EAA6BC,MAA7B,CATM,CAAT;EAWA,OAAOT,OAAO,CAAC;IACb,IAAIW,cAAc,GAAG,KAArB;IACA,IAAIC,kBAAkB,GAAGL,sBAAzB;;IACA,IAAI,CAACD,QAAD,IAAaD,OAAb,IAAwBK,KAAK,CAACG,MAAN,GAAe,CAA3C,EAA8C;MAC5C,IAAMC,SAAS,GAAGJ,KAAK,CAACG,MAAN,GAAe,CAAjC;MACA,IAAME,CAAC,GAAGL,KAAK,CAACM,SAAN,CAAgB,UAACC,QAAD,EAAS;QAAK,SAAE,KAAKA,QAAP;MAAe,CAA7C,CAAV;MACAN,cAAc,GAAGI,CAAC,GAAGD,SAArB;;MACA,IAAI,CAACP,sBAAL,EAA6B;QAC3BK,kBAAkB,GAAGG,CAAC,GAAGD,SAAzB;MACD;IACF;;IAED,OAAO;MACLH,cAAc,gBADT;MAELC,kBAAkB;IAFb,CAAP;EAID,CAhBa,EAgBX,CAACR,EAAD,EAAKG,sBAAL,EAA6BD,QAA7B,EAAuCD,OAAvC,EAAgDK,KAAhD,CAhBW,CAAd;AAiBD","names":["useEffect","useMemo","useNestedDialogContext","useNestedDialogFixes","_a","id","visible","disabled","propDisableEscapeClose","add","remove","stack","disableOverlay","disableEscapeClose","length","lastIndex","i","findIndex","dialogId"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\dialog\\src\\useNestedDialogFixes.ts"],"sourcesContent":["import { useEffect, useMemo } from \"react\";\n\nimport { useNestedDialogContext } from \"./NestedDialogContext\";\n\ninterface Options {\n  id: string;\n  visible: boolean;\n  disabled: boolean;\n  disableEscapeClose: boolean;\n}\n\ninterface ReturnValue {\n  disableOverlay: boolean;\n  disableEscapeClose: boolean;\n}\n\n/**\n * This hook is used to fix the nested overlays and the escape keypress when\n * multiple dialogs are rendered at the same time on a page. All it really does\n * is keep a stack of the dialog ids that are current visible. If there is more\n * than 1 dialog visible and the dialog is not at the top of the stack, the\n * overlay and escape keypress will be disabled.\n *\n * NOTE: This will not work if you nest dialogs together and have them become\n * visible at the same time because the ids will get added from child to parent\n * instead of parent -&gt; child. This flow shouldn't really happen though so it\n * isn't planned on being fixed.\n */\nexport function useNestedDialogFixes({\n  id,\n  visible,\n  disabled,\n  disableEscapeClose: propDisableEscapeClose,\n}: Options): ReturnValue {\n  const { add, remove, stack } = useNestedDialogContext();\n  useEffect(() => {\n    if (disabled || !visible) {\n      return;\n    }\n\n    add(id);\n    return () => {\n      remove(id);\n    };\n  }, [visible, disabled, id, add, remove]);\n\n  return useMemo(() => {\n    let disableOverlay = false;\n    let disableEscapeClose = propDisableEscapeClose;\n    if (!disabled && visible && stack.length > 1) {\n      const lastIndex = stack.length - 1;\n      const i = stack.findIndex((dialogId) => id === dialogId);\n      disableOverlay = i < lastIndex;\n      if (!propDisableEscapeClose) {\n        disableEscapeClose = i < lastIndex;\n      }\n    }\n\n    return {\n      disableOverlay,\n      disableEscapeClose,\n    };\n  }, [id, propDisableEscapeClose, disabled, visible, stack]);\n}\n"]},"metadata":{},"sourceType":"module"}