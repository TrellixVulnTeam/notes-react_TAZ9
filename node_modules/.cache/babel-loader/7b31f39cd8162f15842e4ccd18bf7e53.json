{"ast":null,"code":"import { createContext, useContext } from \"react\";\nvar context = createContext(false);\n/**\n * A quick way to conditionally inherit the sticky context within a table.  If\n * the sticky prop was defined and a boolean, it will be used. Otherwise the\n * inherited context value will be used.\n * @internal\n */\n\nexport function useSticky(sticky) {\n  var isSticky = useContext(context);\n  return typeof sticky !== \"undefined\" ? !!sticky : isSticky;\n}\n/**\n * @internal\n */\n\nexport var StickyTableProvider = context.Provider;","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AAEA,IAAMC,OAAO,GAAGF,aAAa,CAAC,KAAD,CAA7B;AAEA;;;;;;;AAMA,OAAM,SAAUG,SAAV,CAAoBC,MAApB,EAAwD;EAC5D,IAAMC,QAAQ,GAAGJ,UAAU,CAACC,OAAD,CAA3B;EAEA,OAAO,OAAOE,MAAP,KAAkB,WAAlB,GAAgC,CAAC,CAACA,MAAlC,GAA2CC,QAAlD;AACD;AAED;;;;AAGA,OAAe,IAAUC,mBAAmB,GAAKJ,OAAO,SAAzC","names":["createContext","useContext","context","useSticky","sticky","isSticky","StickyTableProvider"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\table\\src\\sticky.ts"],"sourcesContent":["import { createContext, useContext } from \"react\";\n\nconst context = createContext(false);\n\n/**\n * A quick way to conditionally inherit the sticky context within a table.  If\n * the sticky prop was defined and a boolean, it will be used. Otherwise the\n * inherited context value will be used.\n * @internal\n */\nexport function useSticky(sticky: boolean | string | undefined): boolean {\n  const isSticky = useContext(context);\n\n  return typeof sticky !== \"undefined\" ? !!sticky : isSticky;\n}\n\n/**\n * @internal\n */\nexport const { Provider: StickyTableProvider } = context;\n"]},"metadata":{},"sourceType":"module"}