{"ast":null,"code":"import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT } from \"./constants\";\n/**\n * Gets the current layout based on the app size and layout configuration.\n *\n * @returns The current layout type\n */\n\nexport function getLayoutType(_a) {\n  var appSize = _a.appSize,\n      _b = _a.phoneLayout,\n      phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b,\n      _c = _a.tabletLayout,\n      tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c,\n      _d = _a.landscapeTabletLayout,\n      landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d,\n      _e = _a.desktopLayout,\n      desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e,\n      _f = _a.largeDesktopLayout,\n      largeDesktopLayout = _f === void 0 ? desktopLayout : _f;\n  var isPhone = appSize.isPhone,\n      isTablet = appSize.isTablet,\n      isLargeDesktop = appSize.isLargeDesktop,\n      isLandscape = appSize.isLandscape;\n\n  if (isPhone) {\n    return phoneLayout;\n  }\n\n  if (isTablet) {\n    return isLandscape ? landscapeTabletLayout : tabletLayout;\n  }\n\n  if (isLargeDesktop) {\n    return largeDesktopLayout;\n  }\n\n  return desktopLayout;\n}\n/**\n * Checks if the current `layout` is one of the temporary types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout has a temporary navigation.\n */\n\nexport function isTemporaryLayout(layout) {\n  return layout === \"temporary\" || layout === \"temporary-mini\";\n}\n/**\n * Checks if the current `layout` is one of the toggleable types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is toggleable.\n */\n\nexport function isToggleableLayout(layout) {\n  return layout === \"toggleable\" || layout === \"toggleable-mini\";\n}\n/**\n * Checks if the current `layout` is `\"clipped\"`, `\"floating\"`, or\n * `\"full-height\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is persistent.\n */\n\nexport function isPersistentLayout(layout) {\n  return layout === \"clipped\" || layout === \"floating\" || layout === \"full-height\";\n}\n/**\n * Checks if the current `layout` is the `\"full-height\"` variant.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the full height variant.\n */\n\nexport function isFullHeightLayout(layout) {\n  return layout === \"full-height\";\n}\n/**\n * Checks if the current `layout` is either `\"temporary-mini\"` or\n * `\"toggleable-mini\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the mini variant.\n * @remarks \\@since 2.7.0\n */\n\nexport function isMiniLayout(layout) {\n  return layout === \"temporary-mini\" || layout === \"toggleable-mini\";\n}","map":{"version":3,"mappings":"AAEA,SACEA,sBADF,EAEEC,+BAFF,EAGEC,oBAHF,EAIEC,qBAJF,QAKO,aALP;AAgBA;;;;;;AAKA,OAAM,SAAUC,aAAV,CAAwBC,EAAxB,EAOa;MANjBC,OAAO;MACPC;MAAAC,WAAW,mBAAGN,oBAAH,GAAuBK;MAClCE;MAAAC,YAAY,mBAAGP,qBAAH,GAAwBM;MACpCE;MAAAC,qBAAqB,mBAAGX,+BAAH,GAAkCU;MACvDE;MAAAC,aAAa,mBAAGd,sBAAH,GAAyBa;MACtCE;MAAAC,kBAAkB,mBAAGF,aAAH,GAAgBC;EAE1B,WAAO,GAA4CT,OAAO,QAA1D;EAAA,IAASW,QAAQ,GAAkCX,OAAO,SAA1D;EAAA,IAAmBY,cAAc,GAAkBZ,OAAO,eAA1D;EAAA,IAAmCa,WAAW,GAAKb,OAAO,YAA1D;;EACR,IAAIc,OAAJ,EAAa;IACX,OAAOZ,WAAP;EACD;;EAED,IAAIS,QAAJ,EAAc;IACZ,OAAOE,WAAW,GAAGP,qBAAH,GAA2BF,YAA7C;EACD;;EAED,IAAIQ,cAAJ,EAAoB;IAClB,OAAOF,kBAAP;EACD;;EAED,OAAOF,aAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUO,iBAAV,CAA4BC,MAA5B,EAAuD;EAC3D,OAAOA,MAAM,KAAK,WAAX,IAA0BA,MAAM,KAAK,gBAA5C;AACD;AAED;;;;;;;AAMA,OAAM,SAAUC,kBAAV,CAA6BD,MAA7B,EAAwD;EAC5D,OAAOA,MAAM,KAAK,YAAX,IAA2BA,MAAM,KAAK,iBAA7C;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUE,kBAAV,CAA6BF,MAA7B,EAAwD;EAC5D,OACEA,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,UAAnC,IAAiDA,MAAM,KAAK,aAD9D;AAGD;AAED;;;;;;;AAMA,OAAM,SAAUG,kBAAV,CAA6BH,MAA7B,EAAwD;EAC5D,OAAOA,MAAM,KAAK,aAAlB;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUI,YAAV,CAAuBJ,MAAvB,EAAkD;EACtD,OAAOA,MAAM,KAAK,gBAAX,IAA+BA,MAAM,KAAK,iBAAjD;AACD","names":["DEFAULT_DESKTOP_LAYOUT","DEFAULT_LANDSCAPE_TABLET_LAYOUT","DEFAULT_PHONE_LAYOUT","DEFAULT_TABLET_LAYOUT","getLayoutType","_a","appSize","_b","phoneLayout","_c","tabletLayout","_d","landscapeTabletLayout","_e","desktopLayout","_f","largeDesktopLayout","isTablet","isLargeDesktop","isLandscape","isPhone","isTemporaryLayout","layout","isToggleableLayout","isPersistentLayout","isFullHeightLayout","isMiniLayout"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\layout\\src\\utils.ts"],"sourcesContent":["import type { AppSize } from \"@react-md/utils\";\n\nimport {\n  DEFAULT_DESKTOP_LAYOUT,\n  DEFAULT_LANDSCAPE_TABLET_LAYOUT,\n  DEFAULT_PHONE_LAYOUT,\n  DEFAULT_TABLET_LAYOUT,\n} from \"./constants\";\nimport type { LayoutConfiguration, SupportedWideLayout } from \"./types\";\n\nexport interface GetLayoutOptions extends LayoutConfiguration {\n  /**\n   * The current app size which is used to determine which layout type to\n   * return.\n   */\n  appSize: AppSize;\n}\n\n/**\n * Gets the current layout based on the app size and layout configuration.\n *\n * @returns The current layout type\n */\nexport function getLayoutType({\n  appSize,\n  phoneLayout = DEFAULT_PHONE_LAYOUT,\n  tabletLayout = DEFAULT_TABLET_LAYOUT,\n  landscapeTabletLayout = DEFAULT_LANDSCAPE_TABLET_LAYOUT,\n  desktopLayout = DEFAULT_DESKTOP_LAYOUT,\n  largeDesktopLayout = desktopLayout,\n}: GetLayoutOptions): SupportedWideLayout {\n  const { isPhone, isTablet, isLargeDesktop, isLandscape } = appSize;\n  if (isPhone) {\n    return phoneLayout;\n  }\n\n  if (isTablet) {\n    return isLandscape ? landscapeTabletLayout : tabletLayout;\n  }\n\n  if (isLargeDesktop) {\n    return largeDesktopLayout;\n  }\n\n  return desktopLayout;\n}\n\n/**\n * Checks if the current `layout` is one of the temporary types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout has a temporary navigation.\n */\nexport function isTemporaryLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"temporary\" || layout === \"temporary-mini\";\n}\n\n/**\n * Checks if the current `layout` is one of the toggleable types\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is toggleable.\n */\nexport function isToggleableLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"toggleable\" || layout === \"toggleable-mini\";\n}\n\n/**\n * Checks if the current `layout` is `\"clipped\"`, `\"floating\"`, or\n * `\"full-height\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is persistent.\n */\nexport function isPersistentLayout(layout: SupportedWideLayout): boolean {\n  return (\n    layout === \"clipped\" || layout === \"floating\" || layout === \"full-height\"\n  );\n}\n\n/**\n * Checks if the current `layout` is the `\"full-height\"` variant.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the full height variant.\n */\nexport function isFullHeightLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"full-height\";\n}\n\n/**\n * Checks if the current `layout` is either `\"temporary-mini\"` or\n * `\"toggleable-mini\"`.\n *\n * @param layout - The layout to check against\n * @returns true if the current layout is the mini variant.\n * @remarks \\@since 2.7.0\n */\nexport function isMiniLayout(layout: SupportedWideLayout): boolean {\n  return layout === \"temporary-mini\" || layout === \"toggleable-mini\";\n}\n"]},"metadata":{},"sourceType":"module"}