{"ast":null,"code":"function modify(base, modifier) {\n  if (!modifier) {\n    return base;\n  }\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  return Object.keys(modifier).reduce(function (s, mod) {\n    if (hasOwn.call(modifier, mod) && modifier[mod]) {\n      s = \"\".concat(s, \" \").concat(base, \"--\").concat(mod);\n    }\n\n    return s;\n  }, base);\n}\n/**\n * Applies the BEM styled class name to an element.\n *\n * @see https://en.bem.info/methodology/css/\n * @param base - The base class to use\n * @returns a function to call that generates the full class name\n */\n\n\nexport function bem(base) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!base) {\n      throw new Error(\"bem requires a base block class but none were provided.\");\n    }\n  }\n  /**\n   * Creates the full class name from the base block name. This can be called\n   * without any arguments which will just return the base block name (kind of\n   * worthless), or you can provide a child element name and modifiers.\n   *\n   * @param elementOrModifier - This is either the child element name or an\n   * object of modifiers to apply. This **must** be a string if the second\n   * argument is provided.\n   * @param modifier - Any optional modifiers to apply to the block and optional\n   * element.\n   * @returns the full class name\n   */\n\n\n  return function block(elementOrModifier, modifier) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof elementOrModifier !== \"string\" && modifier) {\n        throw new TypeError(\"bem does not support having two modifier arguments.\");\n      }\n    }\n\n    if (!elementOrModifier) {\n      return base;\n    }\n\n    if (typeof elementOrModifier !== \"string\") {\n      return modify(base, elementOrModifier);\n    }\n\n    return modify(\"\".concat(base, \"__\").concat(elementOrModifier), modifier);\n  };\n}","map":{"version":3,"mappings":"AAIA,SAASA,MAAT,CAAgBC,IAAhB,EAA8BC,QAA9B,EAAiD;EAC/C,IAAI,CAACA,QAAL,EAAe;IACb,OAAOD,IAAP;EACD;;EAED,IAAME,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAAhC;EACA,OAAOF,MAAM,CAACG,IAAP,CAAYL,QAAZ,EAAsBM,MAAtB,CAA6B,UAACC,CAAD,EAAIC,GAAJ,EAAO;IACzC,IAAIP,MAAM,CAACQ,IAAP,CAAYT,QAAZ,EAAsBQ,GAAtB,KAA8BR,QAAQ,CAACQ,GAAD,CAA1C,EAAiD;MAC/CD,CAAC,GAAG,UAAGA,CAAH,EAAI,GAAJ,EAAIG,MAAJ,CAAQX,IAAR,EAAY,IAAZ,EAAYW,MAAZ,CAAiBF,GAAjB,CAAJ;IACD;;IAED,OAAOD,CAAP;EACD,CANM,EAMJR,IANI,CAAP;AAOD;AAOD;;;;;;;;;AAOA,OAAM,SAAUY,GAAV,CAAcZ,IAAd,EAAyB;EAC7B,IAAIa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAI,CAACf,IAAL,EAAW;MACT,MAAM,IAAIgB,KAAJ,CACJ,yDADI,CAAN;IAGD;EACF;EAED;;;;;;;;;;;;;;EAYA,OAAO,SAASC,KAAT,CACLC,iBADK,EAELjB,QAFK,EAEc;IAEnB,IAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,OAAOG,iBAAP,KAA6B,QAA7B,IAAyCjB,QAA7C,EAAuD;QACrD,MAAM,IAAIkB,SAAJ,CACJ,qDADI,CAAN;MAGD;IACF;;IAED,IAAI,CAACD,iBAAL,EAAwB;MACtB,OAAOlB,IAAP;IACD;;IAED,IAAI,OAAOkB,iBAAP,KAA6B,QAAjC,EAA2C;MACzC,OAAOnB,MAAM,CAACC,IAAD,EAAOkB,iBAAP,CAAb;IACD;;IAED,OAAOnB,MAAM,CAAC,UAAGC,IAAH,EAAO,IAAP,EAAOW,MAAP,CAAYO,iBAAZ,CAAD,EAAkCjB,QAAlC,CAAb;EACD,CArBD;AAsBD","names":["modify","base","modifier","hasOwn","Object","prototype","hasOwnProperty","keys","reduce","s","mod","call","concat","bem","process","env","NODE_ENV","Error","block","elementOrModifier","TypeError"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\bem.ts"],"sourcesContent":["type Block = string;\ntype Element = string;\ntype Modifier = Record<string, unknown>;\n\nfunction modify(base: string, modifier?: Modifier): string {\n  if (!modifier) {\n    return base;\n  }\n\n  const hasOwn = Object.prototype.hasOwnProperty;\n  return Object.keys(modifier).reduce((s, mod) => {\n    if (hasOwn.call(modifier, mod) && modifier[mod]) {\n      s = `${s} ${base}--${mod}`;\n    }\n\n    return s;\n  }, base);\n}\n\ntype BEMResult = (\n  elementOrModifier?: Element | Modifier,\n  modifier?: Modifier\n) => string;\n\n/**\n * Applies the BEM styled class name to an element.\n *\n * @see https://en.bem.info/methodology/css/\n * @param base - The base class to use\n * @returns a function to call that generates the full class name\n */\nexport function bem(base: Block): BEMResult {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!base) {\n      throw new Error(\n        \"bem requires a base block class but none were provided.\"\n      );\n    }\n  }\n\n  /**\n   * Creates the full class name from the base block name. This can be called\n   * without any arguments which will just return the base block name (kind of\n   * worthless), or you can provide a child element name and modifiers.\n   *\n   * @param elementOrModifier - This is either the child element name or an\n   * object of modifiers to apply. This **must** be a string if the second\n   * argument is provided.\n   * @param modifier - Any optional modifiers to apply to the block and optional\n   * element.\n   * @returns the full class name\n   */\n  return function block(\n    elementOrModifier?: Element | Modifier,\n    modifier?: Modifier\n  ): string {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof elementOrModifier !== \"string\" && modifier) {\n        throw new TypeError(\n          \"bem does not support having two modifier arguments.\"\n        );\n      }\n    }\n\n    if (!elementOrModifier) {\n      return base;\n    }\n\n    if (typeof elementOrModifier !== \"string\") {\n      return modify(base, elementOrModifier);\n    }\n\n    return modify(`${base}__${elementOrModifier}`, modifier);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}