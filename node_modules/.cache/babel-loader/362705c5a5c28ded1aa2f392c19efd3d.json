{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nimport { useFieldStates } from \"../useFieldStates\";\nvar block = bem(\"rmd-text-field\");\nvar SPECIAL_TYPES = [\"date\", \"time\", \"datetime-local\", \"month\", \"week\", \"color\"];\n/**\n * The text field is a wrapper of the `<input type=\"text\" />` component with\n * some nice default themes. It can also be used to render other text input\n * types with _some_ support.\n */\n\nexport var TextField = forwardRef(function TextField(_a, ref) {\n  var style = _a.style,\n      className = _a.className,\n      inputStyle = _a.inputStyle,\n      inputClassName = _a.inputClassName,\n      label = _a.label,\n      labelStyle = _a.labelStyle,\n      labelClassName = _a.labelClassName,\n      _b = _a.type,\n      type = _b === void 0 ? \"text\" : _b,\n      propTheme = _a.theme,\n      _c = _a.dense,\n      dense = _c === void 0 ? false : _c,\n      _d = _a.inline,\n      inline = _d === void 0 ? false : _d,\n      _e = _a.error,\n      error = _e === void 0 ? false : _e,\n      _f = _a.stretch,\n      stretch = _f === void 0 ? false : _f,\n      _g = _a.disabled,\n      disabled = _g === void 0 ? false : _g,\n      propOnBlur = _a.onBlur,\n      propOnFocus = _a.onFocus,\n      propOnChange = _a.onChange,\n      containerRef = _a.containerRef,\n      _h = _a.isLeftAddon,\n      isLeftAddon = _h === void 0 ? true : _h,\n      _j = _a.isRightAddon,\n      isRightAddon = _j === void 0 ? true : _j,\n      leftChildren = _a.leftChildren,\n      rightChildren = _a.rightChildren,\n      propUnderlineDirection = _a.underlineDirection,\n      containerProps = _a.containerProps,\n      props = __rest(_a, [\"style\", \"className\", \"inputStyle\", \"inputClassName\", \"label\", \"labelStyle\", \"labelClassName\", \"type\", \"theme\", \"dense\", \"inline\", \"error\", \"stretch\", \"disabled\", \"onBlur\", \"onFocus\", \"onChange\", \"containerRef\", \"isLeftAddon\", \"isRightAddon\", \"leftChildren\", \"rightChildren\", \"underlineDirection\", \"containerProps\"]);\n\n  var id = props.id,\n      value = props.value,\n      defaultValue = props.defaultValue;\n\n  var _k = useFieldStates({\n    onBlur: propOnBlur,\n    onFocus: propOnFocus,\n    onChange: propOnChange,\n    value: value,\n    defaultValue: defaultValue\n  }),\n      valued = _k.valued,\n      focused = _k.focused,\n      onBlur = _k.onBlur,\n      onFocus = _k.onFocus,\n      onChange = _k.onChange;\n\n  var _l = useFormTheme({\n    theme: propTheme,\n    underlineDirection: propUnderlineDirection\n  }),\n      theme = _l.theme,\n      underlineDirection = _l.underlineDirection;\n\n  return _jsxs(TextFieldContainer, __assign({}, containerProps, {\n    style: style,\n    className: className,\n    ref: containerRef,\n    theme: theme,\n    error: error,\n    active: focused,\n    label: !!label,\n    dense: dense,\n    inline: inline,\n    stretch: stretch,\n    disabled: disabled,\n    isLeftAddon: isLeftAddon,\n    isRightAddon: isRightAddon,\n    leftChildren: leftChildren,\n    rightChildren: rightChildren,\n    underlineDirection: underlineDirection\n  }, {\n    children: [_jsx(FloatingLabel, __assign({\n      style: labelStyle,\n      className: labelClassName,\n      htmlFor: id,\n      error: error,\n      active: focused,\n      floating: focused || valued || SPECIAL_TYPES.includes(type),\n      valued: valued,\n      dense: dense,\n      disabled: disabled\n    }, {\n      children: label\n    })), _jsx(\"input\", __assign({}, props, {\n      ref: ref,\n      type: type,\n      disabled: disabled,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange,\n      style: inputStyle,\n      className: cn(block({\n        floating: label && theme !== \"none\"\n      }), inputClassName)\n    }))]\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","cn","bem","useFormTheme","FloatingLabel","TextFieldContainer","useFieldStates","block","SPECIAL_TYPES","TextField","_a","ref","className","inputStyle","inputClassName","label","labelStyle","labelClassName","_b","type","propTheme","_c","dense","_d","inline","_e","error","_f","stretch","_g","disabled","propOnBlur","propOnFocus","propOnChange","containerRef","_h","isLeftAddon","_j","isRightAddon","leftChildren","rightChildren","propUnderlineDirection","containerProps","props","value","defaultValue","onBlur","onFocus","onChange","valued","focused","theme","underlineDirection","_jsxs","__assign","style","active","children","_jsx","htmlFor","id","floating","includes"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\text-field\\TextField.tsx"],"sourcesContent":["import type {\n  CSSProperties,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  ReactNode,\n  Ref,\n} from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport type { TextFieldContainerOptions } from \"./TextFieldContainer\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nimport { useFieldStates } from \"../useFieldStates\";\n\n/**\n * These are all the \"supported\" input types for react-md so that they at least\n * render reasonably well by default. There is no built-in validation or\n * anything adding onto existing browser functionality for these types.\n *\n * @remarks \\@since 2.5.0 - `\"search\"` was added\n */\nexport type SupportedInputTypes =\n  | \"text\"\n  | \"password\"\n  | \"number\"\n  | \"tel\"\n  | \"email\"\n  | \"date\"\n  | \"time\"\n  | \"datetime-local\"\n  | \"month\"\n  | \"week\"\n  | \"url\"\n  | \"color\"\n  | \"search\";\n\ntype TextFieldAttributes = Omit<InputHTMLAttributes<HTMLInputElement>, \"type\">;\n\nexport interface TextFieldProps\n  extends TextFieldAttributes,\n    TextFieldContainerOptions {\n  /**\n   * The id for the text field. This is required for accessibility.\n   */\n  id: string;\n\n  /**\n   * The value to use for the text field. This will make the component\n   * controlled and require the `onChange` prop to be provided as well otherwise\n   * this will act as a read only text field.\n   */\n  value?: string;\n\n  /**\n   * The default value for the text field which will make it uncontrolled. If\n   * you manually change the `defaultValue` prop, the input's value **will not\n   * change** unless you provide a different `key` as well. Use the `value` prop\n   * instead for a controlled input.\n   */\n  defaultValue?: string;\n\n  /**\n   * An optional floating label to use for the text field. This should really\n   * only be used when the `theme` prop is not set to `\"none\"`. This will be\n   * wrapped in the `<Label>` component itself and automatically apply the\n   * `htmlFor` prop for this text field.\n   */\n  label?: ReactNode;\n\n  /**\n   * An optional style to apply to the label wrapper.\n   */\n  labelStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the label wrapper.\n   */\n  labelClassName?: string;\n\n  /**\n   * The type for the text field. `react-md`'s `TextField` supports rendering\n   * most of the input types, but will have no built-in validation or additional\n   * functionality included.\n   */\n  type?: SupportedInputTypes;\n\n  /**\n   * An optional style to apply to the input itself. The `style` prop will be\n   * applied to the container `<div>` instead.\n   */\n  inputStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the input itself. The `className` prop\n   * will be applied to the container `<div>` instead.\n   */\n  inputClassName?: string;\n\n  /**\n   * An optional ref to apply to the text field's container div element. The\n   * default ref is forwarded on to the `input` element.\n   */\n  containerRef?: Ref<HTMLDivElement>;\n\n  /**\n   * Any additional html attributes that should be applied to the main container\n   * div. This is probably only going to be used internally so that additional\n   * accessibility can be added to text fields for more complex widgets.\n   */\n  containerProps?: Omit<HTMLAttributes<HTMLDivElement>, \"style\" | \"className\">;\n}\n\nconst block = bem(\"rmd-text-field\");\n\nconst SPECIAL_TYPES: readonly SupportedInputTypes[] = [\n  \"date\",\n  \"time\",\n  \"datetime-local\",\n  \"month\",\n  \"week\",\n  \"color\",\n];\n\n/**\n * The text field is a wrapper of the `<input type=\"text\" />` component with\n * some nice default themes. It can also be used to render other text input\n * types with _some_ support.\n */\nexport const TextField = forwardRef<HTMLInputElement, TextFieldProps>(\n  function TextField(\n    {\n      style,\n      className,\n      inputStyle,\n      inputClassName,\n      label,\n      labelStyle,\n      labelClassName,\n      type = \"text\",\n      theme: propTheme,\n      dense = false,\n      inline = false,\n      error = false,\n      stretch = false,\n      disabled = false,\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      containerRef,\n      isLeftAddon = true,\n      isRightAddon = true,\n      leftChildren,\n      rightChildren,\n      underlineDirection: propUnderlineDirection,\n      containerProps,\n      ...props\n    },\n    ref\n  ) {\n    const { id, value, defaultValue } = props;\n    const { valued, focused, onBlur, onFocus, onChange } = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      value,\n      defaultValue,\n    });\n\n    const { theme, underlineDirection } = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection,\n    });\n\n    return (\n      <TextFieldContainer\n        {...containerProps}\n        style={style}\n        className={className}\n        ref={containerRef}\n        theme={theme}\n        error={error}\n        active={focused}\n        label={!!label}\n        dense={dense}\n        inline={inline}\n        stretch={stretch}\n        disabled={disabled}\n        isLeftAddon={isLeftAddon}\n        isRightAddon={isRightAddon}\n        leftChildren={leftChildren}\n        rightChildren={rightChildren}\n        underlineDirection={underlineDirection}\n      >\n        <FloatingLabel\n          style={labelStyle}\n          className={labelClassName}\n          htmlFor={id}\n          error={error}\n          active={focused}\n          floating={focused || valued || SPECIAL_TYPES.includes(type)}\n          valued={valued}\n          dense={dense}\n          disabled={disabled}\n        >\n          {label}\n        </FloatingLabel>\n        <input\n          {...props}\n          ref={ref}\n          type={type}\n          disabled={disabled}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          onChange={onChange}\n          style={inputStyle}\n          className={cn(\n            block({\n              floating: label && theme !== \"none\",\n            }),\n            inputClassName\n          )}\n        />\n      </TextFieldContainer>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}