{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { createElement, forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nfunction getComponent(component, type) {\n  if (component) {\n    return component;\n  }\n\n  switch (type) {\n    case \"headline-1\":\n      return \"h1\";\n\n    case \"headline-2\":\n      return \"h2\";\n\n    case \"headline-3\":\n      return \"h3\";\n\n    case \"headline-4\":\n      return \"h4\";\n\n    case \"headline-5\":\n      return \"h5\";\n\n    case \"headline-6\":\n    case \"subtitle-1\":\n    case \"subtitle-2\":\n      return \"h6\";\n\n    case \"body-1\":\n    case \"body-2\":\n      return \"p\";\n\n    case \"caption\":\n      return \"caption\";\n\n    case \"button\":\n      return \"button\";\n\n    default:\n      return \"span\";\n  }\n}\n\nvar block = bem(\"rmd-typography\");\n/**\n * The `Typography` component is used to render text with the material design\n * typography styles applied.  By default, everything will be rendered in a\n * `<p>` tag with the normal paragraph styles.\n *\n * When the `type` prop is changed to another typography style, this component\n * will determine the \"best\" element to render the text in *unless* the\n * `component` prop is provided. The default mapping is:\n *\n * - `\"headline-1\" -> <h1>`\n * - `\"headline-2\" -> <h2>`\n * - `\"headline-3\" -> <h3>`\n * - `\"headline-4\" -> <h4>`\n * - `\"headline-5\" -> <h5>`\n * - `\"headline-6\" -> <h6>`\n * - `\"subtitle-1\" -> <h5>`\n * - `\"subtitle-2\" -> <h6>`\n * - `\"body-1\"     -> <p>`\n * - `\"body-2\"     -> <p>`\n * - `\"caption\"    -> <caption>`\n * - `\"overline\"   -> <span>`\n * - `\"button\"     -> <button>`\n *\n * NOTE: if the `component` prop is not `null`, this logic will be ignored and\n * the provided `component` will be used instead.\n */\n\nexport var Typography = forwardRef(function Typography(_a, ref) {\n  var _b;\n\n  var propClassName = _a.className,\n      children = _a.children,\n      _c = _a.type,\n      type = _c === void 0 ? \"body-1\" : _c,\n      _d = _a.component,\n      component = _d === void 0 ? null : _d,\n      align = _a.align,\n      color = _a.color,\n      decoration = _a.decoration,\n      transform = _a.transform,\n      weight = _a.weight,\n      fontStyle = _a.fontStyle,\n      _e = _a.margin,\n      margin = _e === void 0 ? \"initial\" : _e,\n      props = __rest(_a, [\"className\", \"children\", \"type\", \"component\", \"align\", \"color\", \"decoration\", \"transform\", \"weight\", \"fontStyle\", \"margin\"]);\n\n  var className = cn(block((_b = {}, _b[type] = true, _b[\"no-margin\"] = margin === \"none\", _b[\"no-margin-top\"] = margin === \"bottom\", _b[\"no-margin-bottom\"] = margin === \"top\", _b[align || \"\"] = align, _b[decoration || \"\"] = decoration && decoration !== \"overline\", _b[color || \"\"] = color, // only because \"overline\" is technically one of the valid material design types :/\n  _b[\"overline-decoration\"] = decoration === \"overline\", _b[transform || \"\"] = transform, _b[weight || \"\"] = weight, _b[fontStyle || \"\"] = fontStyle, _b)), propClassName);\n\n  if (typeof children === \"function\") {\n    return children({\n      className: className\n    });\n  }\n\n  return createElement(getComponent(component, type), __assign(__assign({}, props), {\n    className: className,\n    ref: ref\n  }), children);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAMA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AA0JA,SAASC,YAAT,CACEC,SADF,EAEEC,IAFF,EAEsB;EAEpB,IAAID,SAAJ,EAAe;IACb,OAAOA,SAAP;EACD;;EAED,QAAQC,IAAR;IACE,KAAK,YAAL;MACE,OAAO,IAAP;;IACF,KAAK,YAAL;MACE,OAAO,IAAP;;IACF,KAAK,YAAL;MACE,OAAO,IAAP;;IACF,KAAK,YAAL;MACE,OAAO,IAAP;;IACF,KAAK,YAAL;MACE,OAAO,IAAP;;IACF,KAAK,YAAL;IACA,KAAK,YAAL;IACA,KAAK,YAAL;MACE,OAAO,IAAP;;IACF,KAAK,QAAL;IACA,KAAK,QAAL;MACE,OAAO,GAAP;;IACF,KAAK,SAAL;MACE,OAAO,SAAP;;IACF,KAAK,QAAL;MACE,OAAO,QAAP;;IACF;MACE,OAAO,MAAP;EAvBJ;AAyBD;;AAED,IAAMC,KAAK,GAAGJ,GAAG,CAAC,gBAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,IAAMK,UAAU,GAAGP,UAAU,CAClC,SAASO,UAAT,CACEC,EADF,EAeEC,GAfF,EAeK;;;EAbD,IAAWC,aAAa,eAAxB;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,YAFA;EAAA,IAEAP,IAAI,mBAAG,QAAH,GAAWO,EAFf;EAAA,IAGAC,iBAHA;EAAA,IAGAT,SAAS,mBAAG,IAAH,GAAOS,EAHhB;EAAA,IAIAC,KAAK,WAJL;EAAA,IAKAC,KAAK,WALL;EAAA,IAMAC,UAAU,gBANV;EAAA,IAOAC,SAAS,eAPT;EAAA,IAQAC,MAAM,YARN;EAAA,IASAC,SAAS,eATT;EAAA,IAUAC,cAVA;EAAA,IAUAC,MAAM,mBAAG,SAAH,GAAYD,EAVlB;EAAA,IAWGE,KAAK,cAZV,4HAYU,CAXR;;EAeF,IAAMC,SAAS,GAAGtB,EAAE,CAClBK,KAAK,WACHkB,GAACnB,IAAD,IAAQ,IADL,EAEHmB,kBAAaH,MAAM,KAAK,MAFrB,EAGHG,sBAAiBH,MAAM,KAAK,QAHzB,EAIHG,yBAAoBH,MAAM,KAAK,KAJ5B,EAKHG,GAACV,KAAK,IAAI,EAAV,IAAeA,KALZ,EAMHU,GAACR,UAAU,IAAI,EAAf,IAAoBA,UAAU,IAAIA,UAAU,KAAK,UAN9C,EAOHQ,GAACT,KAAK,IAAI,EAAV,IAAeA,KAPZ,EAQH;EACAS,4BAAuBR,UAAU,KAAK,UATnC,EAUHQ,GAACP,SAAS,IAAI,EAAd,IAAmBA,SAVhB,EAWHO,GAACN,MAAM,IAAI,EAAX,IAAgBA,MAXb,EAYHM,GAACL,SAAS,IAAI,EAAd,IAAmBA,SAZhB,MADa,EAelBT,aAfkB,CAApB;;EAiBA,IAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;IAClC,OAAQA,QAAqC,CAAC;MAAEY,SAAS;IAAX,CAAD,CAA7C;EACD;;EAED,OAAOxB,aAAa,CAClBI,YAAY,CAACC,SAAD,EAAYC,IAAZ,CADM,EACWoB,sBACxBH,KADwB,GACnB;IAAEC,SAAS,WAAX;IAAad,GAAG;EAAhB,CADmB,CADX,EAGlBE,QAHkB,CAApB;AAKD,CA5CiC,CAA7B","names":["createElement","forwardRef","cn","bem","getComponent","component","type","block","Typography","_a","ref","propClassName","children","_c","_d","align","color","decoration","transform","weight","fontStyle","_e","margin","props","className","_b","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\typography\\src\\Typography.tsx"],"sourcesContent":["import type {\n  ElementType,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n} from \"react\";\nimport { createElement, forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ClassNameCloneableChild } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\n/**\n * A union of all the material design provided typography styles. When used with\n * the Typography component, this will generate the correct typography className\n * to apply and determine what component to be rendered as if none was provided.\n *\n * @remarks \\@since 4.0.0\n */\nexport type TypographyType =\n  | \"headline-1\"\n  | \"headline-2\"\n  | \"headline-3\"\n  | \"headline-4\"\n  | \"headline-5\"\n  | \"headline-6\"\n  | \"subtitle-1\"\n  | \"subtitle-2\"\n  | \"body-1\"\n  | \"body-2\"\n  | \"caption\"\n  | \"overline\"\n  | \"button\";\n\nexport type TextAlign = \"left\" | \"center\" | \"right\";\nexport type TextDecoration = \"underline\" | \"overline\" | \"line-through\";\nexport type TextTransform = \"capitalize\" | \"uppercase\" | \"lowercase\";\nexport type TextWeight =\n  | \"thin\"\n  | \"light\"\n  | \"regular\"\n  | \"medium\"\n  | \"bold\"\n  | \"semi-bold\"\n  | \"black\";\nexport type TextColor =\n  | \"secondary\"\n  | \"hint\"\n  | \"theme-primary\"\n  | \"theme-secondary\"\n  | \"theme-warning\"\n  | \"theme-error\";\nexport type FontStyle = \"italic\" | \"oblique\" | \"normal\";\n\n/**\n * A union of the default supported elements that the `Typography` component can\n * be rendered as. This is mostly used for adding the correct `HTMLAttributes`\n * and enabling the forward ref.\n *\n * @remarks \\@since 4.0.0\n */\nexport type TypographyHTMLElement =\n  | HTMLHeadingElement\n  | HTMLParagraphElement\n  | HTMLSpanElement\n  | HTMLDivElement\n  | HTMLButtonElement\n  | HTMLAnchorElement\n  | HTMLBodyElement\n  | HTMLHtmlElement;\n\n/** @remarks \\@since 4.0.0 */\nexport type TypographyRenderFunction = (props: {\n  className: string;\n}) => ReactElement;\n\nexport interface TypographyProps extends HTMLAttributes<TypographyHTMLElement> {\n  /**\n   * An optional className to merge into typography styles.\n   */\n  className?: string;\n\n  /**\n   * The component to render as when the children are not a render function. If\n   * this prop is omitted, the component will be determined by the `type` prop\n   * where:\n   *\n   * - `\"headline-1\" -> <h1>`\n   * - `\"headline-2\" -> <h2>`\n   * - `\"headline-3\" -> <h3>`\n   * - `\"headline-4\" -> <h4>`\n   * - `\"headline-5\" -> <h5>`\n   * - `\"headline-6\" -> <h6>`\n   * - `\"subtitle-1\" -> <h5>`\n   * - `\"subtitle-2\" -> <h6>`\n   * - `\"body-1\"     -> <p>`\n   * - `\"body-2\"     -> <p>`\n   * - `\"caption\"    -> <caption>`\n   * - `\"overline\"   -> <span>`\n   * - `\"button\"     -> <button>`\n   *\n   */\n  component?: ElementType | null;\n\n  /**\n   * One of the material design typography text styles. This is used to generate\n   * a className that can be applied to any element and have the correct\n   * typography.\n   */\n  type?: TypographyType;\n\n  /**\n   * Either a child render function or a react node. If this is not the child\n   * render function, a different wrapper component can be provided using the\n   * `component` prop.\n   */\n  children?: ReactNode | ClassNameCloneableChild | TypographyRenderFunction;\n\n  /**\n   * An optional text alignment to apply.\n   */\n  align?: TextAlign;\n\n  /**\n   * An optional text color to apply. Unlike normal theme colors, these will\n   * reflect the `text-secondary-on-background` and `text-hint-on-background`\n   * instead of the primary or secondary theme colors.\n   */\n  color?: TextColor;\n\n  /**\n   * An optional text decoration to apply.\n   */\n  decoration?: TextDecoration;\n\n  /**\n   * An optional text transformation to apply.\n   */\n  transform?: TextTransform;\n\n  /**\n   * An optional font-weight to apply.\n   */\n  weight?: TextWeight;\n\n  /**\n   * An optional font-style to apply.\n   */\n  fontStyle?: FontStyle;\n\n  /**\n   * Since the typography within react-md tries to not modify base elements, the\n   * default margin applied to heading tags (h1-h6) and paragraph (p) might have\n   * large margin that you don't want applied when using this component. You can\n   * disable:\n   *\n   * - only the top margin by setting this prop to `\"bottom\"`\n   * - only the bottom margin by setting this prop to `\"top\"`\n   * - top and bottom margin by setting this prop to `\"none\"`\n   * - or keep the initial behavior: `\"initial\"`\n   */\n  margin?: \"initial\" | \"none\" | \"top\" | \"bottom\";\n}\n\nfunction getComponent(\n  component: ElementType | null,\n  type: TypographyType\n): ElementType {\n  if (component) {\n    return component;\n  }\n\n  switch (type) {\n    case \"headline-1\":\n      return \"h1\";\n    case \"headline-2\":\n      return \"h2\";\n    case \"headline-3\":\n      return \"h3\";\n    case \"headline-4\":\n      return \"h4\";\n    case \"headline-5\":\n      return \"h5\";\n    case \"headline-6\":\n    case \"subtitle-1\":\n    case \"subtitle-2\":\n      return \"h6\";\n    case \"body-1\":\n    case \"body-2\":\n      return \"p\";\n    case \"caption\":\n      return \"caption\";\n    case \"button\":\n      return \"button\";\n    default:\n      return \"span\";\n  }\n}\n\nconst block = bem(\"rmd-typography\");\n\n/**\n * The `Typography` component is used to render text with the material design\n * typography styles applied.  By default, everything will be rendered in a\n * `<p>` tag with the normal paragraph styles.\n *\n * When the `type` prop is changed to another typography style, this component\n * will determine the \"best\" element to render the text in *unless* the\n * `component` prop is provided. The default mapping is:\n *\n * - `\"headline-1\" -> <h1>`\n * - `\"headline-2\" -> <h2>`\n * - `\"headline-3\" -> <h3>`\n * - `\"headline-4\" -> <h4>`\n * - `\"headline-5\" -> <h5>`\n * - `\"headline-6\" -> <h6>`\n * - `\"subtitle-1\" -> <h5>`\n * - `\"subtitle-2\" -> <h6>`\n * - `\"body-1\"     -> <p>`\n * - `\"body-2\"     -> <p>`\n * - `\"caption\"    -> <caption>`\n * - `\"overline\"   -> <span>`\n * - `\"button\"     -> <button>`\n *\n * NOTE: if the `component` prop is not `null`, this logic will be ignored and\n * the provided `component` will be used instead.\n */\nexport const Typography = forwardRef<TypographyHTMLElement, TypographyProps>(\n  function Typography(\n    {\n      className: propClassName,\n      children,\n      type = \"body-1\",\n      component = null,\n      align,\n      color,\n      decoration,\n      transform,\n      weight,\n      fontStyle,\n      margin = \"initial\",\n      ...props\n    },\n    ref\n  ) {\n    const className = cn(\n      block({\n        [type]: true,\n        \"no-margin\": margin === \"none\",\n        \"no-margin-top\": margin === \"bottom\",\n        \"no-margin-bottom\": margin === \"top\",\n        [align || \"\"]: align,\n        [decoration || \"\"]: decoration && decoration !== \"overline\",\n        [color || \"\"]: color,\n        // only because \"overline\" is technically one of the valid material design types :/\n        \"overline-decoration\": decoration === \"overline\",\n        [transform || \"\"]: transform,\n        [weight || \"\"]: weight,\n        [fontStyle || \"\"]: fontStyle,\n      }),\n      propClassName\n    );\n    if (typeof children === \"function\") {\n      return (children as TypographyRenderFunction)({ className });\n    }\n\n    return createElement(\n      getComponent(component, type),\n      { ...props, className, ref },\n      children\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}