{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { getFuzzyRegExp } from \"./getFuzzyRegExp\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * Filters a list by using a fuzzy search \"algorithm\" (huge double quotes on\n * algorithm). The fuzzy search will just ensure that all the letters in the\n * query string appear in-order for all the remaining items. However, the\n * letters *do not need to be consecutive*.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\n\nexport function fuzzyFilter(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n      getItemValue = _a.getItemValue,\n      valueKey = _a.valueKey,\n      trim = _a.trim,\n      ignoreWhitespace = _a.ignoreWhitespace;\n\n  query = getSearchString(query, false, trim, ignoreWhitespace);\n\n  if (!searchable.length || !query) {\n    return searchable;\n  }\n\n  var queryRegExp = getFuzzyRegExp(query);\n  return searchable.filter(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), false, trim, ignoreWhitespace);\n    return value.length && value.match(queryRegExp);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,sBAAT,EAAiCC,eAAjC,QAAwD,SAAxD;AAEA;;;;;;;;;;;;;AAYA,OAAM,SAAUC,WAAV,CACJC,KADI,EAEJC,UAFI,EAGJC,OAHI,EAG0B;EAA9B;IAAAA;EAA8B;;EAExB,SAAqDP,QAAQ,CACjEO,OADiE,EAEjEL,sBAFiE,CAA7D;EAAA,IAAEM,YAAY,kBAAd;EAAA,IAAgBC,QAAQ,cAAxB;EAAA,IAA0BC,IAAI,UAA9B;EAAA,IAAgCC,gBAAgB,sBAAhD;;EAKNN,KAAK,GAAGF,eAAe,CAACE,KAAD,EAAQ,KAAR,EAAeK,IAAf,EAAqBC,gBAArB,CAAvB;;EACA,IAAI,CAACL,UAAU,CAACM,MAAZ,IAAsB,CAACP,KAA3B,EAAkC;IAChC,OAAOC,UAAP;EACD;;EAED,IAAMO,WAAW,GAAGZ,cAAc,CAACI,KAAD,CAAlC;EACA,OAAOC,UAAU,CAACQ,MAAX,CAAkB,UAACC,IAAD,EAAK;IAC5B,IAAMC,KAAK,GAAGb,eAAe,CAC3BK,YAAY,CAACO,IAAD,EAAON,QAAP,CADe,EAE3B,KAF2B,EAG3BC,IAH2B,EAI3BC,gBAJ2B,CAA7B;IAOA,OAAOK,KAAK,CAACJ,MAAN,IAAgBI,KAAK,CAACC,KAAN,CAAYJ,WAAZ,CAAvB;EACD,CATM,CAAP;AAUD","names":["defaults","getFuzzyRegExp","DEFAULT_SEARCH_OPTIONS","getSearchString","fuzzyFilter","query","searchable","options","getItemValue","valueKey","trim","ignoreWhitespace","length","queryRegExp","filter","item","value","match"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\search\\fuzzyFilter.ts"],"sourcesContent":["import { defaults } from \"../defaults\";\nimport { getFuzzyRegExp } from \"./getFuzzyRegExp\";\nimport type { SearchOptions } from \"./utils\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n\n/**\n * Filters a list by using a fuzzy search \"algorithm\" (huge double quotes on\n * algorithm). The fuzzy search will just ensure that all the letters in the\n * query string appear in-order for all the remaining items. However, the\n * letters *do not need to be consecutive*.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\nexport function fuzzyFilter<T = unknown>(\n  query: string,\n  searchable: readonly T[],\n  options: SearchOptions<T> = {}\n): readonly T[] {\n  const { getItemValue, valueKey, trim, ignoreWhitespace } = defaults(\n    options,\n    DEFAULT_SEARCH_OPTIONS\n  );\n\n  query = getSearchString(query, false, trim, ignoreWhitespace);\n  if (!searchable.length || !query) {\n    return searchable;\n  }\n\n  const queryRegExp = getFuzzyRegExp(query);\n  return searchable.filter((item) => {\n    const value = getSearchString(\n      getItemValue(item, valueKey),\n      false,\n      trim,\n      ignoreWhitespace\n    );\n\n    return value.length && value.match(queryRegExp);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}