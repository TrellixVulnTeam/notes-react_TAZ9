{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { buttonThemeClassNames } from \"@react-md/button\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { SrOnly } from \"@react-md/typography\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-file-input\");\n/**\n * This component is a wrapper for the `<input type=\"file\" />` that can be themed\n * like a button.\n */\n\nexport var FileInput = forwardRef(function FileInput(_a, ref) {\n  var style = _a.style,\n      propClassName = _a.className,\n      propIcon = _a.icon,\n      _b = _a.iconAfter,\n      iconAfter = _b === void 0 ? false : _b,\n      propChildren = _a.children,\n      _c = _a.theme,\n      theme = _c === void 0 ? \"primary\" : _c,\n      _d = _a.themeType,\n      themeType = _d === void 0 ? \"contained\" : _d,\n      _e = _a.buttonType,\n      buttonType = _e === void 0 ? propChildren ? \"text\" : \"icon\" : _e,\n      _f = _a.multiple,\n      multiple = _f === void 0 ? false : _f,\n      propDisableIconSpacing = _a.disableIconSpacing,\n      _g = _a.disableRepeatableFiles,\n      disableRepeatableFiles = _g === void 0 ? false : _g,\n      onKeyDown = _a.onKeyDown,\n      onKeyUp = _a.onKeyUp,\n      onMouseDown = _a.onMouseDown,\n      onMouseUp = _a.onMouseUp,\n      onMouseLeave = _a.onMouseLeave,\n      onClick = _a.onClick,\n      onTouchStart = _a.onTouchStart,\n      onTouchMove = _a.onTouchMove,\n      onTouchEnd = _a.onTouchEnd,\n      onChange = _a.onChange,\n      props = __rest(_a, [\"style\", \"className\", \"icon\", \"iconAfter\", \"children\", \"theme\", \"themeType\", \"buttonType\", \"multiple\", \"disableIconSpacing\", \"disableRepeatableFiles\", \"onKeyDown\", \"onKeyUp\", \"onMouseDown\", \"onMouseUp\", \"onMouseLeave\", \"onClick\", \"onTouchStart\", \"onTouchMove\", \"onTouchEnd\", \"onChange\"]);\n\n  var id = props.id,\n      disabled = props.disabled;\n  var icon = useIcon(\"upload\", propIcon);\n  var disableIconSpacing = propDisableIconSpacing !== null && propDisableIconSpacing !== void 0 ? propDisableIconSpacing : typeof propChildren === \"undefined\";\n  var children = propChildren;\n\n  if (typeof propChildren === \"undefined\") {\n    children = _jsx(SrOnly, {\n      children: \"Upload\"\n    });\n  }\n\n  var _h = useInteractionStates({\n    handlers: {\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      onTouchStart: onTouchStart,\n      onTouchMove: onTouchMove,\n      onTouchEnd: onTouchEnd\n    },\n    className: buttonThemeClassNames({\n      theme: theme,\n      themeType: themeType,\n      buttonType: buttonType,\n      disabled: disabled,\n      className: propClassName\n    }),\n    // pressing enter or space would trigger two click events otherwise.\n    disableEnterClick: true\n  }),\n      ripples = _h.ripples,\n      className = _h.className,\n      handlers = _h.handlers;\n\n  var content = icon;\n\n  if (disableIconSpacing || children && !icon) {\n    content = _jsxs(_Fragment, {\n      children: [!iconAfter && icon, children, iconAfter && icon]\n    });\n  } else if (children) {\n    content = _jsx(TextIconSpacing, __assign({\n      icon: icon,\n      iconAfter: iconAfter\n    }, {\n      children: children\n    }));\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"input\", __assign({}, props, handlers, {\n      ref: ref,\n      onChange: onChange,\n      value: disableRepeatableFiles ? undefined : \"\",\n      type: \"file\",\n      className: block(),\n      multiple: multiple\n    })), _jsxs(\"label\", __assign({\n      htmlFor: id,\n      style: style,\n      className: cn(\"rmd-file-input-label\", className)\n    }, {\n      children: [content, ripples]\n    }))]\n  });\n});","map":{"version":3,"mappings":"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","names":["forwardRef","cn","buttonThemeClassNames","TextIconSpacing","useIcon","useInteractionStates","SrOnly","bem","block","FileInput","_a","ref","propClassName","propIcon","_b","iconAfter","propChildren","_c","theme","_d","themeType","_e","buttonType","_f","multiple","propDisableIconSpacing","_g","disableRepeatableFiles","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave","onClick","onTouchStart","onTouchMove","onTouchEnd","onChange","props","disabled","icon","disableIconSpacing","children","_jsx","handlers","className","disableEnterClick","ripples","content","_jsxs","__assign","value","undefined","type","htmlFor","id","style"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\file-input\\FileInput.tsx"],"sourcesContent":["import type { InputHTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ButtonThemeProps } from \"@react-md/button\";\nimport { buttonThemeClassNames } from \"@react-md/button\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { SrOnly } from \"@react-md/typography\";\nimport { bem } from \"@react-md/utils\";\n\ntype InputAttributes = Omit<\n  InputHTMLAttributes<HTMLInputElement>,\n  \"type\" | \"defaultValue\" | \"value\"\n>;\n\nexport interface FileInputProps extends ButtonThemeProps, InputAttributes {\n  /**\n   * An id for the input. This is required for a11y since it also is applied as\n   * the `htmlFor` prop for the label.\n   */\n  id: string;\n\n  /**\n   * The change event handler to attach to this input. This is required since\n   * there's really no use in this component otherwise.\n   */\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n\n  /**\n   * An optional icon to display for the file input.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Boolean if the icon should appear after the children in the label.\n   */\n  iconAfter?: boolean;\n\n  /**\n   * Boolean if the children should not have some spacing between the icon and\n   * itself.  The default behavior is to use the `<TextIconSpacing>` component\n   * for text styled input buttons, but this can be disabled if you want to use\n   * a screen-reader only accessible label.\n   *\n   * Note: This will default to `false` if {@link children} are provided.\n   *\n   * @defaultValue `true`\n   */\n  disableIconSpacing?: boolean;\n\n  /**\n   * Boolean if the file input should no longer allow the same file to be\n   * selected multiple times and trigger the `onChange` each time it is\n   * selected.\n   */\n  disableRepeatableFiles?: boolean;\n\n  /**\n   * Children should generally be provided when the {@link buttonType} is\n   * set to `\"text\"`. This defaults to a screen-reader only accessible text.\n   *\n   * @defaultValue `<SrOnly>Upload</SrOnly>`\n   */\n  children?: ReactNode;\n}\n\nconst block = bem(\"rmd-file-input\");\n\n/**\n * This component is a wrapper for the `<input type=\"file\" />` that can be themed\n * like a button.\n */\nexport const FileInput = forwardRef<HTMLInputElement, FileInputProps>(\n  function FileInput(\n    {\n      style,\n      className: propClassName,\n      icon: propIcon,\n      iconAfter = false,\n      children: propChildren,\n      theme = \"primary\",\n      themeType = \"contained\",\n      buttonType = propChildren ? \"text\" : \"icon\",\n      multiple = false,\n      disableIconSpacing: propDisableIconSpacing,\n      disableRepeatableFiles = false,\n      onKeyDown,\n      onKeyUp,\n      onMouseDown,\n      onMouseUp,\n      onMouseLeave,\n      onClick,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n      onChange,\n      ...props\n    },\n    ref\n  ) {\n    const { id, disabled } = props;\n    const icon = useIcon(\"upload\", propIcon);\n    const disableIconSpacing =\n      propDisableIconSpacing ?? typeof propChildren === \"undefined\";\n\n    let children = propChildren;\n    if (typeof propChildren === \"undefined\") {\n      children = <SrOnly>Upload</SrOnly>;\n    }\n\n    const { ripples, className, handlers } = useInteractionStates({\n      handlers: {\n        onKeyDown,\n        onKeyUp,\n        onMouseDown,\n        onMouseUp,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n      },\n      className: buttonThemeClassNames({\n        theme,\n        themeType,\n        buttonType,\n        disabled,\n        className: propClassName,\n      }),\n      // pressing enter or space would trigger two click events otherwise.\n      disableEnterClick: true,\n    });\n\n    let content: ReactNode = icon;\n    if (disableIconSpacing || (children && !icon)) {\n      content = (\n        <>\n          {!iconAfter && icon}\n          {children}\n          {iconAfter && icon}\n        </>\n      );\n    } else if (children) {\n      content = (\n        <TextIconSpacing icon={icon} iconAfter={iconAfter}>\n          {children}\n        </TextIconSpacing>\n      );\n    }\n\n    return (\n      <>\n        <input\n          {...props}\n          {...handlers}\n          ref={ref}\n          onChange={onChange}\n          value={disableRepeatableFiles ? undefined : \"\"}\n          type=\"file\"\n          className={block()}\n          multiple={multiple}\n        />\n        <label\n          htmlFor={id}\n          style={style}\n          className={cn(\"rmd-file-input-label\", className)}\n        >\n          {content}\n          {ripples}\n        </label>\n      </>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}