{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { createRef, useCallback, useMemo, useState } from \"react\";\nimport { loop } from \"@react-md/utils\";\n/**\n * @internal\n */\n\nvar attemptFocus = function (index, panels) {\n  var _a;\n\n  var panel = (_a = panels[index]) === null || _a === void 0 ? void 0 : _a.headerRef.current;\n\n  if (panel) {\n    panel.focus();\n  }\n};\n/**\n * This hook is used to control the expansion of a list of panels along with\n * providing some of the required props for each panel. This hook will provide\n * an ordered list of:\n *\n * - the list of panel props that include the `id`, `key`, `expanded`, and\n *   `onExpandChange`.\n * - a keydown event handler to pass to a parent component (normally the\n *   ExpansionList) to allow keyboard movement with the arrow keys, and home+end\n *   keys. This should only be used when there are multiple panels.\n * - the current list of panel ids that are expanded\n * - the React setState dispatcher for controlling the expanded list of ids\n *   manually if desired\n * - a function to create a handler for toggling the expansion of a specific\n *   panel\n *\n * This hook is usually used to control a list of expansion panels, but can also\n * control a single panel if desired.\n *\n * Examples:\n *\n * Single panel:\n *\n * ```tsx\n * const [panels] = usePanels({ count: 1, idPrefix: \"my-panel\" });\n * // since the count is one, it'll just be a list of only one panel props\n * const [panelProps] = panels;\n *\n * return (\n *   <ExpansionPanel {...panelProps}>\n *     Content within the panel...\n *   </ExpansionPanel>\n * );\n * ```\n *\n * Multiple Panels:\n *\n * ```tsx\n * const [panels, onKeyDown] = usePanels({ count: 3, idPrefix: \"panel-list\" });\n *\n * const [panel1Props, panel2Props, panel3Props] = panels;\n *\n * return (\n *   <ExpansionList onKeyDown={onKeyDown}>\n *     <ExpansionPanel {...panel1Props}>\n *       Panel 1 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel2Props}>\n *       Panel 2 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel3Props}>\n *       Panel 3 Content...\n *     </ExpansionPanel>\n *   </ExpansionList>\n * );\n * ```\n */\n\n\nexport function usePanels(_a) {\n  var idPrefix = _a.idPrefix,\n      count = _a.count,\n      _b = _a.multiple,\n      multiple = _b === void 0 ? false : _b,\n      _c = _a.preventAllClosed,\n      preventAllClosed = _c === void 0 ? false : _c,\n      defaultExpandedIndex = _a.defaultExpandedIndex;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (count < 1) {\n      throw new RangeError(\"The `count` must be greater than `0`\");\n    }\n\n    if (typeof defaultExpandedIndex === \"number\" && defaultExpandedIndex >= count) {\n      throw new RangeError(\"The `defaultExpandedIndex` must be less than or equal to the `count`\");\n    }\n\n    if (typeof defaultExpandedIndex === \"number\" && defaultExpandedIndex < -1) {\n      throw new RangeError(\"The `defaultExpandedIndex` must be greater than or equal to `-1`\");\n    }\n\n    if (Array.isArray(defaultExpandedIndex)) {\n      var greater = defaultExpandedIndex.filter(function (i) {\n        return i > count;\n      });\n\n      if (greater.length) {\n        throw new RangeError(\"The `defaultExpandedIndex` array must contain numbers less than the `count`\");\n      }\n\n      var lessThan = defaultExpandedIndex.filter(function (i) {\n        return i < 0;\n      });\n\n      if (lessThan.length) {\n        throw new RangeError(\"The `defaultExpandedIndex` array must contain numbers greater than or equal to `0`\");\n      }\n    }\n  }\n\n  var panels = useMemo(function () {\n    return Array.from({\n      length: count\n    }, function (_, i) {\n      return {\n        id: \"\".concat(idPrefix, \"-\").concat(i + 1),\n        headerRef: createRef()\n      };\n    });\n  }, [idPrefix, count]);\n\n  var _d = __read(useState(function () {\n    if (typeof defaultExpandedIndex === \"undefined\") {\n      return preventAllClosed ? [panels[0].id] : [];\n    }\n\n    if (typeof defaultExpandedIndex === \"number\") {\n      return defaultExpandedIndex === -1 ? panels.map(function (_a) {\n        var id = _a.id;\n        return id;\n      }) : [panels[Math.min(defaultExpandedIndex, panels.length)].id];\n    }\n\n    return panels.filter(function (_, i) {\n      return defaultExpandedIndex.includes(i);\n    }).map(function (_a) {\n      var id = _a.id;\n      return id;\n    });\n  }), 2),\n      expandedIds = _d[0],\n      setExpandedIds = _d[1];\n\n  var createExpandClick = function (panelId) {\n    return function () {\n      setExpandedIds(function (prevIds) {\n        var i = prevIds.indexOf(panelId);\n\n        if (!multiple) {\n          if (prevIds[0] === panelId && prevIds.length === 1) {\n            return preventAllClosed ? prevIds : [];\n          }\n\n          return [panelId];\n        }\n\n        var nextSelectedIds = prevIds.slice();\n\n        if (i === -1) {\n          nextSelectedIds.push(panelId);\n        } else {\n          nextSelectedIds.splice(i, 1);\n        }\n\n        if (preventAllClosed && nextSelectedIds.length === 0) {\n          return [panelId];\n        }\n\n        return nextSelectedIds;\n      });\n    };\n  };\n\n  var previousExpanded = false;\n  var panelPropList = panels.map(function (_a, i) {\n    var id = _a.id,\n        headerRef = _a.headerRef;\n    var expanded = expandedIds.includes(id);\n    var marginTop = i > 0 && (expanded || previousExpanded);\n    previousExpanded = expanded;\n    return {\n      id: id,\n      disabled: expanded && preventAllClosed && expandedIds.length === 1,\n      expanded: expanded,\n      headerRef: headerRef,\n      marginTop: marginTop,\n      onExpandClick: createExpandClick(id)\n    };\n  });\n  var onKeyDown = useCallback(function (event) {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n      return;\n    }\n\n    var key = event.key;\n    var increment = key === \"ArrowDown\";\n    var decrement = key === \"ArrowUp\";\n    var jumpToFirst = key === \"Home\";\n    var jumpToLast = key === \"End\";\n\n    if (!increment && !decrement && !jumpToFirst && !jumpToLast) {\n      return;\n    }\n\n    var currentIndex = panels.findIndex(function (_a) {\n      var headerRef = _a.headerRef;\n      return event.target === headerRef.current;\n    });\n\n    if (currentIndex === -1) {\n      return;\n    } // don't want page scroll behavior\n\n\n    event.preventDefault();\n\n    if (jumpToFirst) {\n      attemptFocus(0, panels);\n      return;\n    }\n\n    if (jumpToLast) {\n      attemptFocus(panels.length - 1, panels);\n      return;\n    }\n\n    attemptFocus(loop({\n      value: currentIndex,\n      max: panels.length - 1,\n      increment: increment\n    }), panels);\n  }, [panels]);\n  return [panelPropList, onKeyDown, expandedIds, setExpandedIds, createExpandClick];\n}","map":{"version":3,"mappings":"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","names":["createRef","useCallback","useMemo","useState","loop","attemptFocus","index","panels","panel","_a","headerRef","current","focus","usePanels","idPrefix","count","_b","multiple","_c","preventAllClosed","defaultExpandedIndex","process","env","NODE_ENV","RangeError","Array","isArray","greater","filter","i","length","lessThan","from","_","id","concat","map","Math","min","includes","expandedIds","setExpandedIds","createExpandClick","panelId","prevIds","indexOf","nextSelectedIds","slice","push","splice","previousExpanded","panelPropList","expanded","marginTop","disabled","onExpandClick","onKeyDown","event","shiftKey","ctrlKey","metaKey","altKey","increment","key","decrement","jumpToFirst","jumpToLast","currentIndex","findIndex","target","preventDefault","value","max"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\expansion-panel\\src\\usePanels.ts"],"sourcesContent":["import type {\n  Dispatch,\n  KeyboardEventHandler,\n  RefObject,\n  SetStateAction,\n} from \"react\";\nimport { createRef, useCallback, useMemo, useState } from \"react\";\nimport { loop } from \"@react-md/utils\";\n\nexport interface UsePanelsOptions {\n  /**\n   * The prefix to use for all of the panel ids. This is used to generate the id\n   * for each panel as well as determine if a panel is expanded.\n   */\n  idPrefix: string;\n\n  /**\n   * The number of panels that will be used by this expansion logic and\n   * generates the number of panel props to be used in the return value. This\n   * should be a number greater than 0 and will throw a `RangeError` if it is\n   * not in development.\n   */\n  count: number;\n\n  /**\n   * Boolean if multiple panels can be expanded at a time. The default behavior\n   * is to only allow one panel to be expanded and will close the previous panel\n   * when a new one is expanded.\n   */\n  multiple?: boolean;\n\n  /**\n   * Boolean if the expansion logic should prevent all the panels from being\n   * closed.\n   */\n  preventAllClosed?: boolean;\n\n  /**\n   * Either the index that should be expanded by default, a list of indexes that\n   * should be expanded by default, or `-1` which will expand all panels by\n   * default.\n   *\n   * When this is omitted and `undefined`, no panels will be expanded by\n   * default.\n   */\n  defaultExpandedIndex?: number | readonly number[];\n}\n\n/**\n * An object of props that gets generated for each panel within the hook.\n */\nexport interface ProvidedPanelProps {\n  /**\n   * The DOM id for the panel which is really just `${idPrefix}-${index + 1}`.\n   */\n  id: string;\n\n  /**\n   * A ref object for the panel. This is required so that the parent keyboard\n   * event handler can focus the next/previous/first/last panel when the correct\n   * arrow key or home/end key is pressed. If there is only one panel and the\n   * keydown event handler isn't being used, this prop is not required to be\n   * passed to the expansion panel.\n   */\n  headerRef: RefObject<HTMLButtonElement>;\n\n  /**\n   * This will be `true` when the panel is expanded or the previous panel was\n   * expanded and the panel is not the first panel in the list.\n   */\n  marginTop: boolean;\n\n  /**\n   * Boolean if the panel's expansion state should be disabled. This will only\n   * be true when the `preventAllClosed` option has been enabled and the panel\n   * is the last remaining expanded panel.\n   */\n  disabled: boolean;\n\n  /**\n   * Boolean if the panel is currently expanded.\n   */\n  expanded: boolean;\n\n  /**\n   * A function that will toggle the expansion of this panel in the list.\n   */\n  onExpandClick(): void;\n}\n\ntype ExpandedIds = readonly string[];\ntype CreateExpandById = (panelId: string) => () => void;\ntype ExpansionDispatcher = Dispatch<SetStateAction<ExpandedIds>>;\ntype ExpansionPanelKeyDownHandler = KeyboardEventHandler<HTMLDivElement>;\n\ntype ReturnValue = [\n  readonly ProvidedPanelProps[],\n  ExpansionPanelKeyDownHandler,\n  ExpandedIds,\n  ExpansionDispatcher,\n  CreateExpandById\n];\n\ntype PanelMemo = Pick<ProvidedPanelProps, \"id\" | \"headerRef\">;\n\n/**\n * @internal\n */\nconst attemptFocus = (index: number, panels: readonly PanelMemo[]): void => {\n  const panel = panels[index]?.headerRef.current;\n  if (panel) {\n    panel.focus();\n  }\n};\n\n/**\n * This hook is used to control the expansion of a list of panels along with\n * providing some of the required props for each panel. This hook will provide\n * an ordered list of:\n *\n * - the list of panel props that include the `id`, `key`, `expanded`, and\n *   `onExpandChange`.\n * - a keydown event handler to pass to a parent component (normally the\n *   ExpansionList) to allow keyboard movement with the arrow keys, and home+end\n *   keys. This should only be used when there are multiple panels.\n * - the current list of panel ids that are expanded\n * - the React setState dispatcher for controlling the expanded list of ids\n *   manually if desired\n * - a function to create a handler for toggling the expansion of a specific\n *   panel\n *\n * This hook is usually used to control a list of expansion panels, but can also\n * control a single panel if desired.\n *\n * Examples:\n *\n * Single panel:\n *\n * ```tsx\n * const [panels] = usePanels({ count: 1, idPrefix: \"my-panel\" });\n * // since the count is one, it'll just be a list of only one panel props\n * const [panelProps] = panels;\n *\n * return (\n *   <ExpansionPanel {...panelProps}>\n *     Content within the panel...\n *   </ExpansionPanel>\n * );\n * ```\n *\n * Multiple Panels:\n *\n * ```tsx\n * const [panels, onKeyDown] = usePanels({ count: 3, idPrefix: \"panel-list\" });\n *\n * const [panel1Props, panel2Props, panel3Props] = panels;\n *\n * return (\n *   <ExpansionList onKeyDown={onKeyDown}>\n *     <ExpansionPanel {...panel1Props}>\n *       Panel 1 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel2Props}>\n *       Panel 2 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel3Props}>\n *       Panel 3 Content...\n *     </ExpansionPanel>\n *   </ExpansionList>\n * );\n * ```\n */\nexport function usePanels({\n  idPrefix,\n  count,\n  multiple = false,\n  preventAllClosed = false,\n  defaultExpandedIndex,\n}: UsePanelsOptions): ReturnValue {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (count < 1) {\n      throw new RangeError(\"The `count` must be greater than `0`\");\n    }\n\n    if (\n      typeof defaultExpandedIndex === \"number\" &&\n      defaultExpandedIndex >= count\n    ) {\n      throw new RangeError(\n        \"The `defaultExpandedIndex` must be less than or equal to the `count`\"\n      );\n    }\n\n    if (typeof defaultExpandedIndex === \"number\" && defaultExpandedIndex < -1) {\n      throw new RangeError(\n        \"The `defaultExpandedIndex` must be greater than or equal to `-1`\"\n      );\n    }\n\n    if (Array.isArray(defaultExpandedIndex)) {\n      const greater = defaultExpandedIndex.filter((i) => i > count);\n      if (greater.length) {\n        throw new RangeError(\n          \"The `defaultExpandedIndex` array must contain numbers less than the `count`\"\n        );\n      }\n\n      const lessThan = defaultExpandedIndex.filter((i) => i < 0);\n      if (lessThan.length) {\n        throw new RangeError(\n          \"The `defaultExpandedIndex` array must contain numbers greater than or equal to `0`\"\n        );\n      }\n    }\n  }\n\n  const panels = useMemo<readonly PanelMemo[]>(\n    () =>\n      Array.from({ length: count }, (_, i) => ({\n        id: `${idPrefix}-${i + 1}`,\n        headerRef: createRef<HTMLButtonElement>(),\n      })),\n    [idPrefix, count]\n  );\n\n  const [expandedIds, setExpandedIds] = useState<ExpandedIds>(() => {\n    if (typeof defaultExpandedIndex === \"undefined\") {\n      return preventAllClosed ? [panels[0].id] : [];\n    }\n\n    if (typeof defaultExpandedIndex === \"number\") {\n      return defaultExpandedIndex === -1\n        ? panels.map(({ id }) => id)\n        : [panels[Math.min(defaultExpandedIndex, panels.length)].id];\n    }\n\n    return panels\n      .filter((_, i) => defaultExpandedIndex.includes(i))\n      .map(({ id }) => id);\n  });\n\n  const createExpandClick: CreateExpandById = (panelId) => () => {\n    setExpandedIds((prevIds) => {\n      const i = prevIds.indexOf(panelId);\n      if (!multiple) {\n        if (prevIds[0] === panelId && prevIds.length === 1) {\n          return preventAllClosed ? prevIds : [];\n        }\n\n        return [panelId];\n      }\n\n      const nextSelectedIds = prevIds.slice();\n      if (i === -1) {\n        nextSelectedIds.push(panelId);\n      } else {\n        nextSelectedIds.splice(i, 1);\n      }\n\n      if (preventAllClosed && nextSelectedIds.length === 0) {\n        return [panelId];\n      }\n\n      return nextSelectedIds;\n    });\n  };\n\n  let previousExpanded = false;\n  const panelPropList = panels.map(({ id, headerRef }, i) => {\n    const expanded = expandedIds.includes(id);\n    const marginTop = i > 0 && (expanded || previousExpanded);\n    previousExpanded = expanded;\n\n    return {\n      id,\n      disabled: expanded && preventAllClosed && expandedIds.length === 1,\n      expanded,\n      headerRef,\n      marginTop,\n      onExpandClick: createExpandClick(id),\n    };\n  });\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n        return;\n      }\n\n      const { key } = event;\n      const increment = key === \"ArrowDown\";\n      const decrement = key === \"ArrowUp\";\n      const jumpToFirst = key === \"Home\";\n      const jumpToLast = key === \"End\";\n      if (!increment && !decrement && !jumpToFirst && !jumpToLast) {\n        return;\n      }\n\n      const currentIndex = panels.findIndex(\n        ({ headerRef }) => event.target === headerRef.current\n      );\n      if (currentIndex === -1) {\n        return;\n      }\n\n      // don't want page scroll behavior\n      event.preventDefault();\n      if (jumpToFirst) {\n        attemptFocus(0, panels);\n        return;\n      }\n\n      if (jumpToLast) {\n        attemptFocus(panels.length - 1, panels);\n        return;\n      }\n\n      attemptFocus(\n        loop({\n          value: currentIndex,\n          max: panels.length - 1,\n          increment,\n        }),\n        panels\n      );\n    },\n    [panels]\n  );\n\n  return [\n    panelPropList,\n    onKeyDown,\n    expandedIds,\n    setExpandedIds,\n    createExpandClick,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}