{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useEnsuredRef } from \"@react-md/utils\";\nimport { useTransition } from \"./useTransition\";\nimport { getElementSizing, getTransitionTimeout } from \"./utils\";\n/**\n * @remarks \\@since 2.0.0\n */\n\nexport var DEFAULT_COLLAPSE_MIN_HEIGHT = 0;\n/**\n * @remarks \\@since 2.0.0\n */\n\nexport var DEFAULT_COLLAPSE_MIN_PADDING_TOP = 0;\n/**\n * @remarks \\@since 2.0.0\n */\n\nexport var DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM = 0;\n/**\n * @remarks \\@since 2.0.0\n */\n\nexport var DEFAULT_COLLAPSE_TIMEOUT = {\n  enter: 250,\n  exit: 200\n};\n/**\n * This hook is used to create a transition to collapse and expand an element\n * **inline** with other content like an accordion by animating the\n * `max-height`, `padding-top`, and `padding-bottom` CSS properties. The default\n * behavior is to hide the element completely while collapsed, but providing the\n * `minHeight`, `minPaddingTop`, and `minPaddingBottom` options can make this\n * work like a \"See More\"/\"Preview\" type of element\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps, rendered } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       // If the collapsible element should maintain state by not unmounting\n *       // while collapsed, uncomment this next line\n *       // temporary: false,\n *     });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <div {...elementProps}>\n *           <Typography>Stuff that should be collapsed</Typography>\n *           <div>Whatever content...</div>\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * See More Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { IconRotator } from \"@react-md/icon\";\n * import { KeyboardArrowDownSVGIcon } from \"@react-md/material-icons\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * import styles from \"./Example.module.scss\";\n * // pretend styles:\n * //\n * // .container {\n * //   padding: 1rem;\n * //   position: relative;\n * // }\n * //\n * // .button {\n * //   position: absolute;\n * //   right: 0;\n * //   top: 0;\n * // }\n *\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       minHeight: 120,\n *       minPaddingTop: 16,\n *       className: styles.container,\n *     });\n *\n *   return (\n *     <div {...elementProps}>\n *       <Button\n *         aria-expanded={!collapsed}\n *         aria-label=\"Expand\"\n *         onClick={() => setCollapsed(!collapsed)}\n *         buttonType=\"icon\"\n *         className={styles.button}\n *       >\n *         <IconRotator rotated={!collapsed}>\n *           <KeyboardArrowDownSVGIcon />\n *         </IconRotator>\n *       </Button>\n *       <SomeComponentWithALotOfContent />\n *     </div>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\n\nexport function useCollapseTransition(_a) {\n  var propNodeRef = _a.nodeRef,\n      propStyle = _a.style,\n      className = _a.className,\n      transitionIn = _a.transitionIn,\n      _b = _a.timeout,\n      timeout = _b === void 0 ? DEFAULT_COLLAPSE_TIMEOUT : _b,\n      _c = _a.minHeight,\n      minHeight = _c === void 0 ? DEFAULT_COLLAPSE_MIN_HEIGHT : _c,\n      _d = _a.minPaddingTop,\n      minPaddingTop = _d === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_TOP : _d,\n      _e = _a.minPaddingBottom,\n      minPaddingBottom = _e === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM : _e,\n      _f = _a.temporary,\n      temporary = _f === void 0 ? minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0 : _f,\n      _g = _a.appear,\n      appear = _g === void 0 ? false : _g,\n      _h = _a.enter,\n      enter = _h === void 0 ? true : _h,\n      _j = _a.exit,\n      exit = _j === void 0 ? true : _j,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited;\n\n  var _k = __read(useEnsuredRef(propNodeRef), 2),\n      nodeRef = _k[0],\n      refCallback = _k[1];\n\n  var _l = __read(useState(function () {\n    if (transitionIn) {\n      return undefined;\n    }\n\n    return {\n      maxHeight: minHeight,\n      paddingTop: minPaddingTop,\n      paddingBottom: minPaddingBottom\n    };\n  }), 2),\n      style = _l[0],\n      setStyle = _l[1];\n\n  var transitionTimeout = getTransitionTimeout({\n    timeout: timeout,\n    appear: appear,\n    enter: enter,\n    exit: exit\n  });\n\n  var _m = useTransition({\n    nodeRef: refCallback,\n    timeout: timeout,\n    transitionIn: transitionIn,\n    reflow: true,\n    appear: appear,\n    enter: enter,\n    exit: exit,\n    temporary: temporary,\n    onEnter: function (appearing) {\n      onEnter === null || onEnter === void 0 ? void 0 : onEnter(appearing);\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom\n      });\n    },\n    onEntering: function (appearing) {\n      onEntering === null || onEntering === void 0 ? void 0 : onEntering(appearing);\n\n      var _a = getElementSizing(nodeRef.current),\n          maxHeight = _a.maxHeight,\n          paddingTop = _a.paddingTop,\n          paddingBottom = _a.paddingBottom;\n\n      var duration = appearing ? transitionTimeout.appear : transitionTimeout.enter;\n      setStyle({\n        maxHeight: maxHeight,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        transitionDuration: \"\".concat(duration, \"ms\")\n      });\n    },\n    onEntered: function (appearing) {\n      onEntered === null || onEntered === void 0 ? void 0 : onEntered(appearing);\n      setStyle(undefined);\n    },\n    onExit: function () {\n      onExit === null || onExit === void 0 ? void 0 : onExit();\n\n      var _a = getElementSizing(nodeRef.current),\n          maxHeight = _a.maxHeight,\n          paddingTop = _a.paddingTop,\n          paddingBottom = _a.paddingBottom;\n\n      setStyle({\n        maxHeight: maxHeight,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        transitionDuration: \"\".concat(transitionTimeout.exit, \"ms\")\n      });\n    },\n    onExiting: function () {\n      onExiting === null || onExiting === void 0 ? void 0 : onExiting();\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n        transitionDuration: \"\".concat(transitionTimeout.exit, \"ms\")\n      });\n    },\n    onExited: function () {\n      onExited === null || onExited === void 0 ? void 0 : onExited();\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom\n      });\n    }\n  }),\n      appearing = _m.appearing,\n      rendered = _m.rendered,\n      ref = _m.ref,\n      stage = _m.stage,\n      transitionTo = _m.transitionTo;\n\n  var entering = stage === \"enter\" || stage === \"entering\";\n  var exiting = stage === \"exit\" || stage === \"exiting\";\n  var collapsible = transitionTimeout.enter !== 0 || transitionTimeout.exit !== 0;\n  var elementProps = {\n    ref: ref,\n    style: __assign(__assign({}, style), propStyle),\n    className: cn({\n      \"rmd-collapse\": collapsible,\n      \"rmd-collapse--enter\": entering,\n      \"rmd-collapse--leave\": exiting,\n      \"rmd-collapse--no-overflow\": !transitionIn || style\n    }, className) || undefined,\n    hidden: !transitionIn && rendered && stage === \"exited\" && !temporary && minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0\n  };\n  return __assign(__assign({}, elementProps), {\n    stage: stage,\n    rendered: rendered,\n    appearing: appearing,\n    elementProps: elementProps,\n    transitionTo: transitionTo\n  });\n}","map":{"version":3,"mappings":"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","names":["useState","cn","useEnsuredRef","useTransition","getElementSizing","getTransitionTimeout","DEFAULT_COLLAPSE_MIN_HEIGHT","DEFAULT_COLLAPSE_MIN_PADDING_TOP","DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM","DEFAULT_COLLAPSE_TIMEOUT","enter","exit","useCollapseTransition","_a","propNodeRef","propStyle","className","transitionIn","_b","timeout","_c","minHeight","_d","minPaddingTop","_e","minPaddingBottom","_f","temporary","_g","appear","_h","_j","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef","refCallback","undefined","maxHeight","paddingTop","paddingBottom","style","setStyle","transitionTimeout","reflow","appearing","current","duration","transitionDuration","rendered","ref","stage","transitionTo","entering","exiting","collapsible","elementProps","hidden"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\transition\\src\\useCollapseTransition.ts"],"sourcesContent":["import type { CSSProperties } from \"react\";\nimport { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useEnsuredRef } from \"@react-md/utils\";\n\nimport type {\n  CSSTransitionElementProps,\n  CSSTransitionHookReturnValue,\n  PreconfiguredCSSTransitionOptions,\n  TransitionTimeout,\n  TransitionTimeoutObject,\n} from \"./types\";\nimport { useTransition } from \"./useTransition\";\nimport { getElementSizing, getTransitionTimeout } from \"./utils\";\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_MIN_HEIGHT = 0;\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_MIN_PADDING_TOP = 0;\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM = 0;\n\n/**\n * @remarks \\@since 2.0.0\n */\nexport const DEFAULT_COLLAPSE_TIMEOUT: Readonly<TransitionTimeoutObject> = {\n  enter: 250,\n  exit: 200,\n};\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseConfigurationStyle {\n  /**\n   * The minimum height that the collapsed element can be which defaults to `0`.\n   * This can either be a number of pixels or a string CSS height value.\n   *\n   * Setting this value to any non-zero value will allow for the element to\n   * shrink to the defined min-height, and then expand to the full height once\n   * no longer collapsed.\n   *\n   * Note: If the `minHeight`, `minPaddingTop`, and `minPaddingBottom` options\n   * are all set to `0` (default), the child will be removed from the DOM while\n   * collapsed.\n   *\n   * @see {@link DEFAULT_COLLAPSE_MIN_HEIGHT}\n   * @defaultValue `DEFAULT_COLLAPSE_MIN_HEIGHT`\n   */\n  minHeight?: number | string;\n\n  /**\n   * The minimum padding-top that the collapsed element can be which defaults to\n   * `0`. This can either be a number of pixels or a string CSS `padding-top`\n   * value.\n   *\n   * Note: If the `minHeight`, `minPaddingTop`, and `minPaddingBottom` options\n   * are all set to `0` (default), the child will be removed from the DOM while\n   * collapsed.\n   *\n   * @see {@link DEFAULT_COLLAPSE_MIN_PADDING_TOP}\n   * @defaultValue `DEFAULT_COLLAPSE_MIN_PADDING_TOP`\n   */\n  minPaddingTop?: number | string;\n\n  /**\n   * The minimum padding-bottom that the collapsed element can be which defaults\n   * to `0`. This can either be a number of pixels or a string CSS\n   * `padding-bottom` value.\n   *\n   * Note: If the `minHeight`, `minPaddingTop`, and `minPaddingBottom` options\n   * are all set to `0` (default), the child will be removed from the DOM while\n   * collapsed.\n   *\n   * @see {@link DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM}\n   * @defaultValue `DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM`\n   */\n  minPaddingBottom?: number | string;\n}\n\n/**\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseStyle extends CollapseConfigurationStyle {\n  /**\n   * This will only be set when the {@link TransitionStage} is `\"entering\"` or\n   * `\"exiting\"` as `\"${timeout}ms\"`.\n   */\n  transitionDuration?: string;\n}\n\n/**\n * These props (and `ref`) **must** be passed to a DOM element for the collapse\n * transition to work.\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseElementProps<E extends HTMLElement>\n  extends CSSTransitionElementProps<E> {\n  /**\n   * A merged styled object required for the collapse transition to work.\n   *\n   * @see {@link CollapseStyle}\n   * @see {@link CollapseTransitionHookOptions.style}\n   */\n  style: CSSProperties;\n\n  /**\n   * This will be set to true when the element is fully collapsed and the\n   * {@link CollapseTransitionHookOptions.temporary} is set to `false`. This\n   * should be applied as the `hidden` attribute to a DOM node.\n   */\n  hidden: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseTransitionHookOptions<E extends HTMLElement>\n  extends PreconfiguredCSSTransitionOptions<E>,\n    CollapseConfigurationStyle {\n  /**\n   * An optional style to merge with the required collapse transition styles.\n   *\n   * If any keys from the {@link CollapseStyle} are included in this object,\n   * these styles will override and possibly break the collapse transition.\n   */\n  style?: CSSProperties;\n\n  /**\n   *\n   * @see {@link DEFAULT_COLLAPSE_TIMEOUT}\n   * @defaultValue `DEFAULT_COLLAPSE_TIMEOUT`\n   */\n  timeout?: TransitionTimeout;\n\n  /**\n   *\n   * @defaultValue `minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0`\n   */\n  temporary?: boolean;\n}\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport interface CollapseTransitionHookReturnValue<E extends HTMLElement>\n  extends CSSTransitionHookReturnValue<E>,\n    CollapseElementProps<E> {\n  /**\n   * This is just a convenience object so that you don't need to destructure as\n   * many variables to pass to an element.\n   *\n   * @example\n   * Simple Usage\n   * ```tsx\n   * const { elementProps, rendered } = useCollapseTransition({\n   *   // ...options\n   *   transitionIn,\n   * });\n   *\n   * if (!rendered) {\n   *   return null\n   * }\n   *\n   * return <div {...elementProps}>{children}</div>;\n   *\n   * // This is the long-hand version\n   * const { ref, style, className, hidden, rendered } = useCollapseTransition({\n   *   // ...options\n   *   transitionIn,\n   * });\n   *\n   * if (!rendered) {\n   *   return null\n   * }\n   *\n   * return (\n   *   <div\n   *     ref={ref}\n   *     style={style}\n   *     className={className}\n   *     hidden={hidden}\n   *   >\n   *     {children}\n   *   </div>\n   * );\n   * ```\n   */\n  elementProps: Readonly<CollapseElementProps<E>>;\n}\n\n/**\n * This hook is used to create a transition to collapse and expand an element\n * **inline** with other content like an accordion by animating the\n * `max-height`, `padding-top`, and `padding-bottom` CSS properties. The default\n * behavior is to hide the element completely while collapsed, but providing the\n * `minHeight`, `minPaddingTop`, and `minPaddingBottom` options can make this\n * work like a \"See More\"/\"Preview\" type of element\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps, rendered } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       // If the collapsible element should maintain state by not unmounting\n *       // while collapsed, uncomment this next line\n *       // temporary: false,\n *     });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setCollapsed(!collapsed)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <div {...elementProps}>\n *           <Typography>Stuff that should be collapsed</Typography>\n *           <div>Whatever content...</div>\n *         </div>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * See More Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { IconRotator } from \"@react-md/icon\";\n * import { KeyboardArrowDownSVGIcon } from \"@react-md/material-icons\";\n * import { useCollapseTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * import styles from \"./Example.module.scss\";\n * // pretend styles:\n * //\n * // .container {\n * //   padding: 1rem;\n * //   position: relative;\n * // }\n * //\n * // .button {\n * //   position: absolute;\n * //   right: 0;\n * //   top: 0;\n * // }\n *\n *\n * function Example(): ReactElement {\n *   const [collapsed, setCollapsed] = useState(true);\n *   const { elementProps } =\n *     useCollapseTransition({\n *       transitionIn: !collapsed,\n *       minHeight: 120,\n *       minPaddingTop: 16,\n *       className: styles.container,\n *     });\n *\n *   return (\n *     <div {...elementProps}>\n *       <Button\n *         aria-expanded={!collapsed}\n *         aria-label=\"Expand\"\n *         onClick={() => setCollapsed(!collapsed)}\n *         buttonType=\"icon\"\n *         className={styles.button}\n *       >\n *         <IconRotator rotated={!collapsed}>\n *           <KeyboardArrowDownSVGIcon />\n *         </IconRotator>\n *       </Button>\n *       <SomeComponentWithALotOfContent />\n *     </div>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCollapseTransition<E extends HTMLElement>({\n  nodeRef: propNodeRef,\n  style: propStyle,\n  className,\n  transitionIn,\n  timeout = DEFAULT_COLLAPSE_TIMEOUT,\n  minHeight = DEFAULT_COLLAPSE_MIN_HEIGHT,\n  minPaddingTop = DEFAULT_COLLAPSE_MIN_PADDING_TOP,\n  minPaddingBottom = DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM,\n  temporary = minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0,\n  appear = false,\n  enter = true,\n  exit = true,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n}: CollapseTransitionHookOptions<E>): CollapseTransitionHookReturnValue<E> {\n  const [nodeRef, refCallback] = useEnsuredRef(propNodeRef);\n  const [style, setStyle] = useState<CSSProperties | undefined>(() => {\n    if (transitionIn) {\n      return undefined;\n    }\n\n    return {\n      maxHeight: minHeight,\n      paddingTop: minPaddingTop,\n      paddingBottom: minPaddingBottom,\n    };\n  });\n\n  const transitionTimeout = getTransitionTimeout({\n    timeout,\n    appear,\n    enter,\n    exit,\n  });\n\n  const { appearing, rendered, ref, stage, transitionTo } = useTransition({\n    nodeRef: refCallback,\n    timeout,\n    transitionIn,\n    reflow: true,\n    appear,\n    enter,\n    exit,\n    temporary,\n    onEnter(appearing) {\n      onEnter?.(appearing);\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n      });\n    },\n    onEntering(appearing) {\n      onEntering?.(appearing);\n      const { maxHeight, paddingTop, paddingBottom } = getElementSizing(\n        nodeRef.current\n      );\n\n      const duration = appearing\n        ? transitionTimeout.appear\n        : transitionTimeout.enter;\n\n      setStyle({\n        maxHeight,\n        paddingTop,\n        paddingBottom,\n        transitionDuration: `${duration}ms`,\n      });\n    },\n    onEntered(appearing) {\n      onEntered?.(appearing);\n      setStyle(undefined);\n    },\n    onExit() {\n      onExit?.();\n      const { maxHeight, paddingTop, paddingBottom } = getElementSizing(\n        nodeRef.current\n      );\n\n      setStyle({\n        maxHeight,\n        paddingTop,\n        paddingBottom,\n        transitionDuration: `${transitionTimeout.exit}ms`,\n      });\n    },\n    onExiting() {\n      onExiting?.();\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n        transitionDuration: `${transitionTimeout.exit}ms`,\n      });\n    },\n    onExited() {\n      onExited?.();\n      setStyle({\n        maxHeight: minHeight,\n        paddingTop: minPaddingTop,\n        paddingBottom: minPaddingBottom,\n      });\n    },\n  });\n  const entering = stage === \"enter\" || stage === \"entering\";\n  const exiting = stage === \"exit\" || stage === \"exiting\";\n  const collapsible =\n    transitionTimeout.enter !== 0 || transitionTimeout.exit !== 0;\n\n  const elementProps: CollapseElementProps<E> = {\n    ref,\n    style: { ...style, ...propStyle },\n    className:\n      cn(\n        {\n          \"rmd-collapse\": collapsible,\n          \"rmd-collapse--enter\": entering,\n          \"rmd-collapse--leave\": exiting,\n          \"rmd-collapse--no-overflow\": !transitionIn || style,\n        },\n        className\n      ) || undefined,\n    hidden:\n      !transitionIn &&\n      rendered &&\n      stage === \"exited\" &&\n      !temporary &&\n      minHeight === 0 &&\n      minPaddingTop === 0 &&\n      minPaddingBottom === 0,\n  };\n\n  return {\n    ...elementProps,\n    stage,\n    rendered,\n    appearing,\n    elementProps,\n    transitionTo,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}