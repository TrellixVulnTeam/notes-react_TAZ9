{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { FontIcon } from \"./FontIcon\";\nvar DEFAULT_ICONS = {\n  back: _jsx(FontIcon, {\n    children: \"keyboard_arrow_left\"\n  }),\n  checkbox: _jsx(FontIcon, {\n    children: \"check_box\"\n  }),\n  upload: _jsx(FontIcon, {\n    children: \"file_upload\"\n  }),\n  dropdown: _jsx(FontIcon, {\n    children: \"arrow_drop_down\"\n  }),\n  error: _jsx(FontIcon, {\n    children: \"error_outline\"\n  }),\n  expander: _jsx(FontIcon, {\n    children: \"keyboard_arrow_down\"\n  }),\n  forward: _jsx(FontIcon, {\n    children: \"keyboard_arrow_right\"\n  }),\n  menu: _jsx(FontIcon, {\n    children: \"menu\"\n  }),\n  notification: _jsx(FontIcon, {\n    children: \"notifications\"\n  }),\n  password: _jsx(FontIcon, {\n    children: \"remove_red_eye\"\n  }),\n  radio: _jsx(FontIcon, {\n    children: \"radio_button_checked\"\n  }),\n  selected: _jsx(FontIcon, {\n    children: \"check\"\n  }),\n  sort: _jsx(FontIcon, {\n    children: \"arrow_upward\"\n  })\n};\nvar context = createContext(DEFAULT_ICONS);\nvar Provider = context.Provider;\n/**\n * Gets one of the configured icons from the `IconProvider`. This is probably\n * just for use within `react-md`, but might be helpful outside if you want to\n * reuse the existing icon configuration for other custom components.\n *\n * If te second argument is provided and it is not `undefined`, that value will\n * be used instead of the inherited icon type.\n *\n * @param name - The name of the icon you want to use.\n * @param override - An optional override to use instead of the inherited icon.\n * @returns The overridden icon value or the inherited icon.\n */\n\nexport function useIcon(name, override) {\n  var icons = useContext(context);\n\n  if (typeof override !== \"undefined\") {\n    return override;\n  }\n\n  return icons[name];\n}\n/**\n * The `IconProvider` component is used to override all the default icons within\n * `react-md` with a newly defined set of icons. This is super nice since you\n * won't need to create new component wrappers for all the components within\n * `react-md` if you want to switch to SVG icons instead of the default font\n * icons.\n */\n\nexport function IconProvider(_a) {\n  var children = _a.children,\n      _b = _a.back,\n      back = _b === void 0 ? DEFAULT_ICONS.back : _b,\n      _c = _a.checkbox,\n      checkbox = _c === void 0 ? DEFAULT_ICONS.checkbox : _c,\n      _d = _a.dropdown,\n      dropdown = _d === void 0 ? DEFAULT_ICONS.dropdown : _d,\n      _e = _a.expander,\n      expander = _e === void 0 ? DEFAULT_ICONS.expander : _e,\n      _f = _a.error,\n      error = _f === void 0 ? DEFAULT_ICONS.error : _f,\n      _g = _a.forward,\n      forward = _g === void 0 ? DEFAULT_ICONS.forward : _g,\n      _h = _a.menu,\n      menu = _h === void 0 ? DEFAULT_ICONS.menu : _h,\n      _j = _a.notification,\n      notification = _j === void 0 ? DEFAULT_ICONS.notification : _j,\n      _k = _a.password,\n      password = _k === void 0 ? DEFAULT_ICONS.password : _k,\n      _l = _a.radio,\n      radio = _l === void 0 ? DEFAULT_ICONS.radio : _l,\n      _m = _a.selected,\n      selected = _m === void 0 ? DEFAULT_ICONS.selected : _m,\n      _o = _a.sort,\n      sort = _o === void 0 ? DEFAULT_ICONS.sort : _o,\n      _p = _a.upload,\n      upload = _p === void 0 ? DEFAULT_ICONS.upload : _p;\n  var value = useMemo(function () {\n    return {\n      back: back,\n      checkbox: checkbox,\n      dropdown: dropdown,\n      error: error,\n      expander: expander,\n      forward: forward,\n      menu: menu,\n      notification: notification,\n      password: password,\n      radio: radio,\n      selected: selected,\n      sort: sort,\n      upload: upload\n    };\n  }, [back, checkbox, dropdown, error, expander, forward, menu, notification, password, radio, selected, sort, upload]);\n  return _jsx(Provider, __assign({\n    value: value\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":"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","names":["createContext","useContext","useMemo","FontIcon","DEFAULT_ICONS","back","_jsx","children","checkbox","upload","dropdown","error","expander","forward","menu","notification","password","radio","selected","sort","context","useIcon","name","override","icons","IconProvider","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","value","Provider","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\icon\\src\\IconProvider.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\n\nimport { FontIcon } from \"./FontIcon\";\n\n/**\n * @remarks \\@since 5.0.0 The `download` icon has been renamed to `upload`.\n */\nexport interface ConfigurableIcons {\n  /**\n   * The general icon for navigating backwards or closing an item to the left.\n   */\n  back?: ReactNode;\n\n  /**\n   * The general icon to use for checkboxes.\n   */\n  checkbox?: ReactNode;\n\n  /**\n   * The general icon to use for dropdown menus or content that expands\n   * vertically in a new material instead of inline like the `expander` icon.\n   */\n  dropdown?: ReactNode;\n\n  /**\n   * The general icon to use when there are form errors.\n   *\n   * @remarks \\@since 2.5.0\n   */\n  error?: ReactNode;\n\n  /**\n   * The general icon to use for expanding content vertically.\n   */\n  expander?: ReactNode;\n\n  /**\n   * The general icon for navigating forwards or closing an item to the right.\n   * This is also used internally for nested dropdown menus.\n   */\n  forward?: ReactNode;\n\n  /**\n   * The general icon to use for displaying a main navigation menu.\n   */\n  menu?: ReactNode;\n\n  /**\n   * The general icon for displaying notifications. This is used internally in\n   * the `BadgedButton` in the `@react-md/badge` package.\n   */\n  notification?: ReactNode;\n\n  /**\n   * The general icon for temporarily displaying a password's field value as\n   * plain text.\n   */\n  password?: ReactNode;\n\n  /**\n   * The general icon to use for radio buttons.\n   */\n  radio?: ReactNode;\n\n  /**\n   * The general icon to use for showing that something has been selected that\n   * is not a radio or checkbox. This is used internally for the `Chip` in the\n   * `@react-md/chip` package.\n   */\n  selected?: ReactNode;\n\n  /**\n   * The general icon for sorting content. This defaults to the sort ascending\n   * behavior.\n   */\n  sort?: ReactNode;\n\n  /**\n   * The general icon to use for the `FileInput` component (normally file\n   * uploads).\n   *\n   * @remarks \\@since 5.0.0\n   */\n  upload?: ReactNode;\n}\n\nexport type ConfiguredIcons = Required<ConfigurableIcons>;\n\nconst DEFAULT_ICONS: ConfiguredIcons = {\n  back: <FontIcon>keyboard_arrow_left</FontIcon>,\n  checkbox: <FontIcon>check_box</FontIcon>,\n  upload: <FontIcon>file_upload</FontIcon>,\n  dropdown: <FontIcon>arrow_drop_down</FontIcon>,\n  error: <FontIcon>error_outline</FontIcon>,\n  expander: <FontIcon>keyboard_arrow_down</FontIcon>,\n  forward: <FontIcon>keyboard_arrow_right</FontIcon>,\n  menu: <FontIcon>menu</FontIcon>,\n  notification: <FontIcon>notifications</FontIcon>,\n  password: <FontIcon>remove_red_eye</FontIcon>,\n  radio: <FontIcon>radio_button_checked</FontIcon>,\n  selected: <FontIcon>check</FontIcon>,\n  sort: <FontIcon>arrow_upward</FontIcon>,\n};\n\nconst context = createContext<ConfiguredIcons>(DEFAULT_ICONS);\nconst { Provider } = context;\n\n/**\n * Gets one of the configured icons from the `IconProvider`. This is probably\n * just for use within `react-md`, but might be helpful outside if you want to\n * reuse the existing icon configuration for other custom components.\n *\n * If te second argument is provided and it is not `undefined`, that value will\n * be used instead of the inherited icon type.\n *\n * @param name - The name of the icon you want to use.\n * @param override - An optional override to use instead of the inherited icon.\n * @returns The overridden icon value or the inherited icon.\n */\nexport function useIcon(\n  name: keyof ConfigurableIcons,\n  override?: ReactNode | undefined\n): ReactNode {\n  const icons = useContext(context);\n  if (typeof override !== \"undefined\") {\n    return override;\n  }\n\n  return icons[name];\n}\n\nexport interface IconProviderProps extends ConfigurableIcons {\n  /**\n   * The children that should inherit the icon provider context. This is\n   * required since this component is pretty much worthless to use if you don't\n   * inherit the overridden icons.\n   */\n  children: ReactNode;\n}\n\n/**\n * The `IconProvider` component is used to override all the default icons within\n * `react-md` with a newly defined set of icons. This is super nice since you\n * won't need to create new component wrappers for all the components within\n * `react-md` if you want to switch to SVG icons instead of the default font\n * icons.\n */\nexport function IconProvider({\n  children,\n  back = DEFAULT_ICONS.back,\n  checkbox = DEFAULT_ICONS.checkbox,\n  dropdown = DEFAULT_ICONS.dropdown,\n  expander = DEFAULT_ICONS.expander,\n  error = DEFAULT_ICONS.error,\n  forward = DEFAULT_ICONS.forward,\n  menu = DEFAULT_ICONS.menu,\n  notification = DEFAULT_ICONS.notification,\n  password = DEFAULT_ICONS.password,\n  radio = DEFAULT_ICONS.radio,\n  selected = DEFAULT_ICONS.selected,\n  sort = DEFAULT_ICONS.sort,\n  upload = DEFAULT_ICONS.upload,\n}: IconProviderProps): ReactElement {\n  const value = useMemo<ConfiguredIcons>(\n    () => ({\n      back,\n      checkbox,\n      dropdown,\n      error,\n      expander,\n      forward,\n      menu,\n      notification,\n      password,\n      radio,\n      selected,\n      sort,\n      upload,\n    }),\n    [\n      back,\n      checkbox,\n      dropdown,\n      error,\n      expander,\n      forward,\n      menu,\n      notification,\n      password,\n      radio,\n      selected,\n      sort,\n      upload,\n    ]\n  );\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}