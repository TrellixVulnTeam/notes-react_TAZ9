{"ast":null,"code":"import { useCallback, useRef } from \"react\";\nimport { getFocusableElements } from \"./getFocusableElements\";\n/**\n * Creates an `onKeyDown` event handler to trap keyboard focus within a\n * container element.\n *\n * @typeParam E - The HTMLElement type that has the keydown event listener\n * attached.\n * @param options - All the options for handling tab focus wrapping.\n * @returns The keydown event handler to enforce focus wrapping or the onKeyDown\n * prop if this functionality is disabled.\n */\n\nexport function useTabFocusWrap(_a) {\n  var _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      _c = _a.disableFocusCache,\n      disableFocusCache = _c === void 0 ? false : _c,\n      onKeyDown = _a.onKeyDown;\n  var focusables = useRef([]);\n  var handleKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    if (event.key !== \"Tab\") {\n      return;\n    }\n\n    if (disableFocusCache || !focusables.current.length) {\n      focusables.current = getFocusableElements(event.currentTarget);\n    }\n\n    var elements = focusables.current;\n    var l = elements.length;\n\n    if (l === 0) {\n      return;\n    }\n\n    if (l === 1) {\n      event.preventDefault();\n      elements[0].focus();\n    } else if (elements[0] === event.target && event.shiftKey) {\n      event.preventDefault();\n      elements[l - 1].focus();\n    } else if (elements[l - 1] === event.target && !event.shiftKey) {\n      event.preventDefault();\n      elements[0].focus();\n    }\n  }, [onKeyDown, disableFocusCache]);\n  return disabled ? onKeyDown : handleKeyDown;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AAqBA;;;;;;;;;;;AAUA,OAAM,SAAUC,eAAV,CAAiDC,EAAjD,EAIO;MAHXC;MAAAC,QAAQ,mBAAG,KAAH,GAAQD;MAChBE;MAAAC,iBAAiB,mBAAG,KAAH,GAAQD;MACzBE,SAAS;EAET,IAAMC,UAAU,GAAGT,MAAM,CAAyB,EAAzB,CAAzB;EAEA,IAAMU,aAAa,GAAGX,WAAW,CAC/B,UAACY,KAAD,EAAM;IACJ,IAAIH,SAAJ,EAAe;MACbA,SAAS,CAACG,KAAD,CAAT;IACD;;IAED,IAAIA,KAAK,CAACC,GAAN,KAAc,KAAlB,EAAyB;MACvB;IACD;;IAED,IAAIL,iBAAiB,IAAI,CAACE,UAAU,CAACI,OAAX,CAAmBC,MAA7C,EAAqD;MACnDL,UAAU,CAACI,OAAX,GAAqBZ,oBAAoB,CAACU,KAAK,CAACI,aAAP,CAAzC;IACD;;IAED,IAAMC,QAAQ,GAAGP,UAAU,CAACI,OAA5B;IACA,IAAMI,CAAC,GAAGD,QAAQ,CAACF,MAAnB;;IACA,IAAIG,CAAC,KAAK,CAAV,EAAa;MACX;IACD;;IAED,IAAIA,CAAC,KAAK,CAAV,EAAa;MACXN,KAAK,CAACO,cAAN;MACAF,QAAQ,CAAC,CAAD,CAAR,CAAYG,KAAZ;IACD,CAHD,MAGO,IAAIH,QAAQ,CAAC,CAAD,CAAR,KAAgBL,KAAK,CAACS,MAAtB,IAAgCT,KAAK,CAACU,QAA1C,EAAoD;MACzDV,KAAK,CAACO,cAAN;MACAF,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAR,CAAgBE,KAAhB;IACD,CAHM,MAGA,IAAIH,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAR,KAAoBN,KAAK,CAACS,MAA1B,IAAoC,CAACT,KAAK,CAACU,QAA/C,EAAyD;MAC9DV,KAAK,CAACO,cAAN;MACAF,QAAQ,CAAC,CAAD,CAAR,CAAYG,KAAZ;IACD;EACF,CA9B8B,EA+B/B,CAACX,SAAD,EAAYD,iBAAZ,CA/B+B,CAAjC;EAkCA,OAAOF,QAAQ,GAAGG,SAAH,GAAeE,aAA9B;AACD","names":["useCallback","useRef","getFocusableElements","useTabFocusWrap","_a","_b","disabled","_c","disableFocusCache","onKeyDown","focusables","handleKeyDown","event","key","current","length","currentTarget","elements","l","preventDefault","focus","target","shiftKey"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\wia-aria\\useTabFocusWrap.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\";\n\nimport { getFocusableElements } from \"./getFocusableElements\";\n\ninterface Options<E extends HTMLElement> {\n  /**\n   * Boolean if the focus wrap behavior should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Boolean if the list of focusable elements should not be cached after the\n   * first tab key press. This should only be set to `true` if you have a lot of\n   * dynamic content whin your element and the first and last elements change.\n   */\n  disableFocusCache?: boolean;\n\n  /**\n   * An optional keydown event handler to merge with the focus wrap behavior.\n   */\n  onKeyDown?: React.KeyboardEventHandler<E>;\n}\n\n/**\n * Creates an `onKeyDown` event handler to trap keyboard focus within a\n * container element.\n *\n * @typeParam E - The HTMLElement type that has the keydown event listener\n * attached.\n * @param options - All the options for handling tab focus wrapping.\n * @returns The keydown event handler to enforce focus wrapping or the onKeyDown\n * prop if this functionality is disabled.\n */\nexport function useTabFocusWrap<E extends HTMLElement>({\n  disabled = false,\n  disableFocusCache = false,\n  onKeyDown,\n}: Options<E>): React.KeyboardEventHandler<E> | undefined {\n  const focusables = useRef<readonly HTMLElement[]>([]);\n\n  const handleKeyDown = useCallback<React.KeyboardEventHandler<E>>(\n    (event): void => {\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      if (event.key !== \"Tab\") {\n        return;\n      }\n\n      if (disableFocusCache || !focusables.current.length) {\n        focusables.current = getFocusableElements(event.currentTarget);\n      }\n\n      const elements = focusables.current;\n      const l = elements.length;\n      if (l === 0) {\n        return;\n      }\n\n      if (l === 1) {\n        event.preventDefault();\n        elements[0].focus();\n      } else if (elements[0] === event.target && event.shiftKey) {\n        event.preventDefault();\n        elements[l - 1].focus();\n      } else if (elements[l - 1] === event.target && !event.shiftKey) {\n        event.preventDefault();\n        elements[0].focus();\n      }\n    },\n    [onKeyDown, disableFocusCache]\n  );\n\n  return disabled ? onKeyDown : handleKeyDown;\n}\n"]},"metadata":{},"sourceType":"module"}