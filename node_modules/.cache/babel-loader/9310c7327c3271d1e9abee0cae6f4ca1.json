{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, isValidElement, useCallback, useState } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nimport { TextField } from \"./TextField\";\nvar block = bem(\"rmd-password\");\n\nfunction isConfigurableIcon(icon) {\n  return !!icon && !isValidElement(icon);\n}\n/**\n * This component is a simple wrapper of the `TextField` that can only be\n * rendered for password inputs. There is built-in functionality to be able to\n * temporarily show the password's value by swapping the `type` to `\"text\"`.\n */\n\n\nexport var Password = forwardRef(function Password(_a, ref) {\n  var className = _a.className,\n      inputClassName = _a.inputClassName,\n      propVisibilityIcon = _a.visibilityIcon,\n      visibilityStyle = _a.visibilityStyle,\n      visibilityClassName = _a.visibilityClassName,\n      _b = _a.visibilityLabel,\n      visibilityLabel = _b === void 0 ? \"Show password\" : _b,\n      onVisibilityClick = _a.onVisibilityClick,\n      getVisibilityIcon = _a.getVisibilityIcon,\n      _c = _a.disableVisibility,\n      disableVisibility = _c === void 0 ? false : _c,\n      propRightChildren = _a.rightChildren,\n      _d = _a.isRightAddon,\n      isRightAddon = _d === void 0 ? disableVisibility : _d,\n      props = __rest(_a, [\"className\", \"inputClassName\", \"visibilityIcon\", \"visibilityStyle\", \"visibilityClassName\", \"visibilityLabel\", \"onVisibilityClick\", \"getVisibilityIcon\", \"disableVisibility\", \"rightChildren\", \"isRightAddon\"]);\n\n  var id = props.id;\n\n  var _e = __read(useState(\"password\"), 2),\n      type = _e[0],\n      setType = _e[1];\n\n  var toggle = useCallback(function (event) {\n    if (onVisibilityClick) {\n      onVisibilityClick(event);\n    }\n\n    setType(function (prevType) {\n      return prevType === \"password\" ? \"text\" : \"password\";\n    });\n  }, [onVisibilityClick]);\n  var visible = type === \"text\";\n  var visibilityIcon = useIcon(\"password\", propVisibilityIcon);\n\n  if (isConfigurableIcon(propVisibilityIcon)) {\n    visibilityIcon = visible ? propVisibilityIcon.visible : propVisibilityIcon.invisible;\n  }\n\n  var rightChildren = propRightChildren;\n\n  if (!disableVisibility) {\n    rightChildren = _jsx(Button, __assign({\n      id: \"\".concat(id, \"-password-toggle\"),\n      \"aria-label\": visibilityLabel,\n      \"aria-pressed\": visible,\n      buttonType: \"icon\",\n      onClick: toggle,\n      style: visibilityStyle,\n      className: cn(block(\"toggle\"), visibilityClassName)\n    }, {\n      children: typeof getVisibilityIcon === \"function\" ? getVisibilityIcon(type) : visibilityIcon\n    }));\n  }\n\n  return _jsx(TextField, __assign({}, props, {\n    className: cn(block({\n      offset: !disableVisibility\n    }), className),\n    inputClassName: cn(block(\"input\", {\n      offset: !disableVisibility\n    }), inputClassName),\n    ref: ref,\n    type: type,\n    isRightAddon: isRightAddon,\n    rightChildren: rightChildren\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","isValidElement","useCallback","useState","cn","Button","useIcon","bem","TextField","block","isConfigurableIcon","icon","Password","_a","ref","inputClassName","propVisibilityIcon","visibilityStyle","visibilityClassName","_b","visibilityLabel","onVisibilityClick","getVisibilityIcon","_c","disableVisibility","propRightChildren","_d","isRightAddon","props","type","setType","toggle","event","prevType","visible","visibilityIcon","invisible","rightChildren","_jsx","__assign","id","buttonType","onClick","style","className","children","offset"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\text-field\\Password.tsx"],"sourcesContent":["import type {\n  CSSProperties,\n  MouseEvent,\n  MouseEventHandler,\n  ReactNode,\n} from \"react\";\nimport { forwardRef, isValidElement, useCallback, useState } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { TextFieldProps } from \"./TextField\";\nimport { TextField } from \"./TextField\";\n\nexport interface ConfigurableVisibilityIcon {\n  /**\n   * The icon to display while the password is currently visible as plain text.\n   */\n  visible: ReactNode;\n\n  /**\n   * The icon to display while the password is currently invisible as the\n   * password input.\n   */\n  invisible: ReactNode;\n}\n\nexport type GetVisibilityIcon = (type: \"text\" | \"password\") => ReactNode;\n\nexport interface PasswordProps extends Omit<TextFieldProps, \"type\"> {\n  /**\n   * The icon to use to toggle the visibility of the password by changing the\n   * input type to text temporarily. This can either be a renderable React node\n   * or an object for the `visible` and `invisible` states.\n   */\n  visibilityIcon?: ReactNode | ConfigurableVisibilityIcon;\n\n  /**\n   * An optional style to apply to the visibility toggle button.\n   */\n  visibilityStyle?: CSSProperties;\n\n  /**\n   * An optional classname to apply to the visibility toggle button.\n   */\n  visibilityClassName?: string;\n\n  /**\n   * An optional `aria-label` to apply to the visibility toggle button.\n   *\n   * Note: The visibility button is being treated as a [toggle\n   * button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) which means\n   * that the label **should not change** based on the visibility state and\n   * should not include the word \"toggle\" since it will be redundant.\n   */\n  visibilityLabel?: string;\n\n  /**\n   * Boolean if the visibility toggle feature should be disabled.\n   */\n  disableVisibility?: boolean;\n\n  /**\n   * An optional function to return the current icon to display within the\n   * visibility toggle button for additional control.\n   *\n   * Depending on the customization needs, it will probably be easier to just\n   * implement your own `Password` component using the native `TextField`.\n   */\n  getVisibilityIcon?: GetVisibilityIcon;\n\n  /**\n   * An optional function to call when the visibility button has been clicked.\n   * This is only a simple `MouseEventHandler` for the button element.\n   *\n   * Depending on the customization needs, it will probably be easier to just\n   * implement your own `Password` component using the native `TextField`.\n   */\n  onVisibilityClick?: MouseEventHandler<HTMLButtonElement>;\n}\n\nconst block = bem(\"rmd-password\");\n\nfunction isConfigurableIcon(\n  icon: ReactNode | ConfigurableVisibilityIcon\n): icon is ConfigurableVisibilityIcon {\n  return !!icon && !isValidElement(icon);\n}\n\n/**\n * This component is a simple wrapper of the `TextField` that can only be\n * rendered for password inputs. There is built-in functionality to be able to\n * temporarily show the password's value by swapping the `type` to `\"text\"`.\n */\nexport const Password = forwardRef<HTMLInputElement, PasswordProps>(\n  function Password(\n    {\n      className,\n      inputClassName,\n      visibilityIcon: propVisibilityIcon,\n      visibilityStyle,\n      visibilityClassName,\n      visibilityLabel = \"Show password\",\n      onVisibilityClick,\n      getVisibilityIcon,\n      disableVisibility = false,\n      rightChildren: propRightChildren,\n      isRightAddon = disableVisibility,\n      ...props\n    },\n    ref\n  ) {\n    const { id } = props;\n    const [type, setType] = useState<\"password\" | \"text\">(\"password\");\n    const toggle = useCallback(\n      (event: MouseEvent<HTMLButtonElement>) => {\n        if (onVisibilityClick) {\n          onVisibilityClick(event);\n        }\n\n        setType((prevType) => (prevType === \"password\" ? \"text\" : \"password\"));\n      },\n      [onVisibilityClick]\n    );\n\n    const visible = type === \"text\";\n    let visibilityIcon = useIcon(\"password\", propVisibilityIcon);\n    if (isConfigurableIcon(propVisibilityIcon)) {\n      visibilityIcon = visible\n        ? propVisibilityIcon.visible\n        : propVisibilityIcon.invisible;\n    }\n\n    let rightChildren: ReactNode = propRightChildren;\n    if (!disableVisibility) {\n      rightChildren = (\n        <Button\n          id={`${id}-password-toggle`}\n          aria-label={visibilityLabel}\n          aria-pressed={visible}\n          buttonType=\"icon\"\n          onClick={toggle}\n          style={visibilityStyle}\n          className={cn(block(\"toggle\"), visibilityClassName)}\n        >\n          {typeof getVisibilityIcon === \"function\"\n            ? getVisibilityIcon(type)\n            : visibilityIcon}\n        </Button>\n      );\n    }\n\n    return (\n      <TextField\n        {...props}\n        className={cn(block({ offset: !disableVisibility }), className)}\n        inputClassName={cn(\n          block(\"input\", { offset: !disableVisibility }),\n          inputClassName\n        )}\n        ref={ref}\n        type={type}\n        isRightAddon={isRightAddon}\n        rightChildren={rightChildren}\n      />\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}