{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef, useResizeObserver } from \"@react-md/utils\";\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { useFieldStates } from \"../useFieldStates\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\nvar block = bem(\"rmd-textarea\");\nvar container = bem(\"rmd-textarea-container\");\nvar PADDING_VARIABLES = \"var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)\"; // this is the default of 1.5rem line-height in the styles\n\nvar DEFAULT_LINE_HEIGHT = \"24\";\nexport var TextArea = forwardRef(function TextArea(_a, forwardedRef) {\n  var style = _a.style,\n      className = _a.className,\n      areaStyle = _a.areaStyle,\n      areaClassName = _a.areaClassName,\n      containerRef = _a.containerRef,\n      containerProps = _a.containerProps,\n      label = _a.label,\n      labelStyle = _a.labelStyle,\n      labelClassName = _a.labelClassName,\n      _b = _a.rows,\n      rows = _b === void 0 ? 2 : _b,\n      _c = _a.maxRows,\n      maxRows = _c === void 0 ? -1 : _c,\n      _d = _a.resize,\n      resize = _d === void 0 ? \"auto\" : _d,\n      propTheme = _a.theme,\n      _e = _a.dense,\n      dense = _e === void 0 ? false : _e,\n      _f = _a.inline,\n      propInline = _f === void 0 ? false : _f,\n      _g = _a.error,\n      error = _g === void 0 ? false : _g,\n      _h = _a.stretch,\n      stretch = _h === void 0 ? false : _h,\n      _j = _a.disabled,\n      disabled = _j === void 0 ? false : _j,\n      _k = _a.animate,\n      animate = _k === void 0 ? true : _k,\n      _l = _a.isLeftAddon,\n      isLeftAddon = _l === void 0 ? true : _l,\n      _m = _a.isRightAddon,\n      isRightAddon = _m === void 0 ? true : _m,\n      propUnderlineDirection = _a.underlineDirection,\n      propOnBlur = _a.onBlur,\n      propOnFocus = _a.onFocus,\n      propOnChange = _a.onChange,\n      leftChildren = _a.leftChildren,\n      rightChildren = _a.rightChildren,\n      props = __rest(_a, [\"style\", \"className\", \"areaStyle\", \"areaClassName\", \"containerRef\", \"containerProps\", \"label\", \"labelStyle\", \"labelClassName\", \"rows\", \"maxRows\", \"resize\", \"theme\", \"dense\", \"inline\", \"error\", \"stretch\", \"disabled\", \"animate\", \"isLeftAddon\", \"isRightAddon\", \"underlineDirection\", \"onBlur\", \"onFocus\", \"onChange\", \"leftChildren\", \"rightChildren\"]);\n\n  var id = props.id,\n      value = props.value,\n      defaultValue = props.defaultValue;\n\n  var _o = useFormTheme({\n    theme: propTheme,\n    underlineDirection: propUnderlineDirection\n  }),\n      theme = _o.theme,\n      underlineDirection = _o.underlineDirection;\n\n  var _p = __read(useState(), 2),\n      height = _p[0],\n      setHeight = _p[1];\n\n  useEffect(function () {\n    if (resize !== \"auto\" && typeof height === \"number\") {\n      setHeight(undefined);\n    }\n  }, [resize, height]);\n  var maskRef = useRef(null);\n\n  var _q = __read(useState(false), 2),\n      scrollable = _q[0],\n      setScrollable = _q[1];\n\n  var updateHeight = useCallback(function () {\n    var mask = maskRef.current;\n    /* istanbul ignore if */\n\n    if (!mask) {\n      return;\n    }\n\n    var nextHeight = mask.scrollHeight;\n    /* istanbul ignore if */\n\n    if (maxRows > 0) {\n      var lineHeight = parseFloat(window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT);\n      var maxHeight = maxRows * lineHeight;\n      nextHeight = Math.min(maxHeight, nextHeight); // only want the textarea to be scrollable if there's a limit on the rows\n      // since it'll flash the scrollbar on most OS during the height transition\n\n      if (nextHeight === maxHeight && !scrollable) {\n        setScrollable(true);\n      } else if (nextHeight !== maxHeight && scrollable) {\n        setScrollable(false);\n      }\n    }\n\n    if (height !== nextHeight) {\n      setHeight(nextHeight);\n    }\n  }, [height, maxRows, scrollable]); // the window can be resized while there is text inside the textarea so need to\n  // recalculate the height when the width changes as well.\n\n  var _r = __read(useResizeObserver(updateHeight, {\n    ref: maskRef,\n    disableHeight: true\n  }), 2),\n      maskRefHandler = _r[1];\n\n  var _s = useFieldStates({\n    onBlur: propOnBlur,\n    onFocus: propOnFocus,\n    onChange: function (event) {\n      var mask = maskRef.current;\n\n      if (propOnChange) {\n        propOnChange(event);\n      }\n      /* istanbul ignore if */\n\n\n      if (!mask || resize !== \"auto\") {\n        return;\n      } // to get the height transition to work, you have to set the height on:\n      // - the main container element (including padding) that has the height\n      //    transition enabled\n      // - a child div wrapper (without padding) that has the height transition\n      //    enabled\n      // - the textarea element (without padding) and without a height transition\n      //\n      // if it isn't done this way, the height transition will look weird since\n      // the text will be fixed to the bottom of the area and more text at the top\n      // will become visible as the height transition completes. applying the\n      // transition on the two parent elements work because:\n      // - the height is set immediately on the text field so it expands to show all\n      //    the text\n      // - the height is correctly applied to both parent elements, but their height\n      //    haven't fully been adjusted due to the animation\n      // - the parent divs have overflow visible by default, so the textarea's text\n      //    will expand past the boundaries of the divs and not cause the upwards\n      //    animation weirdness.\n\n\n      mask.value = event.currentTarget.value;\n      updateHeight();\n    },\n    value: value,\n    defaultValue: defaultValue\n  }),\n      valued = _s.valued,\n      focused = _s.focused,\n      onBlur = _s.onBlur,\n      onFocus = _s.onFocus,\n      onChange = _s.onChange;\n\n  var _t = __read(useEnsuredRef(forwardedRef), 2),\n      ref = _t[0],\n      refHandler = _t[1]; // the container element adds some padding so that the content can scroll and\n  // not be covered by the floating label. unfortunately, this means that the entire\n  // container is no longer clickable to focus the input. This is used to add that\n  // functionality back.\n\n\n  var handleClick = useCallback(function (event) {\n    if (ref.current && event.target === event.currentTarget) {\n      ref.current.focus();\n    }\n  }, [ref]);\n\n  var area = _jsx(\"textarea\", __assign({}, props, {\n    ref: refHandler,\n    rows: rows,\n    disabled: disabled,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onChange: onChange,\n    style: __assign(__assign({}, areaStyle), {\n      height: height !== null && height !== void 0 ? height : areaStyle === null || areaStyle === void 0 ? void 0 : areaStyle.height\n    }),\n    className: cn(block({\n      scrollable: scrollable || resize === \"none\",\n      floating: label && theme !== \"none\",\n      rh: resize === \"horizontal\",\n      rv: resize === \"vertical\",\n      rn: resize === \"auto\" || resize === \"none\"\n    }), areaClassName)\n  }));\n\n  var children = area;\n\n  if (resize === \"auto\") {\n    children = _jsxs(\"div\", __assign({\n      style: {\n        height: height\n      },\n      className: container(\"inner\", {\n        animate: animate\n      })\n    }, {\n      children: [area, _jsx(\"textarea\", {\n        \"aria-hidden\": true,\n        defaultValue: value || defaultValue,\n        id: \"\".concat(id, \"-mask\"),\n        ref: maskRefHandler,\n        readOnly: true,\n        rows: rows,\n        tabIndex: -1,\n        style: areaStyle,\n        className: cn(block({\n          rn: true,\n          mask: true,\n          floating: label && theme !== \"none\"\n        }), areaClassName)\n      })]\n    }));\n  }\n\n  var inline = propInline;\n\n  if (resize === \"horizontal\" || resize === \"both\") {\n    // have to force it inline or else you won't be able to resize\n    // it horizontally.\n    inline = true;\n  }\n\n  return _jsxs(TextFieldContainer, __assign({}, containerProps, {\n    style: __assign(__assign({}, style), {\n      height: height ? \"calc(\".concat(PADDING_VARIABLES, \" + \").concat(height, \"px)\") : style === null || style === void 0 ? void 0 : style.height\n    }),\n    className: cn(container({\n      animate: animate && resize === \"auto\",\n      cursor: !disabled\n    }), className),\n    ref: containerRef,\n    theme: theme,\n    error: error,\n    active: focused,\n    label: !!label,\n    dense: dense,\n    inline: inline,\n    stretch: stretch,\n    disabled: disabled,\n    isLeftAddon: isLeftAddon,\n    isRightAddon: isRightAddon,\n    leftChildren: leftChildren,\n    rightChildren: rightChildren,\n    underlineDirection: underlineDirection,\n    onClick: !disabled ? handleClick : undefined\n  }, {\n    children: [_jsx(FloatingLabel, __assign({\n      style: labelStyle,\n      className: labelClassName,\n      htmlFor: id,\n      error: error,\n      active: focused,\n      floating: focused || valued,\n      valued: valued,\n      dense: dense,\n      disabled: disabled\n    }, {\n      children: label\n    })), children]\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useCallback","useEffect","useRef","useState","cn","bem","useEnsuredRef","useResizeObserver","useFormTheme","FloatingLabel","useFieldStates","TextFieldContainer","block","container","PADDING_VARIABLES","DEFAULT_LINE_HEIGHT","TextArea","_a","forwardedRef","className","areaStyle","areaClassName","containerRef","containerProps","label","labelStyle","labelClassName","_b","rows","_c","maxRows","_d","resize","propTheme","_e","dense","_f","propInline","_g","error","_h","stretch","_j","disabled","_k","animate","_l","isLeftAddon","_m","isRightAddon","propUnderlineDirection","propOnBlur","propOnFocus","propOnChange","leftChildren","rightChildren","props","value","defaultValue","theme","underlineDirection","height","setHeight","undefined","maskRef","scrollable","setScrollable","updateHeight","mask","current","nextHeight","scrollHeight","lineHeight","parseFloat","window","getComputedStyle","maxHeight","Math","min","ref","disableHeight","maskRefHandler","onBlur","onFocus","onChange","event","currentTarget","valued","focused","refHandler","handleClick","target","focus","area","_jsx","style","floating","rh","rv","rn","children","_jsxs","id","readOnly","tabIndex","inline","__assign","concat","cursor","active","onClick","htmlFor"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\text-field\\TextArea.tsx"],"sourcesContent":["import type {\n  CSSProperties,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  Ref,\n  TextareaHTMLAttributes,\n} from \"react\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef, useResizeObserver } from \"@react-md/utils\";\n\nimport { useFormTheme } from \"../FormThemeProvider\";\nimport { FloatingLabel } from \"../label/FloatingLabel\";\nimport { useFieldStates } from \"../useFieldStates\";\nimport type { TextFieldContainerOptions } from \"./TextFieldContainer\";\nimport { TextFieldContainer } from \"./TextFieldContainer\";\n\nexport type TextAreaResize =\n  | \"none\"\n  | \"auto\"\n  | \"horizontal\"\n  | \"vertical\"\n  | \"both\";\n\nexport interface TextAreaProps\n  extends TextareaHTMLAttributes<HTMLTextAreaElement>,\n    TextFieldContainerOptions {\n  /**\n   * An id to apply to the text area. This is required for a11y.\n   */\n  id: string;\n\n  /**\n   * The value to use for the text field. This will make the component\n   * controlled and require the `onChange` prop to be provided as well otherwise\n   * this will act as a read only text field.\n   */\n  value?: string;\n\n  /**\n   * The default value for the text field which will make it uncontrolled.  If\n   * you manually change the `defaultValue` prop, the input's value **will not\n   * change** unless you provide a different `key` as well. Use the `value` prop\n   * instead for a controlled input.\n   */\n  defaultValue?: string;\n\n  /**\n   * An optional floating label to use for the text field. This should really\n   * only be used when the `theme` prop is not set to `\"none\"`. This will be\n   * wrapped in the `<Label>` component itself and automatically apply the\n   * `htmlFor` prop for this text field.\n   */\n  label?: ReactNode;\n\n  /**\n   * An optional style to apply to the label wrapper.\n   */\n  labelStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the label wrapper.\n   */\n  labelClassName?: string;\n\n  /**\n   * An optional style to apply to the textarea element. The base `style` prop\n   * is applied to the surrounding `div` instead.\n   */\n  areaStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the textarea element. The base `style`\n   * prop is applied to the surrounding `div` instead.\n   */\n  areaClassName?: string;\n\n  /**\n   * The number of rows to display by default. The textarea will automatically\n   * update and animate its height when the users types if the `resize` prop is\n   * set to `\"auto\"`.\n   */\n  rows?: number;\n\n  /**\n   * The maximum number of rows that are allowed. When this is set to `-1`, it\n   * will infinitely expand based on the text content.\n   */\n  maxRows?: number;\n\n  /**\n   * Updates the resize ability for the textarea. Native textareas are resizable\n   * both horizontally and vertically, but this component will prevent resizing\n   * by default and instead animate height changes as the user types.\n   */\n  resize?: TextAreaResize;\n\n  /**\n   * Boolean if the height changes should be animated when the `resize` prop is\n   * set to `\"auto\"`.\n   */\n  animate?: boolean;\n\n  /**\n   * An optional ref to apply to the text field's container div element. The\n   * default ref is forwarded on to the `input` element.\n   */\n  containerRef?: Ref<HTMLDivElement>;\n\n  /**\n   * Any additional html attributes that should be applied to the main container\n   * div. This is probably only going to be used internally so that additional\n   * accessibility can be added to text fields for more complex widgets.\n   *\n   * @remarks \\@since 2.5.2\n   */\n  containerProps?: Omit<HTMLAttributes<HTMLDivElement>, \"style\" | \"className\">;\n}\n\nconst block = bem(\"rmd-textarea\");\nconst container = bem(\"rmd-textarea-container\");\nconst PADDING_VARIABLES =\n  \"var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)\";\n\n// this is the default of 1.5rem line-height in the styles\nconst DEFAULT_LINE_HEIGHT = \"24\";\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  function TextArea(\n    {\n      style,\n      className,\n      areaStyle,\n      areaClassName,\n      containerRef,\n      containerProps,\n      label,\n      labelStyle,\n      labelClassName,\n      rows = 2,\n      maxRows = -1,\n      resize = \"auto\",\n      theme: propTheme,\n      dense = false,\n      inline: propInline = false,\n      error = false,\n      stretch = false,\n      disabled = false,\n      animate = true,\n      isLeftAddon = true,\n      isRightAddon = true,\n      underlineDirection: propUnderlineDirection,\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: propOnChange,\n      leftChildren,\n      rightChildren,\n      ...props\n    },\n    forwardedRef\n  ): ReactElement {\n    const { id, value, defaultValue } = props;\n    const { theme, underlineDirection } = useFormTheme({\n      theme: propTheme,\n      underlineDirection: propUnderlineDirection,\n    });\n\n    const [height, setHeight] = useState<number>();\n    useEffect(() => {\n      if (resize !== \"auto\" && typeof height === \"number\") {\n        setHeight(undefined);\n      }\n    }, [resize, height]);\n\n    const maskRef = useRef<HTMLTextAreaElement | null>(null);\n    const [scrollable, setScrollable] = useState(false);\n    const updateHeight = useCallback(() => {\n      const mask = maskRef.current;\n      /* istanbul ignore if */\n      if (!mask) {\n        return;\n      }\n\n      let nextHeight = mask.scrollHeight;\n      /* istanbul ignore if */\n      if (maxRows > 0) {\n        const lineHeight = parseFloat(\n          window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT\n        );\n        const maxHeight = maxRows * lineHeight;\n        nextHeight = Math.min(maxHeight, nextHeight);\n\n        // only want the textarea to be scrollable if there's a limit on the rows\n        // since it'll flash the scrollbar on most OS during the height transition\n        if (nextHeight === maxHeight && !scrollable) {\n          setScrollable(true);\n        } else if (nextHeight !== maxHeight && scrollable) {\n          setScrollable(false);\n        }\n      }\n\n      if (height !== nextHeight) {\n        setHeight(nextHeight);\n      }\n    }, [height, maxRows, scrollable]);\n\n    // the window can be resized while there is text inside the textarea so need to\n    // recalculate the height when the width changes as well.\n    const [, maskRefHandler] = useResizeObserver(updateHeight, {\n      ref: maskRef,\n      disableHeight: true,\n    });\n    const { valued, focused, onBlur, onFocus, onChange } = useFieldStates({\n      onBlur: propOnBlur,\n      onFocus: propOnFocus,\n      onChange: (event) => {\n        const mask = maskRef.current;\n        if (propOnChange) {\n          propOnChange(event);\n        }\n\n        /* istanbul ignore if */\n        if (!mask || resize !== \"auto\") {\n          return;\n        }\n\n        // to get the height transition to work, you have to set the height on:\n        // - the main container element (including padding) that has the height\n        //    transition enabled\n        // - a child div wrapper (without padding) that has the height transition\n        //    enabled\n        // - the textarea element (without padding) and without a height transition\n        //\n        // if it isn't done this way, the height transition will look weird since\n        // the text will be fixed to the bottom of the area and more text at the top\n        // will become visible as the height transition completes. applying the\n        // transition on the two parent elements work because:\n        // - the height is set immediately on the text field so it expands to show all\n        //    the text\n        // - the height is correctly applied to both parent elements, but their height\n        //    haven't fully been adjusted due to the animation\n        // - the parent divs have overflow visible by default, so the textarea's text\n        //    will expand past the boundaries of the divs and not cause the upwards\n        //    animation weirdness.\n        mask.value = event.currentTarget.value;\n        updateHeight();\n      },\n      value,\n      defaultValue,\n    });\n\n    const [ref, refHandler] = useEnsuredRef(forwardedRef);\n\n    // the container element adds some padding so that the content can scroll and\n    // not be covered by the floating label. unfortunately, this means that the entire\n    // container is no longer clickable to focus the input. This is used to add that\n    // functionality back.\n    const handleClick = useCallback(\n      (event: React.MouseEvent<HTMLDivElement>) => {\n        if (ref.current && event.target === event.currentTarget) {\n          ref.current.focus();\n        }\n      },\n      [ref]\n    );\n\n    const area = (\n      <textarea\n        {...props}\n        ref={refHandler}\n        rows={rows}\n        disabled={disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={onChange}\n        style={{ ...areaStyle, height: height ?? areaStyle?.height }}\n        className={cn(\n          block({\n            scrollable: scrollable || resize === \"none\",\n            floating: label && theme !== \"none\",\n            rh: resize === \"horizontal\",\n            rv: resize === \"vertical\",\n            rn: resize === \"auto\" || resize === \"none\",\n          }),\n          areaClassName\n        )}\n      />\n    );\n\n    let children = area;\n    if (resize === \"auto\") {\n      children = (\n        <div style={{ height }} className={container(\"inner\", { animate })}>\n          {area}\n          <textarea\n            aria-hidden\n            defaultValue={value || defaultValue}\n            id={`${id}-mask`}\n            ref={maskRefHandler}\n            readOnly\n            rows={rows}\n            tabIndex={-1}\n            style={areaStyle}\n            className={cn(\n              block({\n                rn: true,\n                mask: true,\n                floating: label && theme !== \"none\",\n              }),\n              areaClassName\n            )}\n          />\n        </div>\n      );\n    }\n\n    let inline = propInline;\n    if (resize === \"horizontal\" || resize === \"both\") {\n      // have to force it inline or else you won't be able to resize\n      // it horizontally.\n      inline = true;\n    }\n\n    return (\n      <TextFieldContainer\n        {...containerProps}\n        style={{\n          ...style,\n          height: height\n            ? `calc(${PADDING_VARIABLES} + ${height}px)`\n            : style?.height,\n        }}\n        className={cn(\n          container({\n            animate: animate && resize === \"auto\",\n            cursor: !disabled,\n          }),\n          className\n        )}\n        ref={containerRef}\n        theme={theme}\n        error={error}\n        active={focused}\n        label={!!label}\n        dense={dense}\n        inline={inline}\n        stretch={stretch}\n        disabled={disabled}\n        isLeftAddon={isLeftAddon}\n        isRightAddon={isRightAddon}\n        leftChildren={leftChildren}\n        rightChildren={rightChildren}\n        underlineDirection={underlineDirection}\n        onClick={!disabled ? handleClick : undefined}\n      >\n        <FloatingLabel\n          style={labelStyle}\n          className={labelClassName}\n          htmlFor={id}\n          error={error}\n          active={focused}\n          floating={focused || valued}\n          valued={valued}\n          dense={dense}\n          disabled={disabled}\n        >\n          {label}\n        </FloatingLabel>\n        {children}\n      </TextFieldContainer>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}