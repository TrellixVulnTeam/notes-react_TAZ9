{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback } from \"react\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isToggleableLayout } from \"./utils\";\n/**\n * The `LayoutCloseNavigationButton` is used to close the navigation panel for\n * toggleable layouts.\n */\n\nexport var LayoutCloseNavigationButton = forwardRef(function LayoutCloseNavigationButton(_a, ref) {\n  var propId = _a.id,\n      ariaLabelledBy = _a[\"aria-labelledby\"],\n      _b = _a[\"aria-label\"],\n      ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Hide Navigation\" : _b,\n      onClick = _a.onClick,\n      _c = _a.first,\n      first = _c === void 0 ? true : _c,\n      _d = _a.last,\n      last = _d === void 0 ? true : _d,\n      _e = _a.buttonType,\n      buttonType = _e === void 0 ? \"icon\" : _e,\n      propChildren = _a.children,\n      rendered = _a.rendered,\n      props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"onClick\", \"first\", \"last\", \"buttonType\", \"children\", \"rendered\"]);\n\n  var children = useIcon(\"back\", propChildren);\n\n  var _f = useLayoutConfig(),\n      baseId = _f.baseId,\n      layout = _f.layout,\n      hideNav = _f.hideNav;\n\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      onClick(event);\n    }\n\n    hideNav();\n  }, [onClick, hideNav]);\n  var id = propId !== null && propId !== void 0 ? propId : \"\".concat(baseId, \"-nav-x\");\n  var isRendered = rendered !== null && rendered !== void 0 ? rendered : isToggleableLayout(layout);\n\n  if (!isRendered) {\n    return null;\n  }\n\n  return _jsx(AppBarAction, __assign({}, props, {\n    id: id,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ref: ref,\n    first: first,\n    last: last,\n    buttonType: buttonType,\n    onClick: handleClick\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAUA;;;;;AAIA,OAAO,IAAMC,2BAA2B,GAAGN,UAAU,CAGnD,SAASM,2BAAT,CACAC,EADA,EAaAC,GAbA,EAaG;EAXD,IAAIC,MAAM,QAAV;EAAA,IACmBC,cAAc,wBADjC;EAAA,IAEAC,qBAFA;EAAA,IAEcC,SAAS,mBAAGF,cAAc,GAAGG,SAAH,GAAe,iBAAhC,GAAiDF,EAFxE;EAAA,IAGAG,OAAO,aAHP;EAAA,IAIAC,aAJA;EAAA,IAIAC,KAAK,mBAAG,IAAH,GAAOD,EAJZ;EAAA,IAKAE,YALA;EAAA,IAKAC,IAAI,mBAAG,IAAH,GAAOD,EALX;EAAA,IAMAE,kBANA;EAAA,IAMAC,UAAU,mBAAG,MAAH,GAASD,EANnB;EAAA,IAOUE,YAAY,cAPtB;EAAA,IAQAC,QAAQ,cARR;EAAA,IASGC,KAAK,cAVV,yGAUU,CATR;;EAaF,IAAMC,QAAQ,GAAGrB,OAAO,CAAC,MAAD,EAASkB,YAAT,CAAxB;;EACM,SAA8BjB,eAAe,EAA7C;EAAA,IAAEqB,MAAM,YAAR;EAAA,IAAUC,MAAM,YAAhB;EAAA,IAAkBC,OAAO,aAAzB;;EACN,IAAMC,WAAW,GAAG3B,WAAW,CAC7B,UAAC4B,KAAD,EAAqC;IACnC,IAAIf,OAAJ,EAAa;MACXA,OAAO,CAACe,KAAD,CAAP;IACD;;IAEDF,OAAO;EACR,CAP4B,EAQ7B,CAACb,OAAD,EAAUa,OAAV,CAR6B,CAA/B;EAWA,IAAMG,EAAE,GAAGrB,MAAM,SAAN,UAAM,WAAN,YAAU,UAAGgB,MAAH,EAAS,QAAT,CAArB;EACA,IAAMM,UAAU,GAAGT,QAAQ,SAAR,YAAQ,WAAR,cAAYjB,kBAAkB,CAACqB,MAAD,CAAjD;;EACA,IAAI,CAACK,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,OACEC,KAAC9B,YAAD,EAAa+B,aACPV,KADO,EACF;IACTO,EAAE,EAAEA,EADK;IACH,cACMlB,SAFH;IAEY,mBACJF,cAHR;IAITF,GAAG,EAAEA,GAJI;IAKTQ,KAAK,EAAEA,KALE;IAMTE,IAAI,EAAEA,IANG;IAOTE,UAAU,EAAEA,UAPH;IAQTN,OAAO,EAAEc;EARA,CADE,EASS;IAAAJ,UAEnBA;EAFmB,CATT,CAAb,CADF;AAeD,CApDoD,CAA9C","names":["forwardRef","useCallback","AppBarAction","useIcon","useLayoutConfig","isToggleableLayout","LayoutCloseNavigationButton","_a","ref","propId","ariaLabelledBy","_b","ariaLabel","undefined","onClick","_c","first","_d","last","_e","buttonType","propChildren","rendered","props","children","baseId","layout","hideNav","handleClick","event","id","isRendered","_jsx","__assign"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\layout\\src\\LayoutCloseNavigationButton.tsx"],"sourcesContent":["import type { MouseEvent } from \"react\";\nimport { forwardRef, useCallback } from \"react\";\nimport type { AppBarActionProps } from \"@react-md/app-bar\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\n\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isToggleableLayout } from \"./utils\";\n\nexport interface LayoutCloseNavigationButtonProps extends AppBarActionProps {\n  /**\n   * Boolean if the button should be rendered. If this is omitted, it will only\n   * be rendered for toggleable layouts.\n   */\n  rendered?: boolean;\n}\n\n/**\n * The `LayoutCloseNavigationButton` is used to close the navigation panel for\n * toggleable layouts.\n */\nexport const LayoutCloseNavigationButton = forwardRef<\n  HTMLButtonElement,\n  LayoutCloseNavigationButtonProps\n>(function LayoutCloseNavigationButton(\n  {\n    id: propId,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel = ariaLabelledBy ? undefined : \"Hide Navigation\",\n    onClick,\n    first = true,\n    last = true,\n    buttonType = \"icon\",\n    children: propChildren,\n    rendered,\n    ...props\n  },\n  ref\n) {\n  const children = useIcon(\"back\", propChildren);\n  const { baseId, layout, hideNav } = useLayoutConfig();\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      hideNav();\n    },\n    [onClick, hideNav]\n  );\n\n  const id = propId ?? `${baseId}-nav-x`;\n  const isRendered = rendered ?? isToggleableLayout(layout);\n  if (!isRendered) {\n    return null;\n  }\n\n  return (\n    <AppBarAction\n      {...props}\n      id={id}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      ref={ref}\n      first={first}\n      last={last}\n      buttonType={buttonType}\n      onClick={handleClick}\n    >\n      {children}\n    </AppBarAction>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}