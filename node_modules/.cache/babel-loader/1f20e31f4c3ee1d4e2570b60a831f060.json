{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport { Portal } from \"./Portal\";\n/**\n * This is a very simple component that is used in other places within react-md\n * to conditionally render the children within a portal or not based on general\n * portal config props.\n */\n\nexport function ConditionalPortal(_a) {\n  var portal = _a.portal,\n      portalInto = _a.portalInto,\n      portalIntoId = _a.portalIntoId,\n      children = _a.children;\n\n  if (!portal && !portalInto && !portalIntoId) {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n\n  return _jsx(Portal, __assign({\n    into: portalInto,\n    intoId: portalIntoId\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAGA,SAASA,MAAT,QAAuB,UAAvB;AAgCA;;;;;;AAKA,OAAM,SAAUC,iBAAV,CAA4BC,EAA5B,EAKmB;MAJvBC,MAAM;MACNC,UAAU;MACVC,YAAY;MACZC,QAAQ;;EAER,IAAI,CAACH,MAAD,IAAW,CAACC,UAAZ,IAA0B,CAACC,YAA/B,EAA6C;IAC3C,OAAOE;MAAAD,UAAGA;IAAH,EAAP;EACD;;EAED,OACEC,KAACP,MAAD,EAAOQ;IAACC,IAAI,EAAEL,UAAP;IAAmBM,MAAM,EAAEL;EAA3B,GAAuC;IAAAC,UAC3CA;EAD2C,CAAvC,CAAP,CADF;AAKD","names":["Portal","ConditionalPortal","_a","portal","portalInto","portalIntoId","children","_jsx","__assign","into","intoId"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\portal\\src\\ConditionalPortal.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\n\nimport type { PortalInto } from \"./getContainer\";\nimport { Portal } from \"./Portal\";\n\n/**\n * If any of these props are defined on a component, the component will render\n * in a portal instead of the current tree.\n */\nexport interface RenderConditionalPortalProps {\n  /**\n   * Boolean if the portal should be used.\n   */\n  portal?: boolean;\n\n  /**\n   * @see {@link PortalProps.into}\n   */\n  portalInto?: PortalInto;\n\n  /**\n   * @see {@link PortalProps.intoId}\n   */\n  portalIntoId?: string;\n}\n\nexport interface ConditionalPortalProps extends RenderConditionalPortalProps {\n  /**\n   * This children to render.\n   *\n   * @remarks \\@since 4.0.0 Allows `ReactNode` instead of `ReactElement | null`\n   */\n  children: ReactNode;\n}\n\n/**\n * This is a very simple component that is used in other places within react-md\n * to conditionally render the children within a portal or not based on general\n * portal config props.\n */\nexport function ConditionalPortal({\n  portal,\n  portalInto,\n  portalIntoId,\n  children,\n}: ConditionalPortalProps): ReactElement {\n  if (!portal && !portalInto && !portalIntoId) {\n    return <>{children}</>;\n  }\n\n  return (\n    <Portal into={portalInto} intoId={portalIntoId}>\n      {children}\n    </Portal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}