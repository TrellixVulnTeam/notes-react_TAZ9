{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Overlay } from \"@react-md/overlay\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { bem, FocusContainer, useCloseOnEscape, useScrollLock } from \"@react-md/utils\";\nimport { useNestedDialogFixes } from \"./useNestedDialogFixes\"; // used to disable the overlay click-to-close functionality when the `modal` prop is enabled.\n\nvar noop = function () {// do nothing\n};\n\nvar block = bem(\"rmd-dialog\");\n/** @remarks \\@since 4.0.0 */\n\nexport var DEFAULT_DIALOG_CLASSNAMES = {\n  appear: \"rmd-dialog--enter\",\n  appearActive: \"rmd-dialog--enter-active\",\n  enter: \"rmd-dialog--enter\",\n  enterActive: \"rmd-dialog--enter-active\",\n  exit: \"rmd-dialog--exit\",\n  exitActive: \"rmd-dialog--exit-active\"\n};\n/** @remarks \\@since 4.0.0 */\n\nexport var DEFAULT_DIALOG_TIMEOUT = {\n  enter: 200,\n  exit: 150\n};\n/**\n * A dialog is used to show important content above all other elements within\n * the page. This is normally used for alerts, confirmations, or just temporary\n * content. The dialog within react-md also has the additional features for\n * accessibility:\n *\n * - automatically focus the dialog on mount for keyboard users\n * - prevent elements outside of the dialog to be focused\n * - close via the escape key\n * - prevent the page outside of the dialog from being scrolled\n *\n * To complete the dialog accessibility requirements, every dialog **must**\n * provide an `id` and either an `aria-label` describing the dialog or an\n * `aria-labelledby` id that points to an element describing this dialog.\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import {\n *   Dialog,\n *   DialogHeader,\n *   DialogTitle,\n *   DialogContent,\n *   DialogFooter,\n * } from \"@react-md/dialog\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [visible, setVisible] = useState(false);\n *   const hide = (): void => {\n *     setVisible(false);\n *   };\n *\n *   return (\n *     <>\n *       <Button onClick={() => setVisible(!visible)}>\n *         Show Dialog\n *       </Button>\n *       <Dialog\n *         aria-labelledby=\"dialog-title\"\n *         id=\"simple-dialog\"\n *         visible={visible}\n *         onRequestClose={hide}\n *       >\n *         <DialogHeader>\n *           <DialogTitle id=\"dialog-title\">Simple Dialog</DialogTitle>\n *         </DialogHeader>\n *         <DialogContent>\n *           <Typography margin=\"none\">This is some text in a dialog.</Typography>\n *         </DialogContent>\n *         <DialogFooter>\n *           <Button onClick={hide}>\n *             Close\n *           </Button>\n *         </DialogFooter>\n *       </Dialog>\n *     </>\n *   );\n * }\n * ```\n */\n\nexport var Dialog = forwardRef(function Dialog(_a, nodeRef) {\n  var _b = _a.component,\n      component = _b === void 0 ? \"div\" : _b,\n      _c = _a.tabIndex,\n      tabIndex = _c === void 0 ? -1 : _c,\n      children = _a.children,\n      className = _a.className,\n      containerStyle = _a.containerStyle,\n      containerClassName = _a.containerClassName,\n      propOverlay = _a.overlay,\n      overlayStyle = _a.overlayStyle,\n      overlayClassName = _a.overlayClassName,\n      _d = _a.overlayHidden,\n      overlayHidden = _d === void 0 ? false : _d,\n      visible = _a.visible,\n      onRequestClose = _a.onRequestClose,\n      _e = _a.forceContainer,\n      forceContainer = _e === void 0 ? false : _e,\n      _f = _a.defaultFocus,\n      defaultFocus = _f === void 0 ? \"first\" : _f,\n      _g = _a.portal,\n      portal = _g === void 0 ? true : _g,\n      portalInto = _a.portalInto,\n      portalIntoId = _a.portalIntoId,\n      _h = _a.appear,\n      appear = _h === void 0 ? false : _h,\n      _j = _a.enter,\n      enter = _j === void 0 ? true : _j,\n      _k = _a.exit,\n      exit = _k === void 0 ? true : _k,\n      _l = _a.disableTransition,\n      disableTransition = _l === void 0 ? false : _l,\n      _m = _a.classNames,\n      classNames = _m === void 0 ? DEFAULT_DIALOG_CLASSNAMES : _m,\n      _o = _a.timeout,\n      timeout = _o === void 0 ? DEFAULT_DIALOG_TIMEOUT : _o,\n      _p = _a.temporary,\n      temporary = _p === void 0 ? true : _p,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited,\n      _q = _a.modal,\n      modal = _q === void 0 ? false : _q,\n      _r = _a.role,\n      role = _r === void 0 ? \"dialog\" : _r,\n      _s = _a.type,\n      type = _s === void 0 ? \"centered\" : _s,\n      _t = _a.disableScrollLock,\n      disableScrollLock = _t === void 0 ? false : _t,\n      _u = _a.disableEscapeClose,\n      propDisableEscapeClose = _u === void 0 ? false : _u,\n      _v = _a.disableFocusContainer,\n      disableFocusContainer = _v === void 0 ? false : _v,\n      _w = _a.disableTabFocusWrap,\n      disableTabFocusWrap = _w === void 0 ? false : _w,\n      _x = _a.disableFocusOnMount,\n      disableFocusOnMount = _x === void 0 ? false : _x,\n      _y = _a.disableFocusOnUnmount,\n      disableFocusOnUnmount = _y === void 0 ? false : _y,\n      _z = _a.disableNestedDialogFixes,\n      disableNestedDialogFixes = _z === void 0 ? false : _z,\n      onKeyDown = _a.onKeyDown,\n      overlayProps = _a.overlayProps,\n      props = __rest(_a, [\"component\", \"tabIndex\", \"children\", \"className\", \"containerStyle\", \"containerClassName\", \"overlay\", \"overlayStyle\", \"overlayClassName\", \"overlayHidden\", \"visible\", \"onRequestClose\", \"forceContainer\", \"defaultFocus\", \"portal\", \"portalInto\", \"portalIntoId\", \"appear\", \"enter\", \"exit\", \"disableTransition\", \"classNames\", \"timeout\", \"temporary\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"modal\", \"role\", \"type\", \"disableScrollLock\", \"disableEscapeClose\", \"disableFocusContainer\", \"disableTabFocusWrap\", \"disableFocusOnMount\", \"disableFocusOnUnmount\", \"disableNestedDialogFixes\", \"onKeyDown\", \"overlayProps\"]);\n\n  var id = props.id;\n  var isNoneRole = role === \"none\";\n  var isFullPage = type === \"full-page\";\n  var isCentered = type === \"centered\";\n\n  var _0 = useNestedDialogFixes({\n    id: id,\n    visible: visible,\n    disabled: disableNestedDialogFixes,\n    disableEscapeClose: propDisableEscapeClose\n  }),\n      disableOverlay = _0.disableOverlay,\n      disableEscapeClose = _0.disableEscapeClose;\n\n  useScrollLock(visible && !isNoneRole && !disableScrollLock);\n  var overlayEl = null;\n\n  if (typeof propOverlay === \"boolean\" ? propOverlay : !isFullPage) {\n    // do not add the portal props to the overlay element since the portalling\n    // is handled in here. With how portals work, this would be rendered **after**\n    // the dialog instead of before which breaks some dialog styles\n    overlayEl = _jsx(Overlay, __assign({\n      id: \"\".concat(id, \"-overlay\")\n    }, overlayProps, {\n      style: overlayStyle,\n      className: cn(\"rmd-dialog-overlay\", overlayClassName),\n      hidden: overlayHidden || disableOverlay,\n      visible: visible,\n      clickable: !modal,\n      onRequestClose: modal ? noop : onRequestClose\n    }));\n  }\n\n  var _1 = useCSSTransition({\n    nodeRef: nodeRef,\n    transitionIn: visible,\n    timeout: timeout,\n    classNames: classNames,\n    className: cn(block({\n      centered: isCentered,\n      \"full-page\": isFullPage\n    }), className),\n    appear: !disableTransition && appear,\n    enter: !disableTransition && enter,\n    exit: !disableTransition && exit,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    temporary: temporary\n  }),\n      elementProps = _1.elementProps,\n      rendered = _1.rendered;\n\n  var dialog = _jsx(FocusContainer, __assign({}, props, elementProps, {\n    role: isNoneRole ? undefined : role,\n    \"aria-modal\": !isNoneRole && !!overlayEl || undefined,\n    tabIndex: tabIndex,\n    component: component,\n    defaultFocus: defaultFocus,\n    disableTabFocusWrap: isNoneRole || disableTabFocusWrap || disableFocusContainer,\n    disableFocusOnMount: isNoneRole || disableFocusContainer || disableFocusOnMount,\n    disableFocusOnMountScroll: true,\n    disableFocusOnUnmount: isNoneRole || disableFocusContainer || disableFocusOnUnmount,\n    onKeyDown: useCloseOnEscape(onRequestClose, disableEscapeClose || isNoneRole, onKeyDown)\n  }, {\n    children: children\n  }));\n\n  if (isCentered || forceContainer) {\n    // the additional container is only required when we don't have a full page dialog. it's just\n    // used to apply flex center to the dialog and add some margin\n    dialog = _jsx(\"span\", __assign({\n      id: \"\".concat(id, \"-container\"),\n      style: containerStyle,\n      className: cn(\"rmd-dialog-container\", containerClassName)\n    }, {\n      children: dialog\n    }));\n  }\n\n  return _jsxs(ConditionalPortal, __assign({\n    portal: !isNoneRole && portal,\n    portalInto: portalInto,\n    portalIntoId: portalIntoId\n  }, {\n    children: [overlayEl, rendered && dialog]\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","cn","Overlay","ConditionalPortal","useCSSTransition","bem","FocusContainer","useCloseOnEscape","useScrollLock","useNestedDialogFixes","noop","block","DEFAULT_DIALOG_CLASSNAMES","appear","appearActive","enter","enterActive","exit","exitActive","DEFAULT_DIALOG_TIMEOUT","Dialog","_a","nodeRef","_b","_c","tabIndex","children","className","containerStyle","containerClassName","propOverlay","overlayStyle","overlayClassName","_d","overlayHidden","visible","onRequestClose","_e","forceContainer","_f","defaultFocus","_g","portal","portalInto","portalIntoId","_h","_j","_k","_l","disableTransition","_m","classNames","_o","timeout","_p","temporary","onEnter","onEntering","onEntered","onExit","onExiting","onExited","_q","modal","_r","role","_s","type","_t","disableScrollLock","_u","propDisableEscapeClose","_v","disableFocusContainer","_w","disableTabFocusWrap","_x","disableFocusOnMount","_y","disableFocusOnUnmount","_z","disableNestedDialogFixes","onKeyDown","overlayProps","props","isNoneRole","isFullPage","isCentered","id","disabled","disableEscapeClose","disableOverlay","overlayEl","_jsx","__assign","style","hidden","clickable","transitionIn","centered","elementProps","rendered","dialog","undefined","component","disableFocusOnMountScroll","_jsxs"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\dialog\\src\\Dialog.tsx"],"sourcesContent":["import type { CSSProperties, HTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Overlay } from \"@react-md/overlay\";\nimport type { RenderConditionalPortalProps } from \"@react-md/portal\";\nimport { ConditionalPortal } from \"@react-md/portal\";\nimport type {\n  CSSTransitionClassNames,\n  CSSTransitionComponentProps,\n  TransitionActions,\n  TransitionTimeout,\n} from \"@react-md/transition\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport type {\n  FocusContainerOptionsProps,\n  LabelRequiredForA11y,\n} from \"@react-md/utils\";\nimport {\n  bem,\n  FocusContainer,\n  useCloseOnEscape,\n  useScrollLock,\n} from \"@react-md/utils\";\n\nimport { useNestedDialogFixes } from \"./useNestedDialogFixes\";\n\nexport interface BaseDialogProps\n  extends CSSTransitionComponentProps,\n    TransitionActions,\n    RenderConditionalPortalProps,\n    FocusContainerOptionsProps,\n    HTMLAttributes<HTMLDivElement> {\n  /**\n   * An id required for a11y for the dialog.\n   */\n  id: string;\n\n  /**\n   * The role for the dialog component. This should normally stay as the default\n   * of `\"dialog\"` **unless** you want the screen reader to interrupt the normal\n   * workflow for this message. It is good to set this value to `\"alertdialog\"`\n   * error message confirmations or general confirmation prompts.\n   *\n   * Note: The `dialog` technically supports being rendered as a `menu`, but\n   * this is really only for mobile sheet support and will not provide the menu\n   * keyboard functionality automatically.\n   */\n  role?: \"dialog\" | \"alertdialog\" | \"menu\" | \"none\";\n\n  /**\n   * A label to apply to the dialog. Either this or the `aria-labelledby` prop\n   * are required for accessibility.\n   */\n  \"aria-label\"?: string;\n\n  /**\n   * An id pointing to an element that is a label for the dialog. Either this or\n   * the `aria-label` prop are required for accessibility.\n   */\n  \"aria-labelledby\"?: string;\n\n  /**\n   * Boolean if the dialog is currently visible.\n   */\n  visible: boolean;\n\n  /**\n   * A function used to close the dialog when the overlay is clicked or the\n   * escape key is pressed when the `modal` prop is not enabled.\n   */\n  onRequestClose(): void;\n\n  /**\n   * The tab index for the sheet. This should normally stay at `-1`.\n   */\n  tabIndex?: number;\n\n  /**\n   * Boolean if there should be an overlay displayed with the sheet. This is\n   * recommended/required on mobile devices.\n   */\n  overlay?: boolean;\n\n  /**\n   * An optional style to apply to the overlay.\n   */\n  overlayStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the overlay.\n   */\n  overlayClassName?: string;\n\n  /**\n   * Boolean if the overlay should be \"hidden\" from the user once it's visible\n   * be keeping the opacity set to `0`. This is really only used for custom\n   * dialogs like the `FixedDialog`.\n   */\n  overlayHidden?: boolean;\n\n  /**\n   * An optional style to apply to the dialog container when the `type` is set\n   * to `\"centered\"` or when the `forceContainer` prop is enabled. You probably\n   * don't want to use this prop in most cases.\n   */\n  containerStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the dialog container when the `type` is\n   * set to `\"centered\"` or when the `forceContainer` prop is enabled. You\n   * probably don't want to use this prop in most cases.\n   */\n  containerClassName?: string;\n\n  /**\n   * Boolean if the dialog should be \"forcefully\" wrapped in the\n   * `.md-dialog-container` element. You probably don't want to use this in most\n   * cases, but the container element will be used when the `type` prop is set\n   * to `\"centered\"`.\n   */\n  forceContainer?: boolean;\n\n  /**\n   * Boolean if the dialog should act as a modal. This means that the user will\n   * no longer be able to close the dialog by pressing the escape key or by\n   * clicking on the overlay. You will be required to update the dialog to have\n   * an action that closes the dialog instead.\n   */\n  modal?: boolean;\n\n  /**\n   * The display type for the modal. If you would like to position the modal in\n   * different locations within the page, you should set this prop to `\"custom\"`\n   * and add custom styles to position it instead.\n   */\n  type?: \"full-page\" | \"centered\" | \"custom\";\n\n  /**\n   * Either the \"first\" or \"last\" string to focus the first or last focusable\n   * element within the container or a query selector string to find a focusable\n   * element within the container.\n   */\n  defaultFocus?: \"first\" | \"last\" | string;\n\n  /**\n   * Boolean if the dialog should no longer add scroll locking to the page when\n   * visible. You normally want this prop to stay `false`, but it is useful when\n   * using custom dialogs that are more for popovers and don't require full user\n   * attention.\n   */\n  disableScrollLock?: boolean;\n\n  /**\n   * Boolean if the ability to close the dialog via the escape key should be\n   * disabled. You should really not be using this as it breaks accessibility in\n   * most cases.\n   *\n   * Note: When the `modal` prop is enabled, this flag will be considered `true`\n   * as well so that the escape keypress no longer closes the dialog.\n   */\n  disableEscapeClose?: boolean;\n\n  /**\n   * Boolean if the dialog's focus container logic should be disabled. This\n   * should normally be kept at the default of `false` unless implementing a\n   * custom dialog that does not require consistent user focus.\n   */\n  disableFocusContainer?: boolean;\n\n  /**\n   * The Dialog component will attempt to automatically fix nested dialogs\n   * behind the scenes using the `NestedDialogContextProvider` component. This\n   * prop will disable that feature if it does not seem to be working as\n   * expected.\n   */\n  disableNestedDialogFixes?: boolean;\n\n  /**\n   * Boolean if the `appear`, `enter`, and `exit` transitions should be disabled\n   * for the dialog.  This is just a shortcut so all three of those props don't\n   * need to be disabled.\n   */\n  disableTransition?: boolean;\n\n  /**\n   * The component to render the dialog as. This really shouldn't be used\n   * outside of the `@react-md/layout` and `@react-md/sheet` packages to\n   * conditionally render a navigation panel.\n   */\n  component?: \"div\" | \"nav\";\n\n  /**\n   * Any additional props that should be passed to the `Overlay` element.\n   *\n   * @remarks \\@since 5.0.0\n   */\n  overlayProps?: Omit<HTMLAttributes<HTMLSpanElement>, \"style\" | \"className\">;\n}\n\nexport type DialogProps = LabelRequiredForA11y<BaseDialogProps>;\n\n// used to disable the overlay click-to-close functionality when the `modal` prop is enabled.\nconst noop = (): void => {\n  // do nothing\n};\nconst block = bem(\"rmd-dialog\");\n\n/** @remarks \\@since 4.0.0 */\nexport const DEFAULT_DIALOG_CLASSNAMES: Readonly<CSSTransitionClassNames> = {\n  appear: \"rmd-dialog--enter\",\n  appearActive: \"rmd-dialog--enter-active\",\n  enter: \"rmd-dialog--enter\",\n  enterActive: \"rmd-dialog--enter-active\",\n  exit: \"rmd-dialog--exit\",\n  exitActive: \"rmd-dialog--exit-active\",\n};\n\n/** @remarks \\@since 4.0.0 */\nexport const DEFAULT_DIALOG_TIMEOUT: Readonly<TransitionTimeout> = {\n  enter: 200,\n  exit: 150,\n};\n\n/**\n * A dialog is used to show important content above all other elements within\n * the page. This is normally used for alerts, confirmations, or just temporary\n * content. The dialog within react-md also has the additional features for\n * accessibility:\n *\n * - automatically focus the dialog on mount for keyboard users\n * - prevent elements outside of the dialog to be focused\n * - close via the escape key\n * - prevent the page outside of the dialog from being scrolled\n *\n * To complete the dialog accessibility requirements, every dialog **must**\n * provide an `id` and either an `aria-label` describing the dialog or an\n * `aria-labelledby` id that points to an element describing this dialog.\n *\n * @example\n * Simple Example\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import {\n *   Dialog,\n *   DialogHeader,\n *   DialogTitle,\n *   DialogContent,\n *   DialogFooter,\n * } from \"@react-md/dialog\";\n * import { Typography } from \"@react-md/typography\";\n *\n * function Example(): ReactElement {\n *   const [visible, setVisible] = useState(false);\n *   const hide = (): void => {\n *     setVisible(false);\n *   };\n *\n *   return (\n *     <>\n *       <Button onClick={() => setVisible(!visible)}>\n *         Show Dialog\n *       </Button>\n *       <Dialog\n *         aria-labelledby=\"dialog-title\"\n *         id=\"simple-dialog\"\n *         visible={visible}\n *         onRequestClose={hide}\n *       >\n *         <DialogHeader>\n *           <DialogTitle id=\"dialog-title\">Simple Dialog</DialogTitle>\n *         </DialogHeader>\n *         <DialogContent>\n *           <Typography margin=\"none\">This is some text in a dialog.</Typography>\n *         </DialogContent>\n *         <DialogFooter>\n *           <Button onClick={hide}>\n *             Close\n *           </Button>\n *         </DialogFooter>\n *       </Dialog>\n *     </>\n *   );\n * }\n * ```\n */\nexport const Dialog = forwardRef<HTMLDivElement, DialogProps>(function Dialog(\n  {\n    component = \"div\",\n    tabIndex = -1,\n    children,\n    className,\n    containerStyle,\n    containerClassName,\n    overlay: propOverlay,\n    overlayStyle,\n    overlayClassName,\n    overlayHidden = false,\n    visible,\n    onRequestClose,\n    forceContainer = false,\n    defaultFocus = \"first\",\n    portal = true,\n    portalInto,\n    portalIntoId,\n    appear = false,\n    enter = true,\n    exit = true,\n    disableTransition = false,\n    classNames = DEFAULT_DIALOG_CLASSNAMES,\n    timeout = DEFAULT_DIALOG_TIMEOUT,\n    temporary = true,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    modal = false,\n    role = \"dialog\",\n    type = \"centered\",\n    disableScrollLock = false,\n    disableEscapeClose: propDisableEscapeClose = false,\n    disableFocusContainer = false,\n    disableTabFocusWrap = false,\n    disableFocusOnMount = false,\n    disableFocusOnUnmount = false,\n    disableNestedDialogFixes = false,\n    onKeyDown,\n    overlayProps,\n    ...props\n  },\n  nodeRef\n) {\n  const { id } = props;\n  const isNoneRole = role === \"none\";\n  const isFullPage = type === \"full-page\";\n  const isCentered = type === \"centered\";\n\n  const { disableOverlay, disableEscapeClose } = useNestedDialogFixes({\n    id,\n    visible,\n    disabled: disableNestedDialogFixes,\n    disableEscapeClose: propDisableEscapeClose,\n  });\n\n  useScrollLock(visible && !isNoneRole && !disableScrollLock);\n\n  let overlayEl: ReactNode = null;\n  if (typeof propOverlay === \"boolean\" ? propOverlay : !isFullPage) {\n    // do not add the portal props to the overlay element since the portalling\n    // is handled in here. With how portals work, this would be rendered **after**\n    // the dialog instead of before which breaks some dialog styles\n    overlayEl = (\n      <Overlay\n        id={`${id}-overlay`}\n        {...overlayProps}\n        style={overlayStyle}\n        className={cn(\"rmd-dialog-overlay\", overlayClassName)}\n        hidden={overlayHidden || disableOverlay}\n        visible={visible}\n        clickable={!modal}\n        onRequestClose={modal ? noop : onRequestClose}\n      />\n    );\n  }\n\n  const { elementProps, rendered } = useCSSTransition({\n    nodeRef,\n    transitionIn: visible,\n    timeout,\n    classNames,\n    className: cn(\n      block({\n        centered: isCentered,\n        \"full-page\": isFullPage,\n      }),\n      className\n    ),\n    appear: !disableTransition && appear,\n    enter: !disableTransition && enter,\n    exit: !disableTransition && exit,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    temporary,\n  });\n\n  let dialog = (\n    <FocusContainer\n      {...props}\n      {...elementProps}\n      role={isNoneRole ? undefined : role}\n      aria-modal={(!isNoneRole && !!overlayEl) || undefined}\n      tabIndex={tabIndex}\n      component={component}\n      defaultFocus={defaultFocus}\n      disableTabFocusWrap={\n        isNoneRole || disableTabFocusWrap || disableFocusContainer\n      }\n      disableFocusOnMount={\n        isNoneRole || disableFocusContainer || disableFocusOnMount\n      }\n      disableFocusOnMountScroll\n      disableFocusOnUnmount={\n        isNoneRole || disableFocusContainer || disableFocusOnUnmount\n      }\n      onKeyDown={useCloseOnEscape(\n        onRequestClose,\n        disableEscapeClose || isNoneRole,\n        onKeyDown\n      )}\n    >\n      {children}\n    </FocusContainer>\n  );\n\n  if (isCentered || forceContainer) {\n    // the additional container is only required when we don't have a full page dialog. it's just\n    // used to apply flex center to the dialog and add some margin\n    dialog = (\n      <span\n        id={`${id}-container`}\n        style={containerStyle}\n        className={cn(\"rmd-dialog-container\", containerClassName)}\n      >\n        {dialog}\n      </span>\n    );\n  }\n\n  return (\n    <ConditionalPortal\n      portal={!isNoneRole && portal}\n      portalInto={portalInto}\n      portalIntoId={portalIntoId}\n    >\n      {overlayEl}\n      {rendered && dialog}\n    </ConditionalPortal>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}