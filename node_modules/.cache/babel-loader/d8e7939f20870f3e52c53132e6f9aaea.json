{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Sheet } from \"@react-md/sheet\";\nimport { bem } from \"@react-md/utils\";\nimport { LayoutNavigationHeader } from \"./LayoutNavigationHeader\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { LayoutTree } from \"./LayoutTree\";\nimport { isPersistentLayout, isTemporaryLayout, isToggleableLayout } from \"./utils\";\nimport { defaultMiniNavigationItemRenderer } from \"./defaultMiniNavigationItemRenderer\";\nvar styles = bem(\"rmd-layout-navigation\");\n/**\n * The container for the main navigation within the `Layout` that renders\n * differently depending on the current layout type.\n */\n\nexport var LayoutNavigation = forwardRef(function LayoutNavigation(_a, ref) {\n  var propId = _a.id,\n      _b = _a[\"aria-label\"],\n      ariaLabel = _b === void 0 ? \"Navigation\" : _b,\n      ariaLabelledby = _a[\"aria-labelledby\"],\n      className = _a.className,\n      children = _a.children,\n      _c = _a.mini,\n      mini = _c === void 0 ? false : _c,\n      propHeader = _a.header,\n      headerProps = _a.headerProps,\n      headerTitle = _a.headerTitle,\n      headerTitleProps = _a.headerTitleProps,\n      closeNav = _a.closeNav,\n      closeNavProps = _a.closeNavProps,\n      treeProps = _a.treeProps,\n      _d = _a.sticky,\n      sticky = _d === void 0 ? false : _d,\n      _e = _a.miniNavItemRenderer,\n      miniNavItemRenderer = _e === void 0 ? defaultMiniNavigationItemRenderer : _e,\n      props = __rest(_a, [\"id\", \"aria-label\", \"aria-labelledby\", \"className\", \"children\", \"mini\", \"header\", \"headerProps\", \"headerTitle\", \"headerTitleProps\", \"closeNav\", \"closeNavProps\", \"treeProps\", \"sticky\", \"miniNavItemRenderer\"]);\n\n  var _f = useLayoutConfig(),\n      baseId = _f.baseId,\n      layout = _f.layout,\n      isNonMiniVisible = _f.visible,\n      hideNav = _f.hideNav;\n\n  var visible = mini || isNonMiniVisible;\n  var id = propId || \"\".concat(baseId, \"-\").concat(mini ? \"mini-\" : \"\", \"nav-container\");\n  var isTemporary = !mini && isTemporaryLayout(layout);\n  var isPersistent = mini || isPersistentLayout(layout);\n  var isToggleable = !mini && isToggleableLayout(layout);\n  var floating = layout === \"floating\";\n  var header = propHeader;\n\n  if (!mini && typeof header === \"undefined\") {\n    header = _jsx(LayoutNavigationHeader, __assign({\n      closeNav: closeNav,\n      closeNavProps: closeNavProps,\n      title: headerTitle,\n      titleProps: headerTitleProps\n    }, headerProps));\n  }\n\n  return _createElement(Sheet, __assign({}, props, {\n    key: layout,\n    id: id,\n    ref: ref,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    role: !isPersistent ? \"dialog\" : \"none\",\n    visible: visible,\n    onRequestClose: hideNav,\n    // do not want to portal for the other types so that logical tab order\n    // is preserved\n    portal: isTemporary,\n    overlay: isTemporary,\n    disableScrollLock: !isTemporary,\n    disableTabFocusWrap: isToggleable,\n    disableNestedDialogFixes: mini,\n    className: cn(styles({\n      mini: mini,\n      sticky: sticky,\n      floating: floating,\n      \"header-offset\": layout === \"clipped\" || floating\n    }), className)\n  }), header, treeProps && _jsx(LayoutTree, __assign({\n    miniItemRenderer: miniNavItemRenderer,\n    sticky: mini && sticky\n  }, treeProps, {\n    mini: mini\n  })), children);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,KAAT,QAAsB,iBAAtB;AAGA,SAASC,GAAT,QAAoB,iBAApB;AAIA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SACEC,kBADF,EAEEC,iBAFF,EAGEC,kBAHF,QAIO,SAJP;AAKA,SAASC,iCAAT,QAAkD,qCAAlD;AA4FA,IAAMC,MAAM,GAAGR,GAAG,CAAC,uBAAD,CAAlB;AAEA;;;;;AAIA,OAAO,IAAMS,gBAAgB,GAAGZ,UAAU,CAGxC,SAASY,gBAAT,CACAC,EADA,EAmBAC,GAnBA,EAmBG;EAjBD,IAAIC,MAAM,QAAV;EAAA,IACAC,qBADA;EAAA,IACcC,SAAS,mBAAG,YAAH,GAAeD,EADtC;EAAA,IAEmBE,cAAc,wBAFjC;EAAA,IAGAC,SAAS,eAHT;EAAA,IAIAC,QAAQ,cAJR;EAAA,IAKAC,YALA;EAAA,IAKAC,IAAI,mBAAG,KAAH,GAAQD,EALZ;EAAA,IAMQE,UAAU,YANlB;EAAA,IAOAC,WAAW,iBAPX;EAAA,IAQAC,WAAW,iBARX;EAAA,IASAC,gBAAgB,sBAThB;EAAA,IAUAC,QAAQ,cAVR;EAAA,IAWAC,aAAa,mBAXb;EAAA,IAYAC,SAAS,eAZT;EAAA,IAaAC,cAbA;EAAA,IAaAC,MAAM,mBAAG,KAAH,GAAQD,EAbd;EAAA,IAcAE,2BAdA;EAAA,IAcAC,mBAAmB,mBAAGvB,iCAAH,GAAoCsB,EAdvD;EAAA,IAeGE,KAAK,cAhBV,+MAgBU,CAfR;;EAmBI,SAKF7B,eAAe,EALb;EAAA,IACJ8B,MAAM,YADF;EAAA,IAEJC,MAAM,YAFF;EAAA,IAGKC,gBAAgB,aAHrB;EAAA,IAIJC,OAAO,aAJH;;EAMN,IAAMC,OAAO,GAAGjB,IAAI,IAAIe,gBAAxB;EACA,IAAMG,EAAE,GAAGzB,MAAM,IAAI,UAAGoB,MAAH,EAAS,GAAT,EAASM,MAAT,CAAanB,IAAI,GAAG,OAAH,GAAa,EAA9B,EAAgC,eAAhC,CAArB;EAEA,IAAMoB,WAAW,GAAG,CAACpB,IAAD,IAASd,iBAAiB,CAAC4B,MAAD,CAA9C;EACA,IAAMO,YAAY,GAAGrB,IAAI,IAAIf,kBAAkB,CAAC6B,MAAD,CAA/C;EACA,IAAMQ,YAAY,GAAG,CAACtB,IAAD,IAASb,kBAAkB,CAAC2B,MAAD,CAAhD;EACA,IAAMS,QAAQ,GAAGT,MAAM,KAAK,UAA5B;EAEA,IAAIU,MAAM,GAAGvB,UAAb;;EACA,IAAI,CAACD,IAAD,IAAS,OAAOwB,MAAP,KAAkB,WAA/B,EAA4C;IAC1CA,MAAM,GACJC,KAAC3C,sBAAD,EAAuB4C;MACrBrB,QAAQ,EAAEA,QADW;MAErBC,aAAa,EAAEA,aAFM;MAGrBqB,KAAK,EAAExB,WAHc;MAIrByB,UAAU,EAAExB;IAJS,GAKjBF,WALiB,CAAvB,CADF;EASD;;EAED,OACE2B,eAACjD,KAAD,EAAM8C,aACAd,KADA,EACK;IACTkB,GAAG,EAAEhB,MADI;IAETI,EAAE,EAAEA,EAFK;IAGT1B,GAAG,EAAEA,GAHI;IAGD,cACIG,SAJH;IAIY,mBACJC,cALR;IAMTmC,IAAI,EAAE,CAACV,YAAD,GAAgB,QAAhB,GAA2B,MANxB;IAOTJ,OAAO,EAAEA,OAPA;IAQTe,cAAc,EAAEhB,OARP;IAST;IACA;IACAiB,MAAM,EAAEb,WAXC;IAYTc,OAAO,EAAEd,WAZA;IAaTe,iBAAiB,EAAE,CAACf,WAbX;IAcTgB,mBAAmB,EAAEd,YAdZ;IAeTe,wBAAwB,EAAErC,IAfjB;IAgBTH,SAAS,EAAElB,EAAE,CACXU,MAAM,CAAC;MACLW,IAAI,MADC;MAELS,MAAM,QAFD;MAGLc,QAAQ,UAHH;MAIL,iBAAiBT,MAAM,KAAK,SAAX,IAAwBS;IAJpC,CAAD,CADK,EAOX1B,SAPW;EAhBJ,CADL,CAAN,EA2BG2B,MA3BH,EA4BGjB,SAAS,IACRkB,KAACzC,UAAD,EAAW0C;IACTY,gBAAgB,EAAE3B,mBADT;IAETF,MAAM,EAAET,IAAI,IAAIS;EAFP,GAGLF,SAHK,EAGI;IACbP,IAAI,EAAEA;EADO,CAHJ,CAAX,CA7BJ,EAoCGF,QApCH,CADF;AAwCD,CA3FyC,CAAnC","names":["forwardRef","cn","Sheet","bem","LayoutNavigationHeader","useLayoutConfig","LayoutTree","isPersistentLayout","isTemporaryLayout","isToggleableLayout","defaultMiniNavigationItemRenderer","styles","LayoutNavigation","_a","ref","propId","_b","ariaLabel","ariaLabelledby","className","children","_c","mini","propHeader","headerProps","headerTitle","headerTitleProps","closeNav","closeNavProps","treeProps","_d","sticky","_e","miniNavItemRenderer","props","baseId","layout","isNonMiniVisible","hideNav","visible","id","concat","isTemporary","isPersistent","isToggleable","floating","header","_jsx","__assign","title","titleProps","_createElement","key","role","onRequestClose","portal","overlay","disableScrollLock","disableTabFocusWrap","disableNestedDialogFixes","miniItemRenderer"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\layout\\src\\LayoutNavigation.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { SheetProps } from \"@react-md/sheet\";\nimport { Sheet } from \"@react-md/sheet\";\nimport type { BaseTreeItem, TreeItemRenderer } from \"@react-md/tree\";\nimport type { PropsWithRef } from \"@react-md/utils\";\nimport { bem } from \"@react-md/utils\";\n\nimport type { LayoutCloseNavigationButtonProps } from \"./LayoutCloseNavigationButton\";\nimport type { LayoutNavigationHeaderProps } from \"./LayoutNavigationHeader\";\nimport { LayoutNavigationHeader } from \"./LayoutNavigationHeader\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport type { LayoutTreeProps } from \"./LayoutTree\";\nimport { LayoutTree } from \"./LayoutTree\";\nimport type { LayoutNavigationItem } from \"./types\";\nimport {\n  isPersistentLayout,\n  isTemporaryLayout,\n  isToggleableLayout,\n} from \"./utils\";\nimport { defaultMiniNavigationItemRenderer } from \"./defaultMiniNavigationItemRenderer\";\n\nexport type LayoutNavigationSheetProps = Omit<\n  SheetProps,\n  | \"id\"\n  | \"role\"\n  | \"component\"\n  | \"visible\"\n  | \"onRequestClose\"\n  | \"disableScrollLock\"\n  | \"disableTabFocusWrap\"\n>;\n\nexport interface LayoutNavigationProps<\n  T extends BaseTreeItem = LayoutNavigationItem\n> extends LayoutNavigationSheetProps {\n  /**\n   * The id to use for the main navigation sheet element. When this is omitted,\n   * this will be defaulted to: `${baseId}-nav-container`.\n   */\n  id?: string;\n\n  /**\n   * An optional header element to display before the navigation tree and\n   * children. When this is omitted, it will default to the\n   * `LayoutNavigationHeader` component with some reasonable defaults.\n   */\n  header?: ReactNode;\n\n  /**\n   * Any additional props to provide to the default `LayoutNavigationHeader`\n   * component.\n   */\n  headerProps?: PropsWithRef<LayoutNavigationHeaderProps, HTMLDivElement>;\n\n  /**\n   * An optional title to display within the `LayoutNavigationHeader` component\n   * that will be wrapped in an `AppBarTitle`.\n   */\n  headerTitle?: LayoutNavigationHeaderProps[\"title\"];\n\n  /**\n   * Any additional props that should be passed to the `AppBarTitle` that\n   * surrounds the `headerTitle`.\n   */\n  headerTitleProps?: PropsWithRef<\n    Required<LayoutNavigationHeaderProps>[\"titleProps\"],\n    HTMLDivElement\n  >;\n\n  /**\n   * An optional component to use instead of the default\n   * `LayoutCloseNavigationButton` in the header.\n   */\n  closeNav?: ReactNode;\n\n  /**\n   * Any additional props to provide the `LayoutCloseNavigationButton`.\n   */\n  closeNavProps?: PropsWithRef<\n    LayoutCloseNavigationButtonProps,\n    HTMLButtonElement\n  >;\n\n  /**\n   * When this is omitted, the default navigation tree will not be rendered and\n   * the only content that will be displayed will be the optional `header`\n   * element and any provided `children`.\n   */\n  treeProps?: LayoutTreeProps<T>;\n\n  /**\n   * Boolean if being rendered as the `mini` variant. This will override some\n   * other behavior and styling within this component.\n   *\n   * @remarks \\@since 2.7.0\n   */\n  mini?: boolean;\n\n  /**\n   * Boolean if the mini navigation should be treated as a \"sticky\" element.\n   * This should really only be `true` if disabling the fixed `AppBar` behavior\n   * in the `Layout`.\n   *\n   * @remarks \\@since 2.8.3\n   */\n  sticky?: boolean;\n\n  /** @remarks \\@since 2.8.3 */\n  miniNavItemRenderer?: TreeItemRenderer<T>;\n}\n\nconst styles = bem(\"rmd-layout-navigation\");\n\n/**\n * The container for the main navigation within the `Layout` that renders\n * differently depending on the current layout type.\n */\nexport const LayoutNavigation = forwardRef<\n  HTMLDivElement,\n  LayoutNavigationProps\n>(function LayoutNavigation(\n  {\n    id: propId,\n    \"aria-label\": ariaLabel = \"Navigation\",\n    \"aria-labelledby\": ariaLabelledby,\n    className,\n    children,\n    mini = false,\n    header: propHeader,\n    headerProps,\n    headerTitle,\n    headerTitleProps,\n    closeNav,\n    closeNavProps,\n    treeProps,\n    sticky = false,\n    miniNavItemRenderer = defaultMiniNavigationItemRenderer,\n    ...props\n  },\n  ref\n) {\n  const {\n    baseId,\n    layout,\n    visible: isNonMiniVisible,\n    hideNav,\n  } = useLayoutConfig();\n  const visible = mini || isNonMiniVisible;\n  const id = propId || `${baseId}-${mini ? \"mini-\" : \"\"}nav-container`;\n\n  const isTemporary = !mini && isTemporaryLayout(layout);\n  const isPersistent = mini || isPersistentLayout(layout);\n  const isToggleable = !mini && isToggleableLayout(layout);\n  const floating = layout === \"floating\";\n\n  let header = propHeader;\n  if (!mini && typeof header === \"undefined\") {\n    header = (\n      <LayoutNavigationHeader\n        closeNav={closeNav}\n        closeNavProps={closeNavProps}\n        title={headerTitle}\n        titleProps={headerTitleProps}\n        {...headerProps}\n      />\n    );\n  }\n\n  return (\n    <Sheet\n      {...props}\n      key={layout}\n      id={id}\n      ref={ref}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledby}\n      role={!isPersistent ? \"dialog\" : \"none\"}\n      visible={visible}\n      onRequestClose={hideNav}\n      // do not want to portal for the other types so that logical tab order\n      // is preserved\n      portal={isTemporary}\n      overlay={isTemporary}\n      disableScrollLock={!isTemporary}\n      disableTabFocusWrap={isToggleable}\n      disableNestedDialogFixes={mini}\n      className={cn(\n        styles({\n          mini,\n          sticky,\n          floating,\n          \"header-offset\": layout === \"clipped\" || floating,\n        }),\n        className\n      )}\n    >\n      {header}\n      {treeProps && (\n        <LayoutTree\n          miniItemRenderer={miniNavItemRenderer}\n          sticky={mini && sticky}\n          {...treeProps}\n          mini={mini}\n        />\n      )}\n      {children}\n    </Sheet>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}