{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback } from \"react\";\nimport { useToggle } from \"@react-md/utils\";\n/**\n * @internal\n */\n\nexport function useFocusState(_a) {\n  var onFocus = _a.onFocus,\n      onBlur = _a.onBlur;\n\n  var _b = __read(useToggle(false), 3),\n      focused = _b[0],\n      setFocused = _b[1],\n      setBlurred = _b[2];\n\n  var handleFocus = useCallback(function (event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    setFocused();\n  }, [setFocused, onFocus]);\n  var handleBlur = useCallback(function (event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    setBlurred();\n  }, [setBlurred, onBlur]);\n  return [focused, handleFocus, handleBlur];\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAaA;;;;AAGA,OAAM,SAAUC,aAAV,CAAwBC,EAAxB,EAGI;MAFRC,OAAO;MACPC,MAAM;;EAEA,gBAAoCJ,SAAS,CAAC,KAAD,CAA7C,EAAoD,CAApD;EAAA,IAACK,OAAO,QAAR;EAAA,IAAUC,UAAU,QAApB;EAAA,IAAsBC,UAAU,QAAhC;;EAEN,IAAMC,WAAW,GAAGT,WAAW,CAC7B,UAACU,KAAD,EAAM;IACJ,IAAIN,OAAJ,EAAa;MACXA,OAAO,CAACM,KAAD,CAAP;IACD;;IAEDH,UAAU;EACX,CAP4B,EAQ7B,CAACA,UAAD,EAAaH,OAAb,CAR6B,CAA/B;EAWA,IAAMO,UAAU,GAAGX,WAAW,CAC5B,UAACU,KAAD,EAAM;IACJ,IAAIL,MAAJ,EAAY;MACVA,MAAM,CAACK,KAAD,CAAN;IACD;;IAEDF,UAAU;EACX,CAP2B,EAQ5B,CAACA,UAAD,EAAaH,MAAb,CAR4B,CAA9B;EAWA,OAAO,CAACC,OAAD,EAAUG,WAAV,EAAuBE,UAAvB,CAAP;AACD","names":["useCallback","useToggle","useFocusState","_a","onFocus","onBlur","focused","setFocused","setBlurred","handleFocus","event","handleBlur"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\useFocusState.ts"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { useCallback } from \"react\";\nimport { useToggle } from \"@react-md/utils\";\n\ntype FocusElement =\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLLabelElement\n  | HTMLSelectElement\n  | HTMLDivElement;\ntype BlurEventHandler = React.FocusEventHandler<FocusElement>;\ntype FocusEventHandler = React.FocusEventHandler<FocusElement>;\n\ntype Options = Pick<HTMLAttributes<FocusElement>, \"onBlur\" | \"onFocus\">;\n\n/**\n * @internal\n */\nexport function useFocusState({\n  onFocus,\n  onBlur,\n}: Options): [boolean, FocusEventHandler, BlurEventHandler] {\n  const [focused, setFocused, setBlurred] = useToggle(false);\n\n  const handleFocus = useCallback<FocusEventHandler>(\n    (event) => {\n      if (onFocus) {\n        onFocus(event);\n      }\n\n      setFocused();\n    },\n    [setFocused, onFocus]\n  );\n\n  const handleBlur = useCallback<BlurEventHandler>(\n    (event) => {\n      if (onBlur) {\n        onBlur(event);\n      }\n\n      setBlurred();\n    },\n    [setBlurred, onBlur]\n  );\n\n  return [focused, handleFocus, handleBlur];\n}\n"]},"metadata":{},"sourceType":"module"}