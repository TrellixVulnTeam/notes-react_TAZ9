{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\nimport { useCrossFadeTransition } from \"./useCrossFadeTransition\";\n/**\n * This is a component implementation of the {@link useCrossFadeTransition} hook\n * that implements the `temporary` behavior. Since this component uses the\n * `React.cloneElement` to inject the `ref` and `className` into the `children`,\n * it is recommended to use the hook instead.\n *\n * @example\n * Appear transitions with a React `key`\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { CrossFade } from \"@react-md/transition\";\n *\n * import Page1 from \"./Page1\";\n * import Page2 from \"./Page2\";\n * import Page3 from \"./Page3\";\n *\n * function Example(): ReactElement {\n *   const [page, setPage] = useState(0):\n *\n *   let content: ReactNode;\n *   switch (page) {\n *     case 0:\n *       content = <Page1 />\n *       break:\n *     case 1:\n *       content = <Page2 />\n *       break;\n *     case 2:\n *       content = <Page3 />\n *       break;\n *     default:\n *       content = null;\n *   }\n *\n *   return (\n *     <>\n *       <Button\n *         onClick={() => {\n *           setPage(prevPage => {\n *             const nextPage = prevPage + 1;\n *             if (nextPage > 2) {\n *               return 0;\n *             }\n *\n *             return nextPage;\n *           })\n *         }}\n *       >\n *         Change Page\n *       </Button>\n *       <CrossFade key={page}>\n *         <div>{content}</div>\n *       </CrossFade>\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 Updated for the new CSS Transition API and no longer\n * supports wrapping children in a `<div>`.\n */\n\nexport function CrossFade(_a) {\n  var _b = _a.appear,\n      appear = _b === void 0 ? true : _b,\n      _c = _a.transitionIn,\n      transitionIn = _c === void 0 ? appear : _c,\n      children = _a.children,\n      className = _a.className,\n      options = __rest(_a, [\"appear\", \"transitionIn\", \"children\", \"className\"]);\n\n  var child = Children.only(children);\n\n  var _d = useCrossFadeTransition(__assign(__assign({}, options), {\n    appear: appear,\n    className: cn(child.props.className, className),\n    transitionIn: transitionIn\n  })),\n      elementProps = _d.elementProps,\n      rendered = _d.rendered;\n\n  if (!rendered) {\n    return null;\n  }\n\n  return cloneElement(children, elementProps);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,OAAvC;AACA,OAAOC,EAAP,MAAe,YAAf;AAIA,SAASC,sBAAT,QAAuC,0BAAvC;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA,OAAM,SAAUC,SAAV,CAA2CC,EAA3C,EAMc;EALlB;EAAA,UAAM,mBAAG,IAAH,GAAOC,EAAb;EAAA,IACAC,oBADA;EAAA,IACAC,YAAY,mBAAGC,MAAH,GAASF,EADrB;EAAA,IAEAG,QAAQ,cAFR;EAAA,IAGAC,SAAS,eAHT;EAAA,IAIGC,OAAO,cALqC,mDAKrC,CAJV;;EAMA,IAAMC,KAAK,GAAGb,QAAQ,CAACc,IAAT,CAAcJ,QAAd,CAAd;;EACM,SAA6BP,sBAAsB,uBACpDS,OADoD,GAC7C;IACVH,MAAM,QADI;IAEVE,SAAS,EAAET,EAAE,CAACW,KAAK,CAACE,KAAN,CAAYJ,SAAb,EAAwBA,SAAxB,CAFH;IAGVH,YAAY;EAHF,CAD6C,EAAnD;EAAA,IAAEQ,YAAY,kBAAd;EAAA,IAAgBC,QAAQ,cAAxB;;EAON,IAAI,CAACA,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,OAAOhB,YAAY,CAACS,QAAD,EAAWM,YAAX,CAAnB;AACD","names":["Children","cloneElement","cn","useCrossFadeTransition","CrossFade","_a","_b","_c","transitionIn","appear","children","className","options","child","only","props","elementProps","rendered"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\transition\\src\\CrossFade.tsx"],"sourcesContent":["import type { ReactElement } from \"react\";\nimport { Children, cloneElement } from \"react\";\nimport cn from \"classnames\";\n\nimport type { CSSTransitionComponentImplementation } from \"./types\";\nimport type { CrossFadeTransitionHookOptions } from \"./useCrossFadeTransition\";\nimport { useCrossFadeTransition } from \"./useCrossFadeTransition\";\n\n/**\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 Updated for the new CSS Transition API\n */\nexport interface CrossFadeProps<E extends HTMLElement>\n  extends CrossFadeTransitionHookOptions<E>,\n    CSSTransitionComponentImplementation<E> {\n  /**\n   * Unlike the {@link useCrossFadeTransition}, the `appear` value is defaulted\n   * to `true` so that the transition can occur when the `key` changes.\n   *\n   * @see {@link CrossFadeTransitionHookOptions.appear}\n   * @defaultValue `true`\n   */\n  appear?: boolean;\n}\n\n/**\n * This is a component implementation of the {@link useCrossFadeTransition} hook\n * that implements the `temporary` behavior. Since this component uses the\n * `React.cloneElement` to inject the `ref` and `className` into the `children`,\n * it is recommended to use the hook instead.\n *\n * @example\n * Appear transitions with a React `key`\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { CrossFade } from \"@react-md/transition\";\n *\n * import Page1 from \"./Page1\";\n * import Page2 from \"./Page2\";\n * import Page3 from \"./Page3\";\n *\n * function Example(): ReactElement {\n *   const [page, setPage] = useState(0):\n *\n *   let content: ReactNode;\n *   switch (page) {\n *     case 0:\n *       content = <Page1 />\n *       break:\n *     case 1:\n *       content = <Page2 />\n *       break;\n *     case 2:\n *       content = <Page3 />\n *       break;\n *     default:\n *       content = null;\n *   }\n *\n *   return (\n *     <>\n *       <Button\n *         onClick={() => {\n *           setPage(prevPage => {\n *             const nextPage = prevPage + 1;\n *             if (nextPage > 2) {\n *               return 0;\n *             }\n *\n *             return nextPage;\n *           })\n *         }}\n *       >\n *         Change Page\n *       </Button>\n *       <CrossFade key={page}>\n *         <div>{content}</div>\n *       </CrossFade>\n *     </>\n *   );\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 2.0.0\n * @remarks \\@since 4.0.0 Updated for the new CSS Transition API and no longer\n * supports wrapping children in a `<div>`.\n */\nexport function CrossFade<E extends HTMLElement>({\n  appear = true,\n  transitionIn = appear,\n  children,\n  className,\n  ...options\n}: CrossFadeProps<E>): ReactElement | null {\n  const child = Children.only(children);\n  const { elementProps, rendered } = useCrossFadeTransition({\n    ...options,\n    appear,\n    className: cn(child.props.className, className),\n    transitionIn,\n  });\n\n  if (!rendered) {\n    return null;\n  }\n\n  return cloneElement(children, elementProps);\n}\n"]},"metadata":{},"sourceType":"module"}