{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-expansion-panel\");\n/**\n * The header for a panel that controls the expansion state. This is really just\n * a simple button that displays the children before an expander icon.\n *\n * Reminder: Since this is a `<button>`, only `inline` elements should be\n * rendered within (so use `<span>` instead of `<div>` for children).\n */\n\nexport var ExpansionPanelHeader = forwardRef(function ExpansionPanelHeader(_a, ref) {\n  var propIcon = _a.icon,\n      expanded = _a.expanded,\n      children = _a.children,\n      className = _a.className,\n      _b = _a.disableTransition,\n      disableTransition = _b === void 0 ? false : _b,\n      props = __rest(_a, [\"icon\", \"expanded\", \"children\", \"className\", \"disableTransition\"]);\n\n  var icon = useIcon(\"expander\", propIcon);\n  return _jsxs(UnstyledButton, __assign({}, props, {\n    ref: ref,\n    \"aria-expanded\": expanded || undefined,\n    className: cn(block(\"header\"), className)\n  }, {\n    children: [children, icon && _jsx(\"span\", __assign({\n      className: block(\"icon\")\n    }, {\n      children: _jsx(IconRotator, __assign({\n        animate: !disableTransition,\n        rotated: expanded\n      }, {\n        children: icon\n      }))\n    }))]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,gBAArC;AACA,SAASC,GAAT,QAAoB,iBAApB;AAwCA,IAAMC,KAAK,GAAGD,GAAG,CAAC,qBAAD,CAAjB;AAEA;;;;;;;;AAOA,OAAO,IAAME,oBAAoB,GAAGP,UAAU,CAG5C,SAASO,oBAAT,CACAC,EADA,EASAC,GATA,EASG;EAPD,IAAMC,QAAQ,UAAd;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,QAAQ,cAFR;EAAA,IAGAC,SAAS,eAHT;EAAA,IAIAC,yBAJA;EAAA,IAIAC,iBAAiB,mBAAG,KAAH,GAAQD,EAJzB;EAAA,IAKGE,KAAK,cANV,kEAMU,CALR;;EASF,IAAMC,IAAI,GAAGb,OAAO,CAAC,UAAD,EAAaM,QAAb,CAApB;EAEA,OACEQ,MAAChB,cAAD,EAAeiB,aACTH,KADS,EACJ;IACTP,GAAG,EAAEA,GADI;IACD,iBACOE,QAAQ,IAAIS,SAFlB;IAGTP,SAAS,EAAEZ,EAAE,CAACK,KAAK,CAAC,QAAD,CAAN,EAAkBO,SAAlB;EAHJ,CADI,EAI4B;IAAAD,WAExCA,QAFwC,EAGxCK,IAAI,IACHI;MAAMR,SAAS,EAAEP,KAAK,CAAC,MAAD;IAAtB,GAA8B;MAAAM,UAC5BS,KAAClB,WAAD,EAAYgB;QAACG,OAAO,EAAE,CAACP,iBAAX;QAA8BQ,OAAO,EAAEZ;MAAvC,GAA+C;QAAAC,UACxDK;MADwD,CAA/C,CAAZ;IAD4B,CAA9B,EAJuC;EAAA,CAJ5B,CAAf,CADF;AAiBD,CAjC6C,CAAvC","names":["forwardRef","cn","UnstyledButton","IconRotator","useIcon","bem","block","ExpansionPanelHeader","_a","ref","propIcon","expanded","children","className","_b","disableTransition","props","icon","_jsxs","__assign","undefined","_jsx","animate","rotated"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\expansion-panel\\src\\ExpansionPanelHeader.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes, MouseEventHandler, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface ExpansionPanelHeaderProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * The id for the header. This is required for a11y.\n   */\n  id: string;\n\n  /**\n   * The icon to use for the expander icon.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Boolean if the panel is currently expanded. This is just used to rotate the\n   * icon as needed.\n   */\n  expanded: boolean;\n\n  /**\n   * The click handler that should attempt to toggle the expansion state of the\n   * panel.\n   */\n  onClick: MouseEventHandler<HTMLButtonElement>;\n\n  /**\n   * The children to display within the header.\n   *\n   * Reminder: Since this is a `<button>`, only `inline` elements should be\n   * rendered within (so use `<span>` instead of `<div>` for children).\n   */\n  children: ReactNode;\n\n  /**\n   * Boolean if the icon rotation transition should be disabled.\n   */\n  disableTransition?: boolean;\n}\n\nconst block = bem(\"rmd-expansion-panel\");\n\n/**\n * The header for a panel that controls the expansion state. This is really just\n * a simple button that displays the children before an expander icon.\n *\n * Reminder: Since this is a `<button>`, only `inline` elements should be\n * rendered within (so use `<span>` instead of `<div>` for children).\n */\nexport const ExpansionPanelHeader = forwardRef<\n  HTMLButtonElement,\n  ExpansionPanelHeaderProps\n>(function ExpansionPanelHeader(\n  {\n    icon: propIcon,\n    expanded,\n    children,\n    className,\n    disableTransition = false,\n    ...props\n  },\n  ref\n) {\n  const icon = useIcon(\"expander\", propIcon);\n\n  return (\n    <UnstyledButton\n      {...props}\n      ref={ref}\n      aria-expanded={expanded || undefined}\n      className={cn(block(\"header\"), className)}\n    >\n      {children}\n      {icon && (\n        <span className={block(\"icon\")}>\n          <IconRotator animate={!disableTransition} rotated={expanded}>\n            {icon}\n          </IconRotator>\n        </span>\n      )}\n    </UnstyledButton>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}