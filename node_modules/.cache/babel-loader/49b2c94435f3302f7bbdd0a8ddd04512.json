{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n/**\n * This hook allows you to provide anything that should be \"cached\" and puts it\n * into a ref that'll be updated each render. This is pretty overkill for most\n * places, but it's really nice when you want to create event handlers that\n * shouldn't update if the developer used arrow functions to define callbacks.\n * (A great example is for ref callbacks that *shouldn't* be triggered each\n * render. But that might just be a programming error instead).\n *\n * @param cacheable - The cacheable thing that gets updated after each render.\n * @returns a mutable ref object containing the current cache.\n */\n\nexport function useRefCache(cacheable) {\n  var ref = useRef(cacheable);\n  useEffect(function () {\n    ref.current = cacheable;\n  });\n  return ref;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA;;;;;;;;;;;;AAWA,OAAM,SAAUC,WAAV,CAAyBC,SAAzB,EAAqC;EACzC,IAAMC,GAAG,GAAGH,MAAM,CAACE,SAAD,CAAlB;EACAH,SAAS,CAAC;IACRI,GAAG,CAACC,OAAJ,GAAcF,SAAd;EACD,CAFQ,CAAT;EAIA,OAAOC,GAAP;AACD","names":["useEffect","useRef","useRefCache","cacheable","ref","current"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\useRefCache.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows you to provide anything that should be \"cached\" and puts it\n * into a ref that'll be updated each render. This is pretty overkill for most\n * places, but it's really nice when you want to create event handlers that\n * shouldn't update if the developer used arrow functions to define callbacks.\n * (A great example is for ref callbacks that *shouldn't* be triggered each\n * render. But that might just be a programming error instead).\n *\n * @param cacheable - The cacheable thing that gets updated after each render.\n * @returns a mutable ref object containing the current cache.\n */\nexport function useRefCache<T>(cacheable: T): { readonly current: T } {\n  const ref = useRef(cacheable);\n  useEffect(() => {\n    ref.current = cacheable;\n  });\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"module"}