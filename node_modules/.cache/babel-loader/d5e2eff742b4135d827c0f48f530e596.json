{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { useMenuBarContext } from \"./MenuBarProvider\";\nimport { useMenuBarWidgetFocusId } from \"./MenuBarWidget\";\nimport { MenuItem } from \"./MenuItem\";\n/**\n * This is just an internal component that handles rendering a submenu as a\n * menuitem for a `DropdownMenu` with a conditional dropdown icon.\n *\n * @internal\n * @remarks \\@since 5.0.0\n */\n\nexport var MenuItemButton = forwardRef(function MenuItemButton(_a, ref) {\n  var id = _a.id,\n      children = _a.children,\n      propRightAddon = _a.rightAddon,\n      _b = _a.disableDropdownIcon,\n      disableDropdownIcon = _b === void 0 ? typeof propRightAddon !== \"undefined\" : _b,\n      visible = _a.visible,\n      tabIndex = _a.tabIndex,\n      iconRotatorProps = _a.iconRotatorProps,\n      props = __rest(_a, [\"id\", \"children\", \"rightAddon\", \"disableDropdownIcon\", \"visible\", \"tabIndex\", \"iconRotatorProps\"]);\n\n  var root = useMenuBarContext().root;\n  var focusId = useMenuBarWidgetFocusId();\n  var dropdownIcon = useIcon(root ? \"dropdown\" : \"forward\");\n  var rightAddon = propRightAddon;\n\n  if (!disableDropdownIcon) {\n    rightAddon = _jsx(IconRotator, __assign({}, iconRotatorProps, {\n      rotated: visible\n    }, {\n      children: dropdownIcon\n    }));\n  }\n\n  return _jsx(MenuItem, __assign({}, props, {\n    id: id,\n    ref: ref,\n    rightAddon: rightAddon,\n    tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : root && id === focusId ? 0 : -1\n  }, {\n    children: children\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,gBAArC;AAEA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,uBAAT,QAAwC,iBAAxC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAgBA;;;;;;;;AAOA,OAAO,IAAMC,cAAc,GAAGN,UAAU,CACtC,SAASM,cAAT,CACEC,EADF,EAWEC,GAXF,EAWK;EATD,MAAE,QAAF;EAAA,IACAC,QAAQ,cADR;EAAA,IAEYC,cAAc,gBAF1B;EAAA,IAGAC,2BAHA;EAAA,IAGAC,mBAAmB,mBAAG,OAAOF,cAAP,KAA0B,WAA7B,GAAwCC,EAH3D;EAAA,IAIAE,OAAO,aAJP;EAAA,IAKAC,QAAQ,cALR;EAAA,IAMAC,gBAAgB,sBANhB;EAAA,IAOGC,KAAK,cARV,kGAQU,CAPR;;EAWM,QAAI,GAAKb,iBAAiB,GAAEc,IAA5B;EACR,IAAMC,OAAO,GAAGd,uBAAuB,EAAvC;EACA,IAAMe,YAAY,GAAGjB,OAAO,CAACe,IAAI,GAAG,UAAH,GAAgB,SAArB,CAA5B;EAEA,IAAIG,UAAU,GAAGV,cAAjB;;EACA,IAAI,CAACE,mBAAL,EAA0B;IACxBQ,UAAU,GACRC,KAACpB,WAAD,EAAYqB,aAAKP,gBAAL,EAAqB;MAAEQ,OAAO,EAAEV;IAAX,CAArB,EAAuC;MAAAJ,UAChDU;IADgD,CAAvC,CAAZ,CADF;EAKD;;EAED,OACEE,KAAChB,QAAD,EAASiB,aACHN,KADG,EACE;IACTQ,EAAE,EAAEA,EADK;IAEThB,GAAG,EAAEA,GAFI;IAGTY,UAAU,EAAEA,UAHH;IAITN,QAAQ,EAAEA,QAAQ,SAAR,YAAQ,WAAR,cAAaG,IAAI,IAAIO,EAAE,KAAKN,OAAf,GAAyB,CAAzB,GAA6B,CAAC;EAJ5C,CADF,EAKgD;IAAAT,UAEtDA;EAFsD,CALhD,CAAT,CADF;AAWD,CAtCqC,CAAjC","names":["forwardRef","IconRotator","useIcon","useMenuBarContext","useMenuBarWidgetFocusId","MenuItem","MenuItemButton","_a","ref","children","propRightAddon","_b","disableDropdownIcon","visible","tabIndex","iconRotatorProps","props","root","focusId","dropdownIcon","rightAddon","_jsx","__assign","rotated","id"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\menu\\src\\MenuItemButton.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\n\nimport { useMenuBarContext } from \"./MenuBarProvider\";\nimport { useMenuBarWidgetFocusId } from \"./MenuBarWidget\";\nimport { MenuItem } from \"./MenuItem\";\nimport type { BaseMenuItemButtonProps } from \"./types\";\n\n/**\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport interface MenuItemButtonProps extends BaseMenuItemButtonProps {\n  /**\n   * Boolean if the menu is currently visible which will rotate the dropdown\n   * icon when the {@link BaseDropdownMenuItemProps.disableDropdownIcon} is not\n   * `true`.\n   */\n  visible: boolean;\n}\n\n/**\n * This is just an internal component that handles rendering a submenu as a\n * menuitem for a `DropdownMenu` with a conditional dropdown icon.\n *\n * @internal\n * @remarks \\@since 5.0.0\n */\nexport const MenuItemButton = forwardRef<HTMLLIElement, MenuItemButtonProps>(\n  function MenuItemButton(\n    {\n      id,\n      children,\n      rightAddon: propRightAddon,\n      disableDropdownIcon = typeof propRightAddon !== \"undefined\",\n      visible,\n      tabIndex,\n      iconRotatorProps,\n      ...props\n    },\n    ref\n  ) {\n    const { root } = useMenuBarContext();\n    const focusId = useMenuBarWidgetFocusId();\n    const dropdownIcon = useIcon(root ? \"dropdown\" : \"forward\");\n\n    let rightAddon = propRightAddon;\n    if (!disableDropdownIcon) {\n      rightAddon = (\n        <IconRotator {...iconRotatorProps} rotated={visible}>\n          {dropdownIcon}\n        </IconRotator>\n      );\n    }\n\n    return (\n      <MenuItem\n        {...props}\n        id={id}\n        ref={ref}\n        rightAddon={rightAddon}\n        tabIndex={tabIndex ?? (root && id === focusId ? 0 : -1)}\n      >\n        {children}\n      </MenuItem>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}