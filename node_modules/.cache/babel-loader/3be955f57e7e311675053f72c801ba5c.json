{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, forwardRef } from \"react\";\nimport { GridListCell } from \"./GridListCell\";\nimport { DEFAULT_GRID_LIST_MAX_CELL_SIZE, DEFAULT_GRID_LIST_PADDING, GridListSizeProvider, useGridList } from \"./useGridList\";\n\nvar isRenderFunction = function (children) {\n  return typeof children === \"function\";\n};\n/**\n * The `GridList` component is a different way to render a list of data where\n * the number of columns is dynamic and based on the max-width for each cell.\n * Instead of setting a percentage width to each cell based on the number of\n * columns, this will dynamically add columns to fill up the remaining space and\n * have each cell grow up to a set max-width. A really good use-case for this is\n * displaying a list of images or thumbnails and allowing the user to see a full\n * screen preview once selected/clicked.\n */\n\n\nexport var GridList = forwardRef(function GridList(_a, forwardedRef) {\n  var style = _a.style,\n      className = _a.className,\n      children = _a.children,\n      _b = _a.clone,\n      clone = _b === void 0 ? false : _b,\n      _c = _a.wrapOnly,\n      wrapOnly = _c === void 0 ? false : _c,\n      cellMargin = _a.cellMargin,\n      defaultSize = _a.defaultSize,\n      _d = _a.maxCellSize,\n      maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d,\n      _e = _a.containerPadding,\n      containerPadding = _e === void 0 ? DEFAULT_GRID_LIST_PADDING : _e,\n      _f = _a.disableHeightObserver,\n      disableHeightObserver = _f === void 0 ? false : _f,\n      _g = _a.disableWidthObserver,\n      disableWidthObserver = _g === void 0 ? false : _g,\n      props = __rest(_a, [\"style\", \"className\", \"children\", \"clone\", \"wrapOnly\", \"cellMargin\", \"defaultSize\", \"maxCellSize\", \"containerPadding\", \"disableHeightObserver\", \"disableWidthObserver\"]);\n\n  var _h = __read(useGridList({\n    ref: forwardedRef,\n    style: style,\n    className: className,\n    cellMargin: cellMargin,\n    defaultSize: defaultSize,\n    maxCellSize: maxCellSize,\n    containerPadding: containerPadding,\n    disableHeight: disableHeightObserver,\n    disableWidth: disableWidthObserver\n  }), 2),\n      gridListProps = _h[0],\n      gridSize = _h[1];\n\n  var content = null;\n\n  if (isRenderFunction(children)) {\n    content = children(gridSize);\n  } else if (clone || wrapOnly) {\n    content = Children.map(children, function (child) {\n      return child && _jsx(GridListCell, __assign({\n        clone: clone\n      }, {\n        children: child\n      }));\n    });\n  } else {\n    content = children;\n  }\n\n  return _jsx(GridListSizeProvider, __assign({\n    value: gridSize\n  }, {\n    children: _jsx(\"div\", __assign({}, props, gridListProps, {\n      children: content\n    }))\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACEC,+BADF,EAEEC,yBAFF,EAGEC,oBAHF,EAIEC,WAJF,QAKO,eALP;;AA+DA,IAAMC,gBAAgB,GAAG,UACvBC,QADuB,EACY;EACI,cAAOA,QAAP,KAAoB,UAApB;AAA8B,CAFvE;AAIA;;;;;;;;;;;AASA,OAAO,IAAMC,QAAQ,GAAGR,UAAU,CAChC,SAASQ,QAAT,CACEC,EADF,EAeEC,YAfF,EAec;EAbV,SAAK,WAAL;EAAA,IACAC,SAAS,eADT;EAAA,IAEAJ,QAAQ,cAFR;EAAA,IAGAK,aAHA;EAAA,IAGAC,KAAK,mBAAG,KAAH,GAAQD,EAHb;EAAA,IAIAE,gBAJA;EAAA,IAIAC,QAAQ,mBAAG,KAAH,GAAQD,EAJhB;EAAA,IAKAE,UAAU,gBALV;EAAA,IAMAC,WAAW,iBANX;EAAA,IAOAC,mBAPA;EAAA,IAOAC,WAAW,mBAAGjB,+BAAH,GAAkCgB,EAP7C;EAAA,IAQAE,wBARA;EAAA,IAQAC,gBAAgB,mBAAGlB,yBAAH,GAA4BiB,EAR5C;EAAA,IASAE,6BATA;EAAA,IASAC,qBAAqB,mBAAG,KAAH,GAAQD,EAT7B;EAAA,IAUAE,4BAVA;EAAA,IAUAC,oBAAoB,mBAAG,KAAH,GAAQD,EAV5B;EAAA,IAWGE,KAAK,cAZV,wKAYU,CAXR;;EAeI,gBAA4BrB,WAAW,CAAC;IAC5CsB,GAAG,EAAEjB,YADuC;IAE5CkB,KAAK,OAFuC;IAG5CjB,SAAS,WAHmC;IAI5CK,UAAU,YAJkC;IAK5CC,WAAW,aALiC;IAM5CE,WAAW,aANiC;IAO5CE,gBAAgB,kBAP4B;IAQ5CQ,aAAa,EAAEN,qBAR6B;IAS5CO,YAAY,EAAEL;EAT8B,CAAD,CAAvC,EAUJ,CAVI;EAAA,IAACM,aAAa,QAAd;EAAA,IAAgBC,QAAQ,QAAxB;;EAYN,IAAIC,OAAO,GAAc,IAAzB;;EACA,IAAI3B,gBAAgB,CAACC,QAAD,CAApB,EAAgC;IAC9B0B,OAAO,GAAG1B,QAAQ,CAACyB,QAAD,CAAlB;EACD,CAFD,MAEO,IAAInB,KAAK,IAAIE,QAAb,EAAuB;IAC5BkB,OAAO,GAAGlC,QAAQ,CAACmC,GAAT,CACR3B,QADQ,EAER,UAAC4B,KAAD,EAAM;MAAK,YAAK,IAAIC,KAACnC,YAAD,EAAaoC;QAACxB,KAAK,EAAEA;MAAR,GAAa;QAAAN,UAAG4B;MAAH,CAAb,CAAb,CAAT;IAA2D,CAF9D,CAAV;EAID,CALM,MAKA;IACLF,OAAO,GAAG1B,QAAV;EACD;;EAED,OACE6B,KAAChC,oBAAD,EAAqBiC;IAACC,KAAK,EAAEN;EAAR,GAAgB;IAAAzB,UACnC6B,yBAASV,KAAT,EAAoBK,aAApB,EAAiC;MAAAxB,UAC9B0B;IAD8B,CAAjC;EADmC,CAAhB,CAArB,CADF;AAOD,CAjD+B,CAA3B","names":["Children","forwardRef","GridListCell","DEFAULT_GRID_LIST_MAX_CELL_SIZE","DEFAULT_GRID_LIST_PADDING","GridListSizeProvider","useGridList","isRenderFunction","children","GridList","_a","forwardedRef","className","_b","clone","_c","wrapOnly","cellMargin","defaultSize","_d","maxCellSize","_e","containerPadding","_f","disableHeightObserver","_g","disableWidthObserver","props","ref","style","disableHeight","disableWidth","gridListProps","gridSize","content","map","child","_jsx","__assign","value"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\layout\\GridList.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from \"react\";\nimport { Children, forwardRef } from \"react\";\n\nimport { GridListCell } from \"./GridListCell\";\nimport type { GridListSize, UseGridListOptions } from \"./useGridList\";\nimport {\n  DEFAULT_GRID_LIST_MAX_CELL_SIZE,\n  DEFAULT_GRID_LIST_PADDING,\n  GridListSizeProvider,\n  useGridList,\n} from \"./useGridList\";\n\n/**\n * The children render function that will be provided the current grid list size\n * object and should return renderable elements.\n *\n * Note: The first time this is called, the `columns` and `cellWidth` will be\n * the `defaultSize`.  Once the `GridList` has been fully mounted in the DOM, it\n * will begin the sizing calculations and update with the \"real\" values. This\n * doesn't cause any problems if you are only rendering client side, but it\n * might mess up server-side rendering, so it is recommended to update the\n * `defaultSize` when server-side rendering if this can be \"known\" service-side\n * in your app.\n */\nexport type RenderGridListChildren = (size: GridListSize) => ReactNode;\n\nexport interface GridListProps\n  extends HTMLAttributes<HTMLDivElement>,\n    UseGridListOptions {\n  /**\n   * Boolean if the resize observer should stop tracking width changes within\n   * the `GridList`. This should normally stay as `false` since tracking width\n   * changes will allow for dynamic content being added to the list to not mess\n   * up the grid calculation when the user is on an OS that shows scrollbars.\n   */\n  disableHeightObserver?: boolean;\n\n  /**\n   * Boolean if the resize observer should stop tracking width changes within\n   * the `GridList`. This should normally stay as `false` since tracking width\n   * changes will allow for dynamic content being added to the list to not mess\n   * up the grid calculation when the user is on an OS that shows scrollbars.\n   */\n  disableWidthObserver?: boolean;\n\n  /**\n   * The children to display within the grid list. This can either be a callback\n   * function that will provide the current calculated width for each cell that\n   * should return renderable elements or any renderable elements that are sized\n   * with the `--rmd-cell-width` css variable.\n   */\n  children: ReactNode | RenderGridListChildren;\n\n  /**\n   * Boolean if the current cell sizing should automatically be cloned into each\n   * child. This will only work if the `children` is renderable element or a\n   * list of renderable elements that accept the `style` and `className` props.\n   */\n  clone?: boolean;\n\n  /**\n   * Boolean if each child within the `GridList` should be wrapped with the\n   * `GridListCell` component.  This will only work if the `children` is not a\n   * `function`.\n   */\n  wrapOnly?: boolean;\n}\n\nconst isRenderFunction = (\n  children: GridListProps[\"children\"]\n): children is RenderGridListChildren => typeof children === \"function\";\n\n/**\n * The `GridList` component is a different way to render a list of data where\n * the number of columns is dynamic and based on the max-width for each cell.\n * Instead of setting a percentage width to each cell based on the number of\n * columns, this will dynamically add columns to fill up the remaining space and\n * have each cell grow up to a set max-width. A really good use-case for this is\n * displaying a list of images or thumbnails and allowing the user to see a full\n * screen preview once selected/clicked.\n */\nexport const GridList = forwardRef<HTMLDivElement, GridListProps>(\n  function GridList(\n    {\n      style,\n      className,\n      children,\n      clone = false,\n      wrapOnly = false,\n      cellMargin,\n      defaultSize,\n      maxCellSize = DEFAULT_GRID_LIST_MAX_CELL_SIZE,\n      containerPadding = DEFAULT_GRID_LIST_PADDING,\n      disableHeightObserver = false,\n      disableWidthObserver = false,\n      ...props\n    },\n    forwardedRef\n  ) {\n    const [gridListProps, gridSize] = useGridList({\n      ref: forwardedRef,\n      style,\n      className,\n      cellMargin,\n      defaultSize,\n      maxCellSize,\n      containerPadding,\n      disableHeight: disableHeightObserver,\n      disableWidth: disableWidthObserver,\n    });\n\n    let content: ReactNode = null;\n    if (isRenderFunction(children)) {\n      content = children(gridSize);\n    } else if (clone || wrapOnly) {\n      content = Children.map(\n        children,\n        (child) => child && <GridListCell clone={clone}>{child}</GridListCell>\n      );\n    } else {\n      content = children;\n    }\n\n    return (\n      <GridListSizeProvider value={gridSize}>\n        <div {...props} {...gridListProps}>\n          {content}\n        </div>\n      </GridListSizeProvider>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}