{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from \"react\";\nimport { useDir, useIsomorphicLayoutEffect, useKeyboardFocusContext, useResizeObserver } from \"@react-md/utils\";\nimport { useTabs } from \"./TabsManager\";\nvar TAB_WIDTH_VAR = \"--rmd-tab-width\";\nvar TAB_OFFSET_VAR = \"--rmd-tab-offset\";\nexport function useTabIndicatorStyles(options) {\n  var ref = options.ref,\n      activeIndex = options.activeIndex;\n  var isRTL = useDir().dir === \"rtl\";\n  var tabs = useTabs().tabs;\n  var watching = useKeyboardFocusContext().watching;\n\n  var _a = __read(useState(function () {\n    var _a;\n\n    var tabWidth = \"\".concat(100 / tabs.length, \"%\");\n    return _a = {}, _a[TAB_WIDTH_VAR] = tabWidth, _a[TAB_OFFSET_VAR] = \"calc(\".concat(activeIndex, \" * \").concat(tabWidth, \")\"), _a;\n  }), 2),\n      indicatorStyles = _a[0],\n      setIndicatorStyles = _a[1];\n\n  var updateIndicatorStyles = useCallback(function () {\n    var _a;\n\n    var _b; // this is kind of hacky -- the styles should update when switching between\n    // RTL, but the RTL state isn't required for any styles. Just reference it\n    // so that the hooks eslint rule doesn't show a warning...\n\n\n    isRTL;\n    var current = (_b = watching.current[activeIndex]) === null || _b === void 0 ? void 0 : _b.element;\n\n    if (!current) {\n      return;\n    }\n\n    var cssVars = (_a = {}, _a[TAB_WIDTH_VAR] = \"\".concat(current.offsetWidth, \"px\"), _a[TAB_OFFSET_VAR] = \"\".concat(current.offsetLeft, \"px\"), _a);\n    setIndicatorStyles(function (prevStyles) {\n      if (prevStyles[TAB_WIDTH_VAR] === cssVars[TAB_WIDTH_VAR] && prevStyles[TAB_OFFSET_VAR] === cssVars[TAB_OFFSET_VAR]) {\n        return prevStyles;\n      }\n\n      return cssVars;\n    });\n  }, [activeIndex, watching, isRTL]);\n\n  var _b = __read(useResizeObserver(updateIndicatorStyles, {\n    ref: ref\n  }), 2),\n      nodeRef = _b[0],\n      refCallback = _b[1];\n\n  useIsomorphicLayoutEffect(function () {\n    var _a;\n\n    var activeTab = (_a = watching.current[activeIndex]) === null || _a === void 0 ? void 0 : _a.element;\n    var container = nodeRef.current;\n\n    if (!activeTab || !container) {\n      return;\n    } // NOTE: This should probably be moved into the `scrollIntoView` util\n    // whenever I do another major version update. This is the same code, just\n    // using horizontal properties\n\n\n    var offsetLeft = activeTab.offsetLeft;\n    var scrollLeft = container.scrollLeft;\n    var tabRight = offsetLeft + activeTab.offsetWidth;\n    var containerRight = container.offsetWidth + scrollLeft;\n\n    if (tabRight > containerRight) {\n      container.scrollLeft = tabRight - container.offsetWidth;\n    } else if (offsetLeft < scrollLeft) {\n      container.scrollLeft = offsetLeft;\n    }\n  }, [activeIndex, isRTL, nodeRef, watching]);\n  return {\n    refCallback: refCallback,\n    indicatorStyles: indicatorStyles\n  };\n}","map":{"version":3,"mappings":"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","names":["useCallback","useState","useDir","useIsomorphicLayoutEffect","useKeyboardFocusContext","useResizeObserver","useTabs","TAB_WIDTH_VAR","TAB_OFFSET_VAR","useTabIndicatorStyles","options","activeIndex","isRTL","dir","tabs","watching","tabWidth","length","_a","concat","indicatorStyles","setIndicatorStyles","updateIndicatorStyles","current","_b","element","cssVars","offsetWidth","offsetLeft","prevStyles","ref","nodeRef","refCallback","activeTab","container","tabRight","containerRight","scrollLeft"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tabs\\src\\useTabIndicatorStyles.ts"],"sourcesContent":["import type { Ref, RefCallback } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport {\n  useDir,\n  useIsomorphicLayoutEffect,\n  useKeyboardFocusContext,\n  useResizeObserver,\n} from \"@react-md/utils\";\n\nimport { useTabs } from \"./TabsManager\";\n\nconst TAB_WIDTH_VAR = \"--rmd-tab-width\";\nconst TAB_OFFSET_VAR = \"--rmd-tab-offset\";\n\ntype TabWidthVar = typeof TAB_WIDTH_VAR;\ntype TabOffsetVar = typeof TAB_OFFSET_VAR;\ntype IndicatorStyles = Record<TabWidthVar | TabOffsetVar, string>;\n\nexport interface TabIndicatorStylesHookOptions {\n  ref?: Ref<HTMLDivElement>;\n  activeIndex: number;\n}\n\nexport interface TabIndicatorStylesHookReturnValue {\n  refCallback: RefCallback<HTMLDivElement>;\n  indicatorStyles: IndicatorStyles;\n}\n\nexport function useTabIndicatorStyles(\n  options: TabIndicatorStylesHookOptions\n): TabIndicatorStylesHookReturnValue {\n  const { ref, activeIndex } = options;\n\n  const isRTL = useDir().dir === \"rtl\";\n  const { tabs } = useTabs();\n  const { watching } = useKeyboardFocusContext();\n  const [indicatorStyles, setIndicatorStyles] = useState<IndicatorStyles>(\n    () => {\n      const tabWidth = `${100 / tabs.length}%`;\n      return {\n        [TAB_WIDTH_VAR]: tabWidth,\n        [TAB_OFFSET_VAR]: `calc(${activeIndex} * ${tabWidth})`,\n      };\n    }\n  );\n  const updateIndicatorStyles = useCallback(() => {\n    // this is kind of hacky -- the styles should update when switching between\n    // RTL, but the RTL state isn't required for any styles. Just reference it\n    // so that the hooks eslint rule doesn't show a warning...\n    isRTL;\n\n    const current = watching.current[activeIndex]?.element;\n    if (!current) {\n      return;\n    }\n\n    const cssVars: IndicatorStyles = {\n      [TAB_WIDTH_VAR]: `${current.offsetWidth}px`,\n      [TAB_OFFSET_VAR]: `${current.offsetLeft}px`,\n    };\n    setIndicatorStyles((prevStyles) => {\n      if (\n        prevStyles[TAB_WIDTH_VAR] === cssVars[TAB_WIDTH_VAR] &&\n        prevStyles[TAB_OFFSET_VAR] === cssVars[TAB_OFFSET_VAR]\n      ) {\n        return prevStyles;\n      }\n\n      return cssVars;\n    });\n  }, [activeIndex, watching, isRTL]);\n  const [nodeRef, refCallback] = useResizeObserver(updateIndicatorStyles, {\n    ref,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    const activeTab = watching.current[activeIndex]?.element;\n    const container = nodeRef.current;\n    if (!activeTab || !container) {\n      return;\n    }\n\n    // NOTE: This should probably be moved into the `scrollIntoView` util\n    // whenever I do another major version update. This is the same code, just\n    // using horizontal properties\n    const { offsetLeft } = activeTab;\n    const { scrollLeft } = container;\n    const tabRight = offsetLeft + activeTab.offsetWidth;\n    const containerRight = container.offsetWidth + scrollLeft;\n    if (tabRight > containerRight) {\n      container.scrollLeft = tabRight - container.offsetWidth;\n    } else if (offsetLeft < scrollLeft) {\n      container.scrollLeft = offsetLeft;\n    }\n  }, [activeIndex, isRTL, nodeRef, watching]);\n\n  return {\n    refCallback,\n    indicatorStyles,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}