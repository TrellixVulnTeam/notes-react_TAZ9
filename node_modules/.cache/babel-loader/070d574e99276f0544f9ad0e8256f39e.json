{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport cn from \"classnames\";\nimport { useTransition } from \"./useTransition\";\nimport { getTransitionClassNames } from \"./utils\";\n/**\n * This hook is used to create CSS transitions for different components whenever\n * a {@link TransitionHookOptions.transitionIn} flag is changed.\n *\n * @example\n * Simple Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0.5;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0.5;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps } = useCSSTransition({\n *     timeout: 150,\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <Typography {...elementProps}>\n *         Some Opacity Changing Text\n *       </Typography>\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Visibility Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0;\n * //   transition: opacity .2s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps, rendered } = useCSSTransition({\n *     timeout: {\n *       enter: 200,\n *       exit: 150,\n *     },\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *     temporary: true,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <Typography {...elementProps}>\n *           Some Opacity Changing Text\n *         </Typography>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Mount Transition\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import { useCSSTransition } from \"@react-md/transition\";\n *\n * // Pretend styles\n * // .opacity {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n * //\n * // .opacity--active {\n * //   opacity: 1;\n * // }\n * //\n *\n * function Example(): ReactElement {\n *   const { elementProps } = useCSSTransition({\n *     appear: true,\n *     transitionIn: true,\n *     timeout: 300,\n *     classNames: \"opacity\",\n *   })\n *\n *   return <div {...elementProps}>Some Content!</div>;\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\n\nexport function useCSSTransition(_a) {\n  var className = _a.className,\n      classNames = _a.classNames,\n      _b = _a.appear,\n      appear = _b === void 0 ? false : _b,\n      _c = _a.enter,\n      enter = _c === void 0 ? true : _c,\n      _d = _a.exit,\n      exit = _d === void 0 ? true : _d,\n      timeout = _a.timeout,\n      options = __rest(_a, [\"className\", \"classNames\", \"appear\", \"enter\", \"exit\", \"timeout\"]);\n\n  var _e = useTransition(__assign(__assign({}, options), {\n    appear: appear,\n    enter: enter,\n    exit: exit,\n    timeout: timeout,\n    reflow: true\n  })),\n      ref = _e.ref,\n      stage = _e.stage,\n      rendered = _e.rendered,\n      appearing = _e.appearing,\n      transitionTo = _e.transitionTo;\n\n  var isEntering = stage === \"entering\";\n  var isEnter = isEntering || stage === \"enter\";\n  var isEntered = stage === \"entered\";\n  var isExiting = stage === \"exiting\";\n  var isExit = isExiting || stage === \"exit\";\n  var isExited = stage === \"exited\";\n  var transitionClassNames = getTransitionClassNames({\n    timeout: timeout,\n    appear: appear,\n    enter: enter,\n    exit: exit,\n    classNames: classNames\n  });\n  var elementProps = {\n    ref: ref,\n    className: cn( // always apply the provided className first since it makes snapshot\n    // tests easier to parse if dynamic classes come afterwards\n    className, appearing && isEnter && transitionClassNames.appear, appearing && isEntering && transitionClassNames.appearActive, appearing && isEntered && transitionClassNames.appearDone, !appearing && isEnter && transitionClassNames.enter, !appearing && isEntering && transitionClassNames.enterActive, !appearing && isEntered && transitionClassNames.enterDone, isExit && transitionClassNames.exit, isExiting && transitionClassNames.exitActive, isExited && transitionClassNames.exitDone) || undefined\n  };\n  return __assign(__assign({}, elementProps), {\n    stage: stage,\n    rendered: rendered,\n    appearing: appearing,\n    elementProps: elementProps,\n    transitionTo: transitionTo\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,EAAP,MAAe,YAAf;AAOA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,uBAAT,QAAwC,SAAxC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqJA,OAAM,SAAUC,gBAAV,CAAkDC,EAAlD,EAQwB;EAP5B,aAAS,eAAT;EAAA,IACAC,UAAU,gBADV;EAAA,IAEAC,cAFA;EAAA,IAEAC,MAAM,mBAAG,KAAH,GAAQD,EAFd;EAAA,IAGAE,aAHA;EAAA,IAGAC,KAAK,mBAAG,IAAH,GAAOD,EAHZ;EAAA,IAIAE,YAJA;EAAA,IAIAC,IAAI,mBAAG,IAAH,GAAOD,EAJX;EAAA,IAKAE,OAAO,aALP;EAAA,IAMGC,OAAO,cAP4C,iEAO5C,CANV;;EAQM,SAAoDZ,aAAa,uBAClEY,OADkE,GAC3D;IACVN,MAAM,QADI;IAEVE,KAAK,OAFK;IAGVE,IAAI,MAHM;IAIVC,OAAO,SAJG;IAKVE,MAAM,EAAE;EALE,CAD2D,EAAjE;EAAA,IAAEC,GAAG,SAAL;EAAA,IAAOC,KAAK,WAAZ;EAAA,IAAcC,QAAQ,cAAtB;EAAA,IAAwBC,SAAS,eAAjC;EAAA,IAAmCC,YAAY,kBAA/C;;EAQN,IAAMC,UAAU,GAAGJ,KAAK,KAAK,UAA7B;EACA,IAAMK,OAAO,GAAGD,UAAU,IAAIJ,KAAK,KAAK,OAAxC;EACA,IAAMM,SAAS,GAAGN,KAAK,KAAK,SAA5B;EACA,IAAMO,SAAS,GAAGP,KAAK,KAAK,SAA5B;EACA,IAAMQ,MAAM,GAAGD,SAAS,IAAIP,KAAK,KAAK,MAAtC;EACA,IAAMS,QAAQ,GAAGT,KAAK,KAAK,QAA3B;EACA,IAAMU,oBAAoB,GAAGxB,uBAAuB,CAAC;IACnDU,OAAO,SAD4C;IAEnDL,MAAM,QAF6C;IAGnDE,KAAK,OAH8C;IAInDE,IAAI,MAJ+C;IAKnDN,UAAU;EALyC,CAAD,CAApD;EAQA,IAAMsB,YAAY,GAAiC;IACjDZ,GAAG,KAD8C;IAEjDa,SAAS,EACP5B,EAAE,EACA;IACA;IACA4B,SAHA,EAIAV,SAAS,IAAIG,OAAb,IAAwBK,oBAAoB,CAACnB,MAJ7C,EAKAW,SAAS,IAAIE,UAAb,IAA2BM,oBAAoB,CAACG,YALhD,EAMAX,SAAS,IAAII,SAAb,IAA0BI,oBAAoB,CAACI,UAN/C,EAOA,CAACZ,SAAD,IAAcG,OAAd,IAAyBK,oBAAoB,CAACjB,KAP9C,EAQA,CAACS,SAAD,IAAcE,UAAd,IAA4BM,oBAAoB,CAACK,WARjD,EASA,CAACb,SAAD,IAAcI,SAAd,IAA2BI,oBAAoB,CAACM,SAThD,EAUAR,MAAM,IAAIE,oBAAoB,CAACf,IAV/B,EAWAY,SAAS,IAAIG,oBAAoB,CAACO,UAXlC,EAYAR,QAAQ,IAAIC,oBAAoB,CAACQ,QAZjC,CAAF,IAaKC;EAhB0C,CAAnD;EAmBA,6BACKR,YADL,GACiB;IACfX,KAAK,OADU;IAEfC,QAAQ,UAFO;IAGfC,SAAS,WAHM;IAIfS,YAAY,cAJG;IAKfR,YAAY;EALG,CADjB;AAQD","names":["cn","useTransition","getTransitionClassNames","useCSSTransition","_a","classNames","_b","appear","_c","enter","_d","exit","timeout","options","reflow","ref","stage","rendered","appearing","transitionTo","isEntering","isEnter","isEntered","isExiting","isExit","isExited","transitionClassNames","elementProps","className","appearActive","appearDone","enterActive","enterDone","exitActive","exitDone","undefined"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\transition\\src\\useCSSTransition.ts"],"sourcesContent":["import cn from \"classnames\";\n\nimport type {\n  CSSTransitionHookOptions,\n  CSSTransitionHookReturnValue,\n  CSSTransitionElementProps,\n} from \"./types\";\nimport { useTransition } from \"./useTransition\";\nimport { getTransitionClassNames } from \"./utils\";\n\n/**\n * This hook is used to create CSS transitions for different components whenever\n * a {@link TransitionHookOptions.transitionIn} flag is changed.\n *\n * @example\n * Simple Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0.5;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0.5;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps } = useCSSTransition({\n *     timeout: 150,\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       <Typography {...elementProps}>\n *         Some Opacity Changing Text\n *       </Typography>\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Visibility Transition\n * ```tsx\n * import { ReactElement, useState } from \"react\";\n * import { Button } from \"@react-md/button\";\n * import { useCSSTransition } from \"@react-md/transition\";\n * import { Typography } from \"@react-md/typography\";\n *\n * // Pretend styles\n * // .enter {\n * //   opacity: 0;\n * //   transition: opacity .2s;\n * // }\n * //\n * // .enter--active {\n * //   opacity: 1;\n * // }\n * //\n * // .exit {\n * //   opacity: 1;\n * //   transition: opacity .15s;\n * // }\n * //\n * // .exit--active {\n * //   opacity: 0;\n * // }\n *\n * function Example(): ReactElement {\n *   const [transitionIn, setTransitionIn] = useState(false);\n *   const { elementProps, rendered } = useCSSTransition({\n *     timeout: {\n *       enter: 200,\n *       exit: 150,\n *     },\n *     classNames: {\n *       enter: \"enter\",\n *       enterActive: \"enter--active\",\n *       exit: \"exit\",\n *       exitActive: \"exit--active\",\n *     },\n *     transitionIn,\n *     temporary: true,\n *   });\n *\n *   return (\n *     <>\n *       <Button onClick={() => setTransitionIn(!transitionIn)}>\n *         Toggle\n *       </Button>\n *       {rendered && (\n *         <Typography {...elementProps}>\n *           Some Opacity Changing Text\n *         </Typography>\n *       )}\n *     </>\n *   );\n * }\n * ```\n *\n * @example\n * Mount Transition\n * ```tsx\n * import type { ReactElement } from \"react\";\n * import { useCSSTransition } from \"@react-md/transition\";\n *\n * // Pretend styles\n * // .opacity {\n * //   opacity: 0;\n * //   transition: opacity .3s;\n * // }\n * //\n * // .opacity--active {\n * //   opacity: 1;\n * // }\n * //\n *\n * function Example(): ReactElement {\n *   const { elementProps } = useCSSTransition({\n *     appear: true,\n *     transitionIn: true,\n *     timeout: 300,\n *     classNames: \"opacity\",\n *   })\n *\n *   return <div {...elementProps}>Some Content!</div>;\n * }\n * ```\n *\n * @typeParam E - An HTMLElement type used for the ref required for the\n * transition.\n * @remarks \\@since 4.0.0\n */\nexport function useCSSTransition<E extends HTMLElement>({\n  className,\n  classNames,\n  appear = false,\n  enter = true,\n  exit = true,\n  timeout,\n  ...options\n}: CSSTransitionHookOptions<E>): CSSTransitionHookReturnValue<E> {\n  const { ref, stage, rendered, appearing, transitionTo } = useTransition({\n    ...options,\n    appear,\n    enter,\n    exit,\n    timeout,\n    reflow: true,\n  });\n  const isEntering = stage === \"entering\";\n  const isEnter = isEntering || stage === \"enter\";\n  const isEntered = stage === \"entered\";\n  const isExiting = stage === \"exiting\";\n  const isExit = isExiting || stage === \"exit\";\n  const isExited = stage === \"exited\";\n  const transitionClassNames = getTransitionClassNames({\n    timeout,\n    appear,\n    enter,\n    exit,\n    classNames,\n  });\n\n  const elementProps: CSSTransitionElementProps<E> = {\n    ref,\n    className:\n      cn(\n        // always apply the provided className first since it makes snapshot\n        // tests easier to parse if dynamic classes come afterwards\n        className,\n        appearing && isEnter && transitionClassNames.appear,\n        appearing && isEntering && transitionClassNames.appearActive,\n        appearing && isEntered && transitionClassNames.appearDone,\n        !appearing && isEnter && transitionClassNames.enter,\n        !appearing && isEntering && transitionClassNames.enterActive,\n        !appearing && isEntered && transitionClassNames.enterDone,\n        isExit && transitionClassNames.exit,\n        isExiting && transitionClassNames.exitActive,\n        isExited && transitionClassNames.exitDone\n      ) || undefined,\n  };\n\n  return {\n    ...elementProps,\n    stage,\n    rendered,\n    appearing,\n    elementProps,\n    transitionTo,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}