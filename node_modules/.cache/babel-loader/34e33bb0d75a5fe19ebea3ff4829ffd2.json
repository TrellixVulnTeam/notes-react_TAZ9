{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport cn from \"classnames\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-tree-item\");\n/**\n * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to\n * be used within a `TreeView`.\n */\n\nexport function TreeItemExpanderIcon(_a) {\n  var className = _a.className,\n      children = _a.children,\n      _b = _a.rotated,\n      rotated = _b === void 0 ? false : _b,\n      props = __rest(_a, [\"className\", \"children\", \"rotated\"]);\n\n  var icon = useIcon(\"expander\", children);\n  return _jsx(IconRotator, __assign({}, props, {\n    rotated: rotated,\n    className: cn(block(\"rotator-icon\"), className)\n  }, {\n    children: icon\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAOA,EAAP,MAAe,YAAf;AAEA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,gBAArC;AACA,SAASC,GAAT,QAAoB,iBAApB;AAMA,IAAMC,KAAK,GAAGD,GAAG,CAAC,eAAD,CAAjB;AAEA;;;;;AAIA,OAAM,SAAUE,oBAAV,CAA+BC,EAA/B,EAKsB;EAJ1B,aAAS,eAAT;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,eAFA;EAAA,IAEAC,OAAO,mBAAG,KAAH,GAAQD,EAFf;EAAA,IAGGE,KAAK,cAJ2B,oCAI3B,CAHR;;EAKA,IAAMC,IAAI,GAAGT,OAAO,CAAC,UAAD,EAAaK,QAAb,CAApB;EAEA,OACEK,KAACX,WAAD,EAAYY,aACNH,KADM,EACD;IACTD,OAAO,EAAEA,OADA;IAETK,SAAS,EAAEd,EAAE,CAACI,KAAK,CAAC,cAAD,CAAN,EAAwBU,SAAxB;EAFJ,CADC,EAGqC;IAAAP,UAE9CI;EAF8C,CAHrC,CAAZ,CADF;AASD","names":["cn","IconRotator","useIcon","bem","block","TreeItemExpanderIcon","_a","children","_b","rotated","props","icon","_jsx","__assign","className"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tree\\src\\TreeItemExpanderIcon.tsx"],"sourcesContent":["import type { ReactElement, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport type { IconRotatorBaseProps } from \"@react-md/icon\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface TreeItemExpanderIconProps extends IconRotatorBaseProps {\n  children?: ReactNode;\n}\n\nconst block = bem(\"rmd-tree-item\");\n\n/**\n * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to\n * be used within a `TreeView`.\n */\nexport function TreeItemExpanderIcon({\n  className,\n  children,\n  rotated = false,\n  ...props\n}: TreeItemExpanderIconProps): ReactElement {\n  const icon = useIcon(\"expander\", children);\n\n  return (\n    <IconRotator\n      {...props}\n      rotated={rotated}\n      className={cn(block(\"rotator-icon\"), className)}\n    >\n      {icon}\n    </IconRotator>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}