{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-list-subheader\");\n/**\n * This is a simple component that will render a `<li>` with the subheader\n * typography styles. It also supports an `inset` variant that adds some spacing\n * to the left of the text to align with other `ListItem` that have left addons.\n */\n\nexport var ListSubheader = forwardRef(function ListSubheader(_a, ref) {\n  var className = _a.className,\n      _b = _a.inset,\n      inset = _b === void 0 ? false : _b,\n      props = __rest(_a, [\"className\", \"inset\"]);\n\n  return _jsx(\"li\", __assign({}, props, {\n    ref: ref,\n    className: cn(block({\n      inset: inset\n    }), className)\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAT,QAAoB,iBAApB;AAUA,IAAMC,KAAK,GAAGD,GAAG,CAAC,oBAAD,CAAjB;AAEA;;;;;;AAKA,OAAO,IAAME,aAAa,GAAGJ,UAAU,CACrC,SAASI,aAAT,CAAuBC,EAAvB,EAA+DC,GAA/D,EAAkE;EAAzC,aAAS,eAAT;EAAA,IAAWC,aAAX;EAAA,IAAWC,KAAK,mBAAG,KAAH,GAAQD,EAAxB;EAAA,IAA6BE,KAAK,cAApC,sBAAoC,CAAlC;;EACvB,OACEC,wBAAQD,KAAR,EAAa;IAAEH,GAAG,EAAEA,GAAP;IAAYK,SAAS,EAAEV,EAAE,CAACE,KAAK,CAAC;MAAEK,KAAK;IAAP,CAAD,CAAN,EAAmBG,SAAnB;EAAzB,CAAb,EADF;AAGD,CALoC,CAAhC","names":["forwardRef","cn","bem","block","ListSubheader","_a","ref","_b","inset","props","_jsx","className"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\list\\src\\ListSubheader.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface ListSubheaderProps extends HTMLAttributes<HTMLLIElement> {\n  /**\n   * Boolean if the subheader should be inset to match the `ListItem` text\n   * keyline.\n   */\n  inset?: boolean;\n}\n\nconst block = bem(\"rmd-list-subheader\");\n\n/**\n * This is a simple component that will render a `<li>` with the subheader\n * typography styles. It also supports an `inset` variant that adds some spacing\n * to the left of the text to align with other `ListItem` that have left addons.\n */\nexport const ListSubheader = forwardRef<HTMLLIElement, ListSubheaderProps>(\n  function ListSubheader({ className, inset = false, ...props }, ref) {\n    return (\n      <li {...props} ref={ref} className={cn(block({ inset }), className)} />\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}