{"ast":null,"code":"/**\n * Attempts to find a sizing container based on the provided HTMLElement. By\n * default, the sizing element will just be the provided element unless:\n * - the item has a known role within react-md that can target known classes\n * - the item has a `data-sizing-selector` attribute that is a valid query\n *   selector for the nested item.\n *\n * NOTE: The `data-sizing-selector` will be run from the current element instead\n * of the `document`.\n *\n * @param el - The element to find a sizing container for.\n * @returns the sizing container relative to the provided element, or `null` if\n * none could be found.\n * @throws This error will be thrown if using the `data-query-selector` and the\n * query selector does not return an element on the page.\n */\nexport function findSizingContainer(el) {\n  if (!el) {\n    return null;\n  }\n\n  if (/(tree|list)item/.test(el.getAttribute(\"role\") || \"\")) {\n    var content = el.querySelector(\".rmd-tree-item__content, .rmd-item-text\");\n\n    if (content) {\n      return content;\n    }\n  } else if (el.getAttribute(\"type\") === \"file\") {\n    var label = document.querySelector(\"[for=\\\"\".concat(el.id, \"\\\"]\"));\n\n    if (label) {\n      return label;\n    }\n  }\n\n  var data = el.getAttribute(\"data-sizing-selector\");\n\n  if (data) {\n    var content = el.querySelector(data);\n\n    if (content) {\n      return content;\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      throw new Error(\"Unable to find a child element using the `data-sizing-selector`\");\n    }\n  }\n\n  return el;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUA,mBAAV,CACJC,EADI,EACkB;EAEtB,IAAI,CAACA,EAAL,EAAS;IACP,OAAO,IAAP;EACD;;EAED,IAAI,kBAAkBC,IAAlB,CAAuBD,EAAE,CAACE,YAAH,CAAgB,MAAhB,KAA2B,EAAlD,CAAJ,EAA2D;IACzD,IAAMC,OAAO,GAAGH,EAAE,CAACI,aAAH,CACd,yCADc,CAAhB;;IAGA,IAAID,OAAJ,EAAa;MACX,OAAOA,OAAP;IACD;EACF,CAPD,MAOO,IAAIH,EAAE,CAACE,YAAH,CAAgB,MAAhB,MAA4B,MAAhC,EAAwC;IAC7C,IAAMG,KAAK,GAAGC,QAAQ,CAACF,aAAT,CAAyC,iBAASJ,EAAE,CAACO,EAAZ,EAAc,KAAd,CAAzC,CAAd;;IACA,IAAIF,KAAJ,EAAW;MACT,OAAOA,KAAP;IACD;EACF;;EAED,IAAMG,IAAI,GAAGR,EAAE,CAACE,YAAH,CAAgB,sBAAhB,CAAb;;EACA,IAAIM,IAAJ,EAAU;IACR,IAAML,OAAO,GAAGH,EAAE,CAACI,aAAH,CAAiBI,IAAjB,CAAhB;;IACA,IAAIL,OAAJ,EAAa;MACX,OAAOA,OAAP;IACD;;IAED,IAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,MAAM,IAAIC,KAAJ,CACJ,iEADI,CAAN;IAGD;EACF;;EAED,OAAOZ,EAAP;AACD","names":["findSizingContainer","el","test","getAttribute","content","querySelector","label","document","id","data","process","env","NODE_ENV","Error"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\positioning\\findSizingContainer.ts"],"sourcesContent":["/**\n * Attempts to find a sizing container based on the provided HTMLElement. By\n * default, the sizing element will just be the provided element unless:\n * - the item has a known role within react-md that can target known classes\n * - the item has a `data-sizing-selector` attribute that is a valid query\n *   selector for the nested item.\n *\n * NOTE: The `data-sizing-selector` will be run from the current element instead\n * of the `document`.\n *\n * @param el - The element to find a sizing container for.\n * @returns the sizing container relative to the provided element, or `null` if\n * none could be found.\n * @throws This error will be thrown if using the `data-query-selector` and the\n * query selector does not return an element on the page.\n */\nexport function findSizingContainer(\n  el: HTMLElement | null\n): HTMLElement | null {\n  if (!el) {\n    return null;\n  }\n\n  if (/(tree|list)item/.test(el.getAttribute(\"role\") || \"\")) {\n    const content = el.querySelector(\n      \".rmd-tree-item__content, .rmd-item-text\"\n    ) as HTMLElement;\n    if (content) {\n      return content;\n    }\n  } else if (el.getAttribute(\"type\") === \"file\") {\n    const label = document.querySelector<HTMLLabelElement>(`[for=\"${el.id}\"]`);\n    if (label) {\n      return label;\n    }\n  }\n\n  const data = el.getAttribute(\"data-sizing-selector\");\n  if (data) {\n    const content = el.querySelector(data) as HTMLElement;\n    if (content) {\n      return content;\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      throw new Error(\n        \"Unable to find a child element using the `data-sizing-selector`\"\n      );\n    }\n  }\n\n  return el;\n}\n"]},"metadata":{},"sourceType":"module"}