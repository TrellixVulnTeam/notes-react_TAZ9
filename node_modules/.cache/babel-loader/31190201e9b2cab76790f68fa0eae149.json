{"ast":null,"code":"/**\n * Create a new object that does not contain the provided keys.\n *\n * @example\n * Simple Examples\n * ```ts\n * const object = {\n *   a: \"\",\n *   b: 3,\n *   c: false,\n *   4: null,\n * } as const;\n *\n * expect(omit(object, [\"a\"])).toEqual({\n *   b: 3,\n *   c: false,\n *   4: null,\n * });\n * expect(omit(object, [\"a\", \"c\", \"d\"])).toEqual({ b: 3 });\n * ```\n *\n * @internal\n * @param object - The object to remove keys from\n * @param omitKeys - The keys to remove.\n * @returns a new object without the specified keys\n */\nexport function omit(object, omitKeys) {\n  if (!omitKeys.length) {\n    return object;\n  }\n\n  var result = {};\n\n  for (var key in object) {\n    if (!omitKeys.includes(key)) {\n      result[key] = object[key];\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAM,SAAUA,IAAV,CACJC,MADI,EAEJC,QAFI,EAE6B;EAEjC,IAAI,CAACA,QAAQ,CAACC,MAAd,EAAsB;IACpB,OAAOF,MAAP;EACD;;EAED,IAAMG,MAAM,GAA4B,EAAxC;;EACA,KAAK,IAAMC,GAAX,IAAkBJ,MAAlB,EAA0B;IACxB,IAAI,CAACC,QAAQ,CAACI,QAAT,CAAkBD,GAAlB,CAAL,EAA6C;MAC3CD,MAAM,CAACC,GAAD,CAAN,GAAcJ,MAAM,CAACI,GAAD,CAApB;IACD;EACF;;EAED,OAAOD,MAAP;AACD","names":["omit","object","omitKeys","length","result","key","includes"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\omit.ts"],"sourcesContent":["/**\n * Create a new object that does not contain the provided keys.\n *\n * @example\n * Simple Examples\n * ```ts\n * const object = {\n *   a: \"\",\n *   b: 3,\n *   c: false,\n *   4: null,\n * } as const;\n *\n * expect(omit(object, [\"a\"])).toEqual({\n *   b: 3,\n *   c: false,\n *   4: null,\n * });\n * expect(omit(object, [\"a\", \"c\", \"d\"])).toEqual({ b: 3 });\n * ```\n *\n * @internal\n * @param object - The object to remove keys from\n * @param omitKeys - The keys to remove.\n * @returns a new object without the specified keys\n */\nexport function omit<T extends object, K extends keyof T>(\n  object: T,\n  omitKeys: readonly (K | string)[]\n): Omit<T, K> {\n  if (!omitKeys.length) {\n    return object;\n  }\n\n  const result: Record<string, unknown> = {};\n  for (const key in object) {\n    if (!omitKeys.includes(key as unknown as K)) {\n      result[key] = object[key];\n    }\n  }\n\n  return result as Omit<T, K>;\n}\n"]},"metadata":{},"sourceType":"module"}