{"ast":null,"code":"import { createElement } from \"react\";\nimport { TextIconSpacing } from \"@react-md/icon\";\n/**\n * A type guard that simply checks if the option is considered an object of list\n * item props.\n *\n * @param option - The option to check\n * @returns true if the option is considered a object of list item props and\n * will ensure that the option is typed as ListboxOptionProps\n * @internal\n */\n\nexport function isListboxOptionProps(option) {\n  return option !== \"\" && option !== 0 && !!option && typeof option === \"object\";\n}\n/**\n * The default implementation to check if an option is disabled. It will just\n * check if the option is an object and if it has the disabled prop enabled.\n *\n * @param option - The option to check\n * @returns true if the option is disabled\n * @internal\n */\n\nexport function defaultIsOptionDisabled(option) {\n  return isListboxOptionProps(option) && !!option.disabled;\n}\n/**\n * The default way to generate a \"unique\" id for each option within the listbox\n * by concatenating the current index with a base id.\n *\n * Note: The index will be incremented by 1 so the ids start from 1 instead of\n * 0. This is so that it matches how paginated results work with `aria-posinset`\n * + `aria-setsize`.\n *\n * @param baseId - The base id of the listbox.\n * @param index - The current index of the option\n * @returns a \"unique\" id for the option\n */\n\nexport function getOptionId(baseId, index) {\n  return \"\".concat(baseId, \"-option-\").concat(index + 1);\n}\n/**\n * A function that will get the label for an option. The default behavior is to\n * check if the option is an object. If it is, it'll use the `labelKey` property\n * and fallback to the `children` property. If it is anything else, the option\n * itself will be returned.\n *\n * This is used in both the select's button element to show the current value as\n * well as rendering each option within the listbox component.\n *\n * @param option - The option that should be converted into a renderable label\n * element.\n * @param labelKey - The object key to use to extract the label from an option\n * object.\n * @returns a renderable label to display.\n */\n\nexport function getOptionLabel(option, labelKey) {\n  if (isListboxOptionProps(option)) {\n    if (typeof option.children !== \"undefined\") {\n      return option.children;\n    }\n\n    var label = option[labelKey];\n    return typeof label === \"undefined\" ? null : label;\n  }\n\n  return option;\n}\n/**\n * A function that will get the display value for the `Select` field based on\n * the current selected option. The default behavior will be to return null if\n * an option is not currently selected so the placeholder text can be shown\n * instead. If there is an option selected, it will:\n * - get the option's label using the general `getOptionLabel` util\n * - check if includeLeft is enabled and the option is an object with\n *   `leftAddon`\n *   - if there is a `leftAddon`, use the `TextIconSpacing` of\n *     the label + the icon or avatar.\n *\n * @param option - The option to get a display label for\n * @param labelKey - The key to use to extract a label from the option when it\n * is an object\n * @param includeLeft - Boolean if a `leftAddon` should be added with\n * `TextIconSpacing` to the result.\n * @returns A renderable node to display in a `Select` field.\n */\n\nexport function getDisplayLabel(option, labelKey, includeLeft) {\n  if (!option && option !== 0) {\n    return null;\n  }\n\n  var label = getOptionLabel(option, labelKey);\n\n  if (!includeLeft || !isListboxOptionProps(option)) {\n    return label;\n  }\n\n  var leftAddon = option.leftAddon;\n  return createElement(TextIconSpacing, {\n    icon: leftAddon\n  }, label);\n}","map":{"version":3,"mappings":"AACA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AASA;;;;;;;;;;AASA,OAAM,SAAUC,oBAAV,CACJC,MADI,EACiB;EAErB,OACEA,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,CAA5B,IAAiC,CAAC,CAACA,MAAnC,IAA6C,OAAOA,MAAP,KAAkB,QADjE;AAGD;AAED;;;;;;;;;AAQA,OAAM,SAAUC,uBAAV,CAAkCD,MAAlC,EAAuD;EAC3D,OAAOD,oBAAoB,CAACC,MAAD,CAApB,IAAgC,CAAC,CAACA,MAAM,CAACE,QAAhD;AACD;AAED;;;;;;;;;;;;;AAYA,OAAM,SAAUC,WAAV,CAAsBC,MAAtB,EAAsCC,KAAtC,EAAmD;EACvD,OAAO,UAAGD,MAAH,EAAS,UAAT,EAASE,MAAT,CAAoBD,KAAK,GAAG,CAA5B,CAAP;AACD;AAED;;;;;;;;;;;;;;;;AAeA,OAAM,SAAUE,cAAV,CACJP,MADI,EAEJQ,QAFI,EAEY;EAEhB,IAAIT,oBAAoB,CAACC,MAAD,CAAxB,EAAkC;IAChC,IAAI,OAAOA,MAAM,CAACS,QAAd,KAA2B,WAA/B,EAA4C;MAC1C,OAAOT,MAAM,CAACS,QAAd;IACD;;IAED,IAAMC,KAAK,GAAGV,MAAM,CAACQ,QAAD,CAApB;IACA,OAAO,OAAOE,KAAP,KAAiB,WAAjB,GAA+B,IAA/B,GAAsCA,KAA7C;EACD;;EAED,OAAOV,MAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUW,eAAV,CACJX,MADI,EAEJQ,QAFI,EAGJI,WAHI,EAGgB;EAEpB,IAAI,CAACZ,MAAD,IAAWA,MAAM,KAAK,CAA1B,EAA6B;IAC3B,OAAO,IAAP;EACD;;EAED,IAAMU,KAAK,GAAGH,cAAc,CAACP,MAAD,EAASQ,QAAT,CAA5B;;EACA,IAAI,CAACI,WAAD,IAAgB,CAACb,oBAAoB,CAACC,MAAD,CAAzC,EAAmD;IACjD,OAAOU,KAAP;EACD;;EAEO,aAAS,GAAKV,MAAM,UAApB;EAER,OAAOH,aAAa,CAACC,eAAD,EAAkB;IAAEe,IAAI,EAAEC;EAAR,CAAlB,EAAuCJ,KAAvC,CAApB;AACD","names":["createElement","TextIconSpacing","isListboxOptionProps","option","defaultIsOptionDisabled","disabled","getOptionId","baseId","index","concat","getOptionLabel","labelKey","children","label","getDisplayLabel","includeLeft","icon","leftAddon"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\select\\utils.ts"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { createElement } from \"react\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport type { SimpleListItemProps } from \"@react-md/list\";\n\nexport interface ListboxOptionProps extends SimpleListItemProps {\n  [labelKey: string]: ReactNode;\n}\n\nexport type ListboxOption = ListboxOptionProps | string | number | null;\n\n/**\n * A type guard that simply checks if the option is considered an object of list\n * item props.\n *\n * @param option - The option to check\n * @returns true if the option is considered a object of list item props and\n * will ensure that the option is typed as ListboxOptionProps\n * @internal\n */\nexport function isListboxOptionProps(\n  option: ListboxOption\n): option is ListboxOptionProps {\n  return (\n    option !== \"\" && option !== 0 && !!option && typeof option === \"object\"\n  );\n}\n\n/**\n * The default implementation to check if an option is disabled. It will just\n * check if the option is an object and if it has the disabled prop enabled.\n *\n * @param option - The option to check\n * @returns true if the option is disabled\n * @internal\n */\nexport function defaultIsOptionDisabled(option: ListboxOption): boolean {\n  return isListboxOptionProps(option) && !!option.disabled;\n}\n\n/**\n * The default way to generate a \"unique\" id for each option within the listbox\n * by concatenating the current index with a base id.\n *\n * Note: The index will be incremented by 1 so the ids start from 1 instead of\n * 0. This is so that it matches how paginated results work with `aria-posinset`\n * + `aria-setsize`.\n *\n * @param baseId - The base id of the listbox.\n * @param index - The current index of the option\n * @returns a \"unique\" id for the option\n */\nexport function getOptionId(baseId: string, index: number): string {\n  return `${baseId}-option-${index + 1}`;\n}\n\n/**\n * A function that will get the label for an option. The default behavior is to\n * check if the option is an object. If it is, it'll use the `labelKey` property\n * and fallback to the `children` property. If it is anything else, the option\n * itself will be returned.\n *\n * This is used in both the select's button element to show the current value as\n * well as rendering each option within the listbox component.\n *\n * @param option - The option that should be converted into a renderable label\n * element.\n * @param labelKey - The object key to use to extract the label from an option\n * object.\n * @returns a renderable label to display.\n */\nexport function getOptionLabel(\n  option: ListboxOption,\n  labelKey: string\n): ReactNode {\n  if (isListboxOptionProps(option)) {\n    if (typeof option.children !== \"undefined\") {\n      return option.children;\n    }\n\n    const label = option[labelKey];\n    return typeof label === \"undefined\" ? null : label;\n  }\n\n  return option;\n}\n\n/**\n * A function that will get the display value for the `Select` field based on\n * the current selected option. The default behavior will be to return null if\n * an option is not currently selected so the placeholder text can be shown\n * instead. If there is an option selected, it will:\n * - get the option's label using the general `getOptionLabel` util\n * - check if includeLeft is enabled and the option is an object with\n *   `leftAddon`\n *   - if there is a `leftAddon`, use the `TextIconSpacing` of\n *     the label + the icon or avatar.\n *\n * @param option - The option to get a display label for\n * @param labelKey - The key to use to extract a label from the option when it\n * is an object\n * @param includeLeft - Boolean if a `leftAddon` should be added with\n * `TextIconSpacing` to the result.\n * @returns A renderable node to display in a `Select` field.\n */\nexport function getDisplayLabel(\n  option: ListboxOption,\n  labelKey: string,\n  includeLeft: boolean\n): ReactNode {\n  if (!option && option !== 0) {\n    return null;\n  }\n\n  const label = getOptionLabel(option, labelKey);\n  if (!includeLeft || !isListboxOptionProps(option)) {\n    return label;\n  }\n\n  const { leftAddon } = option;\n\n  return createElement(TextIconSpacing, { icon: leftAddon }, label);\n}\n"]},"metadata":{},"sourceType":"module"}