{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-chip\");\n/**\n * A chip is a simplified and condensed button component that be used to create\n * compact radio groups, checkboxes, and trigger actions. The chip only has a\n * `\"solid\"` and `\"outline\"` theme but can be raisable once clicked or\n * selectable with an inline icon. A chip also supports rendering icons, avatars,\n * or circular progress bars to the left and right of the children.\n */\n\nexport var Chip = forwardRef(function Chip(_a, ref) {\n  var _b;\n\n  var ariaPressed = _a[\"aria-pressed\"],\n      propClassName = _a.className,\n      children = _a.children,\n      _c = _a.theme,\n      theme = _c === void 0 ? \"solid\" : _c,\n      propLeftIcon = _a.leftIcon,\n      rightIcon = _a.rightIcon,\n      _d = _a.raisable,\n      raisable = _d === void 0 ? false : _d,\n      _e = _a.disabled,\n      disabled = _e === void 0 ? false : _e,\n      selected = _a.selected,\n      _f = _a.selectedThemed,\n      selectedThemed = _f === void 0 ? false : _f,\n      contentStyle = _a.contentStyle,\n      contentClassName = _a.contentClassName,\n      _g = _a.disableContentWrap,\n      disableContentWrap = _g === void 0 ? false : _g,\n      propSelectedIcon = _a.selectedIcon,\n      _h = _a.noninteractable,\n      noninteractable = _h === void 0 ? false : _h,\n      _j = _a.disableIconTransition,\n      disableIconTransition = _j === void 0 ? false : _j,\n      props = __rest(_a, [\"aria-pressed\", \"className\", \"children\", \"theme\", \"leftIcon\", \"rightIcon\", \"raisable\", \"disabled\", \"selected\", \"selectedThemed\", \"contentStyle\", \"contentClassName\", \"disableContentWrap\", \"selectedIcon\", \"noninteractable\", \"disableIconTransition\"]);\n\n  var _k = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled: disabled || noninteractable,\n    enablePressedAndRipple: raisable && !noninteractable\n  }),\n      ripples = _k.ripples,\n      className = _k.className,\n      handlers = _k.handlers;\n\n  var content = children;\n\n  if (!disableContentWrap) {\n    content = _jsx(\"span\", __assign({\n      style: contentStyle,\n      className: cn(block(\"content\"), contentClassName)\n    }, {\n      children: children\n    }));\n  }\n\n  var leftIcon = propLeftIcon;\n  var selectable = typeof selected === \"boolean\";\n  var selectedIcon = useIcon(\"selected\", propSelectedIcon);\n  var isHiddenIcon = false;\n\n  if (selectable && !selectedThemed && typeof leftIcon === \"undefined\" && selectedIcon) {\n    leftIcon = selectedIcon;\n\n    if (!disableIconTransition && isValidElement(selectedIcon)) {\n      isHiddenIcon = !selected;\n      leftIcon = cloneElement(selectedIcon, {\n        className: block(\"selected-icon\", {\n          visible: selected\n        })\n      });\n    } else if (disableIconTransition && !selected) {\n      // don't want to render it when not selected if there's no transition\n      leftIcon = null;\n    }\n  }\n\n  var leading = leftIcon && !isHiddenIcon;\n  var trailing = rightIcon;\n  var Component = noninteractable ? \"span\" : \"button\";\n  var buttonProps = {\n    \"aria-pressed\": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : !!selected || undefined,\n    type: \"button\",\n    disabled: disabled\n  };\n  return _jsxs(Component, __assign({}, noninteractable ? {} : buttonProps, props, handlers, {\n    ref: ref,\n    className: cn(block((_b = {}, _b[theme] = true, _b.disabled = disabled, _b.selected = !disabled && selected && !selectedThemed, _b.themed = !disabled && selected && selectedThemed, _b[\"solid-disabled\"] = disabled && theme === \"solid\", _b[\"leading-icon\"] = leading && !trailing, _b[\"trailing-icon\"] = trailing && !leading, _b.surrounded = leading && trailing, _b.noninteractable = noninteractable, _b)), className)\n  }, {\n    children: [_jsx(TextIconSpacing, __assign({\n      icon: leftIcon,\n      beforeClassName: isHiddenIcon ? \"\" : undefined\n    }, {\n      children: _jsx(TextIconSpacing, __assign({\n        icon: rightIcon,\n        iconAfter: true\n      }, {\n        children: content\n      }))\n    })), ripples]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,cAAnC,QAAyD,OAAzD;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,gBAAzC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,GAAT,QAAoB,iBAApB;AAuGA,IAAMC,KAAK,GAAGD,GAAG,CAAC,UAAD,CAAjB;AAEA;;;;;;;;AAOA,OAAO,IAAME,IAAI,GAAGR,UAAU,CAA+B,SAASQ,IAAT,CAC3DC,EAD2D,EAoB3DC,GApB2D,EAoBxD;;;EAlBD,IAAgBC,WAAW,qBAA3B;EAAA,IACWC,aAAa,eADxB;EAAA,IAEAC,QAAQ,cAFR;EAAA,IAGAC,aAHA;EAAA,IAGAC,KAAK,mBAAG,OAAH,GAAUD,EAHf;EAAA,IAIUE,YAAY,cAJtB;EAAA,IAKAC,SAAS,eALT;EAAA,IAMAC,gBANA;EAAA,IAMAC,QAAQ,mBAAG,KAAH,GAAQD,EANhB;EAAA,IAOAE,gBAPA;EAAA,IAOAC,QAAQ,mBAAG,KAAH,GAAQD,EAPhB;EAAA,IAQAE,QAAQ,cARR;EAAA,IASAC,sBATA;EAAA,IASAC,cAAc,mBAAG,KAAH,GAAQD,EATtB;EAAA,IAUAE,YAAY,kBAVZ;EAAA,IAWAC,gBAAgB,sBAXhB;EAAA,IAYAC,0BAZA;EAAA,IAYAC,kBAAkB,mBAAG,KAAH,GAAQD,EAZ1B;EAAA,IAacE,gBAAgB,kBAb9B;EAAA,IAcAC,uBAdA;EAAA,IAcAC,eAAe,mBAAG,KAAH,GAAQD,EAdvB;EAAA,IAeAE,6BAfA;EAAA,IAeAC,qBAAqB,mBAAG,KAAH,GAAQD,EAf7B;EAAA,IAgBGE,KAAK,cAjBV,uPAiBU,CAhBR;;EAoBI,SAAmC7B,oBAAoB,CAAC;IAC5D8B,QAAQ,EAAED,KADkD;IAE5DE,SAAS,EAAExB,aAFiD;IAG5DS,QAAQ,EAAEA,QAAQ,IAAIU,eAHsC;IAI5DM,sBAAsB,EAAElB,QAAQ,IAAI,CAACY;EAJuB,CAAD,CAAvD;EAAA,IAAEO,OAAO,aAAT;EAAA,IAAWF,SAAS,eAApB;EAAA,IAAsBD,QAAQ,cAA9B;;EAON,IAAII,OAAO,GAAG1B,QAAd;;EACA,IAAI,CAACe,kBAAL,EAAyB;IACvBW,OAAO,GACLC;MACEC,KAAK,EAAEhB,YADT;MAEEW,SAAS,EAAElC,EAAE,CAACK,KAAK,CAAC,SAAD,CAAN,EAAmBmB,gBAAnB;IAFf,GAEmD;MAAAb,UAEhDA;IAFgD,CAFnD,EADF;EAQD;;EAED,IAAI6B,QAAQ,GAAG1B,YAAf;EACA,IAAM2B,UAAU,GAAG,OAAOrB,QAAP,KAAoB,SAAvC;EACA,IAAMsB,YAAY,GAAGxC,OAAO,CAAC,UAAD,EAAayB,gBAAb,CAA5B;EACA,IAAIgB,YAAY,GAAG,KAAnB;;EACA,IACEF,UAAU,IACV,CAACnB,cADD,IAEA,OAAOkB,QAAP,KAAoB,WAFpB,IAGAE,YAJF,EAKE;IACAF,QAAQ,GAAGE,YAAX;;IAEA,IAAI,CAACX,qBAAD,IAA0BhC,cAAc,CAAC2C,YAAD,CAA5C,EAA4D;MAC1DC,YAAY,GAAG,CAACvB,QAAhB;MACAoB,QAAQ,GAAG3C,YAAY,CAAC6C,YAAD,EAAe;QACpCR,SAAS,EAAE7B,KAAK,CAAC,eAAD,EAAkB;UAAEuC,OAAO,EAAExB;QAAX,CAAlB;MADoB,CAAf,CAAvB;IAGD,CALD,MAKO,IAAIW,qBAAqB,IAAI,CAACX,QAA9B,EAAwC;MAC7C;MACAoB,QAAQ,GAAG,IAAX;IACD;EACF;;EAED,IAAMK,OAAO,GAAGL,QAAQ,IAAI,CAACG,YAA7B;EACA,IAAMG,QAAQ,GAAG/B,SAAjB;EACA,IAAMgC,SAAS,GAAGlB,eAAe,GAAG,MAAH,GAAY,QAA7C;EACA,IAAMmB,WAAW,GAAG;IAClB,gBAAgBvC,WAAW,SAAX,eAAW,WAAX,iBAAgB,CAAC,CAACW,QAAF,IAAc6B,SAD5B;IAElBC,IAAI,EAAE,QAFY;IAGlB/B,QAAQ;EAHU,CAApB;EAMA,OACEgC,MAACJ,SAAD,EAAUK,aACHvB,eAAe,GAAG,EAAH,GAAQmB,WADpB,EAEJhB,KAFI,EAGJC,QAHI,EAGI;IACZzB,GAAG,EAAEA,GADO;IAEZ0B,SAAS,EAAElC,EAAE,CACXK,KAAK,WACHgD,GAACxC,KAAD,IAAS,IADN,EAEHwC,cAAQlC,QAFL,EAGHkC,cAAU,CAAClC,QAAD,IAAaC,QAAb,IAAyB,CAACE,cAHjC,EAIH+B,YAAQ,CAAClC,QAAD,IAAaC,QAAb,IAAyBE,cAJ9B,EAKH+B,uBAAkBlC,QAAQ,IAAIN,KAAK,KAAK,OALrC,EAMHwC,qBAAgBR,OAAO,IAAI,CAACC,QANzB,EAOHO,sBAAiBP,QAAQ,IAAI,CAACD,OAP3B,EAQHQ,gBAAYR,OAAO,IAAIC,QARpB,EASHO,qBAAexB,eATZ,MADM,EAYXK,SAZW;EAFD,CAHJ,EAkBP;IAAAvB,WAED2B,KAACrC,eAAD,EAAgBmD;MACdE,IAAI,EAAEd,QADQ;MAEde,eAAe,EAAEZ,YAAY,GAAG,EAAH,GAAQM;IAFvB,GAEgC;MAAAtC,UAE9C2B,KAACrC,eAAD,EAAgBmD;QAACE,IAAI,EAAEvC,SAAP;QAAkByC,SAAS;MAA3B,GAA2B;QAAA7C,UACxC0B;MADwC,CAA3B,CAAhB;IAF8C,CAFhC,CAAhB,CAFC,EAUAD,OAVA;EAAA,CAlBO,CAAV,CADF;AAgCD,CAzG6B,CAAvB","names":["cloneElement","forwardRef","isValidElement","cn","TextIconSpacing","useIcon","useInteractionStates","bem","block","Chip","_a","ref","ariaPressed","propClassName","children","_c","theme","propLeftIcon","rightIcon","_d","raisable","_e","disabled","selected","_f","selectedThemed","contentStyle","contentClassName","_g","disableContentWrap","propSelectedIcon","_h","noninteractable","_j","disableIconTransition","props","handlers","className","enablePressedAndRipple","ripples","content","_jsx","style","leftIcon","selectable","selectedIcon","isHiddenIcon","visible","leading","trailing","Component","buttonProps","undefined","type","_jsxs","__assign","_b","icon","beforeClassName","iconAfter"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\chip\\src\\Chip.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes, CSSProperties, ReactNode } from \"react\";\nimport { cloneElement, forwardRef, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\n\ntype ButtonAttributes = Omit<ButtonHTMLAttributes<HTMLButtonElement>, \"type\">;\n\nexport interface ChipProps extends ButtonAttributes {\n  /**\n   * The theme for the button.\n   */\n  theme?: \"outline\" | \"solid\";\n\n  /**\n   * An optional icon to place to the left of the children. There will\n   * automatically be some margin placed between this icon and the children if\n   * defined.\n   */\n  leftIcon?: ReactNode;\n\n  /**\n   * An optional icon to place to the right of the children. There will\n   * automatically be some margin placed between this icon and the children if\n   * defined.\n   */\n  rightIcon?: ReactNode;\n\n  /**\n   * Boolean if the chip should gain elevation while the user is pressing the\n   * chip with mouse, touch, or keyboard click.\n   */\n  raisable?: boolean;\n\n  /**\n   * An optional style to provide to the `<span>` that surrounds the `children`\n   * of the chip.\n   *\n   * This prop will do nothing if the `disableContentWrap` prop is enabled.\n   */\n  contentStyle?: CSSProperties;\n\n  /**\n   * An optional className to provide to the `<span>` that surrounds the\n   * `children` of the chip.\n   *\n   * This prop will do nothing if the `disableContentWrap` prop is enabled.\n   */\n  contentClassName?: string;\n\n  /**\n   * Boolean if the children should no longer be wrapped in a `<span>` that adds\n   * some default styles to ellipsis and truncate the children based on the\n   * chip's width.\n   */\n  disableContentWrap?: boolean;\n\n  /**\n   * Boolean if the chip is selected or deselected which is `undefined` by\n   * default. Setting this prop to a boolean updates the chip to render a\n   * selected icon to the left of the content as well as adding a darker\n   * background when set to `true`. The icon will only appear once the state is\n   * `true` and will transition in and out when swapped between `true` and\n   * `false`.\n   *\n   * @remarks\n   *\n   * See the `disableIconTransition` and `selectedIcon` props for more details\n   * about the icon behavior\n   */\n  selected?: boolean;\n\n  /**\n   * Boolean if the selection state should use a swatch of the primary color\n   * instead of rendering a check icon and the normal background color changes.\n   */\n  selectedThemed?: boolean;\n\n  /**\n   * The icon to use as the `leftIcon` when the `selected` prop is a boolean.\n   * When this is omitted, it will inherit the `selected` icon from the main\n   * `Configuration` / `IconProvider`.\n   *\n   * If this is set to `null`, no icon will be rendered when the `selected` is set\n   * to `\"selected\"` or `\"unselected\"`.\n   *\n   * If the `leftIcon` prop is not `undefined`, the `leftIcon` prop will always\n   * be used instead of this prop.\n   */\n  selectedIcon?: ReactNode;\n\n  /**\n   * Boolean if the selected icon should not animate when the `selected` is a\n   * boolean. This transition is just a simple \"appear\" transition with the\n   * `max-width` of the icon.\n   */\n  disableIconTransition?: boolean;\n\n  /**\n   * Boolean if the chip should render as a non-interactable element (`<span>`)\n   * instead of a button. This can be used to just apply the chip styles.\n   *\n   * @remarks \\@since 2.6.0\n   */\n  noninteractable?: boolean;\n}\n\nconst block = bem(\"rmd-chip\");\n\n/**\n * A chip is a simplified and condensed button component that be used to create\n * compact radio groups, checkboxes, and trigger actions. The chip only has a\n * `\"solid\"` and `\"outline\"` theme but can be raisable once clicked or\n * selectable with an inline icon. A chip also supports rendering icons, avatars,\n * or circular progress bars to the left and right of the children.\n */\nexport const Chip = forwardRef<HTMLButtonElement, ChipProps>(function Chip(\n  {\n    \"aria-pressed\": ariaPressed,\n    className: propClassName,\n    children,\n    theme = \"solid\",\n    leftIcon: propLeftIcon,\n    rightIcon,\n    raisable = false,\n    disabled = false,\n    selected,\n    selectedThemed = false,\n    contentStyle,\n    contentClassName,\n    disableContentWrap = false,\n    selectedIcon: propSelectedIcon,\n    noninteractable = false,\n    disableIconTransition = false,\n    ...props\n  },\n  ref\n) {\n  const { ripples, className, handlers } = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled: disabled || noninteractable,\n    enablePressedAndRipple: raisable && !noninteractable,\n  });\n\n  let content = children;\n  if (!disableContentWrap) {\n    content = (\n      <span\n        style={contentStyle}\n        className={cn(block(\"content\"), contentClassName)}\n      >\n        {children}\n      </span>\n    );\n  }\n\n  let leftIcon = propLeftIcon;\n  const selectable = typeof selected === \"boolean\";\n  const selectedIcon = useIcon(\"selected\", propSelectedIcon);\n  let isHiddenIcon = false;\n  if (\n    selectable &&\n    !selectedThemed &&\n    typeof leftIcon === \"undefined\" &&\n    selectedIcon\n  ) {\n    leftIcon = selectedIcon;\n\n    if (!disableIconTransition && isValidElement(selectedIcon)) {\n      isHiddenIcon = !selected;\n      leftIcon = cloneElement(selectedIcon, {\n        className: block(\"selected-icon\", { visible: selected }),\n      });\n    } else if (disableIconTransition && !selected) {\n      // don't want to render it when not selected if there's no transition\n      leftIcon = null;\n    }\n  }\n\n  const leading = leftIcon && !isHiddenIcon;\n  const trailing = rightIcon;\n  const Component = noninteractable ? \"span\" : \"button\";\n  const buttonProps = {\n    \"aria-pressed\": ariaPressed ?? (!!selected || undefined),\n    type: \"button\",\n    disabled,\n  } as const;\n\n  return (\n    <Component\n      {...(noninteractable ? {} : buttonProps)}\n      {...props}\n      {...handlers}\n      ref={ref}\n      className={cn(\n        block({\n          [theme]: true,\n          disabled,\n          selected: !disabled && selected && !selectedThemed,\n          themed: !disabled && selected && selectedThemed,\n          \"solid-disabled\": disabled && theme === \"solid\",\n          \"leading-icon\": leading && !trailing,\n          \"trailing-icon\": trailing && !leading,\n          surrounded: leading && trailing,\n          noninteractable,\n        }),\n        className\n      )}\n    >\n      <TextIconSpacing\n        icon={leftIcon}\n        beforeClassName={isHiddenIcon ? \"\" : undefined}\n      >\n        <TextIconSpacing icon={rightIcon} iconAfter>\n          {content}\n        </TextIconSpacing>\n      </TextIconSpacing>\n      {ripples}\n    </Component>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}