{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { useIcon } from \"@react-md/icon\";\nimport { Badge } from \"./Badge\";\nimport { isEmpty } from \"./isEmpty\";\n/**\n * This is a small wrapper for the `Button` component that will automatically\n * apply the `aria-describedby` attribute when it has been \"badged\". It also\n * adds some reasonable defaults for the most common use-case for badges:\n * notifications.\n */\n\nexport var BadgedButton = forwardRef(function BadgedButton(_a, ref) {\n  var _b = _a[\"aria-label\"],\n      ariaLabel = _b === void 0 ? \"Notifications\" : _b,\n      badgeStyle = _a.badgeStyle,\n      badgeClassName = _a.badgeClassName,\n      badgeRef = _a.badgeRef,\n      propBadgeId = _a.badgeId,\n      propButtonChildren = _a.buttonChildren,\n      _c = _a.buttonType,\n      buttonType = _c === void 0 ? \"icon\" : _c,\n      badgeTheme = _a.badgeTheme,\n      _d = _a.children,\n      children = _d === void 0 ? null : _d,\n      _e = _a.disableNullOnZero,\n      disableNullOnZero = _e === void 0 ? false : _e,\n      propDescribedBy = _a[\"aria-describedby\"],\n      props = __rest(_a, [\"aria-label\", \"badgeStyle\", \"badgeClassName\", \"badgeRef\", \"badgeId\", \"buttonChildren\", \"buttonType\", \"badgeTheme\", \"children\", \"disableNullOnZero\", \"aria-describedby\"]);\n\n  var id = props.id;\n  var buttonChildren = useIcon(\"notification\", propButtonChildren);\n  var badgeId = propBadgeId || \"\";\n\n  if (!badgeId && id) {\n    badgeId = \"\".concat(id, \"-badge\");\n  }\n\n  var describedBy = propDescribedBy;\n\n  if (!isEmpty(children, disableNullOnZero)) {\n    describedBy = cn(describedBy, badgeId);\n  }\n\n  return _jsxs(Button, __assign({}, props, {\n    \"aria-label\": ariaLabel,\n    \"aria-describedby\": describedBy,\n    ref: ref,\n    buttonType: buttonType\n  }, {\n    children: [buttonChildren, _jsx(Badge, __assign({\n      id: badgeId,\n      ref: badgeRef,\n      theme: badgeTheme,\n      style: badgeStyle,\n      className: badgeClassName,\n      disableNullOnZero: disableNullOnZero\n    }, {\n      children: children\n    }))]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAGA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAiDA;;;;;;;AAMA,OAAO,IAAMC,YAAY,GAAGN,UAAU,CACpC,SAASM,YAAT,CACEC,EADF,EAeEC,GAfF,EAeK;EAbD;EAAA,IAAcC,SAAS,mBAAG,eAAH,GAAkBC,EAAzC;EAAA,IACAC,UAAU,gBADV;EAAA,IAEAC,cAAc,oBAFd;EAAA,IAGAC,QAAQ,cAHR;EAAA,IAISC,WAAW,aAJpB;EAAA,IAKgBC,kBAAkB,oBALlC;EAAA,IAMAC,kBANA;EAAA,IAMAC,UAAU,mBAAG,MAAH,GAASD,EANnB;EAAA,IAOAE,UAAU,gBAPV;EAAA,IAQAC,gBARA;EAAA,IAQAC,QAAQ,mBAAG,IAAH,GAAOD,EARf;EAAA,IASAE,yBATA;EAAA,IASAC,iBAAiB,mBAAG,KAAH,GAAQD,EATzB;EAAA,IAUoBE,eAAe,yBAVnC;EAAA,IAWGC,KAAK,cAZV,wKAYU,CAXR;;EAeM,MAAE,GAAKA,KAAK,GAAZ;EACR,IAAMC,cAAc,GAAGtB,OAAO,CAAC,cAAD,EAAiBY,kBAAjB,CAA9B;EAEA,IAAIW,OAAO,GAAGZ,WAAW,IAAI,EAA7B;;EACA,IAAI,CAACY,OAAD,IAAYC,EAAhB,EAAoB;IAClBD,OAAO,GAAG,UAAGC,EAAH,EAAK,QAAL,CAAV;EACD;;EAED,IAAIC,WAAW,GAAGL,eAAlB;;EACA,IAAI,CAAClB,OAAO,CAACe,QAAD,EAAWE,iBAAX,CAAZ,EAA2C;IACzCM,WAAW,GAAG3B,EAAE,CAAC2B,WAAD,EAAcF,OAAd,CAAhB;EACD;;EAED,OACEG,MAAC3B,MAAD,EAAO4B,aACDN,KADC,EACI;IAAA,cACGf,SADH;IACY,oBACHmB,WAFT;IAGTpB,GAAG,EAAEA,GAHI;IAITS,UAAU,EAAEA;EAJH,CADJ,EAKiB;IAAAG,WAErBK,cAFqB,EAGtBM,KAAC3B,KAAD,EAAM0B;MACJH,EAAE,EAAED,OADA;MAEJlB,GAAG,EAAEK,QAFD;MAGJmB,KAAK,EAAEd,UAHH;MAIJe,KAAK,EAAEtB,UAJH;MAKJuB,SAAS,EAAEtB,cALP;MAMJU,iBAAiB,EAAEA;IANf,GAMgC;MAAAF,UAEnCA;IAFmC,CANhC,CAAN,CAHsB;EAAA,CALjB,CAAP,CADF;AAqBD,CApDmC,CAA/B","names":["forwardRef","cn","Button","useIcon","Badge","isEmpty","BadgedButton","_a","ref","ariaLabel","_b","badgeStyle","badgeClassName","badgeRef","propBadgeId","propButtonChildren","_c","buttonType","badgeTheme","_d","children","_e","disableNullOnZero","propDescribedBy","props","buttonChildren","badgeId","id","describedBy","_jsxs","__assign","_jsx","theme","style","className"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\badge\\src\\BadgedButton.tsx"],"sourcesContent":["import type { CSSProperties, ReactNode, Ref } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport type { ButtonProps } from \"@react-md/button\";\nimport { Button } from \"@react-md/button\";\nimport { useIcon } from \"@react-md/icon\";\n\nimport type { BadgeProps, BadgeTheme } from \"./Badge\";\nimport { Badge } from \"./Badge\";\nimport { isEmpty } from \"./isEmpty\";\n\nexport interface BadgedButtonProps\n  extends ButtonProps,\n    Pick<BadgeProps, \"disableNullOnZero\"> {\n  /**\n   * An id to use for the button. Either this prop or the `badgeId` are required\n   * for a11y when the `badgeChildren` is provided. If the `badgeId` is omitted,\n   * the badge's id will be set to `${id}-badge`\n   */\n  id?: string;\n\n  /**\n   * An optional id for the badge. Either this prop or the `id` prop is required\n   * for a11y when the `badgeChildren` is provided to create the\n   * `aria-describedby` value on the button.\n   */\n  badgeId?: string;\n\n  /**\n   * An optional ref for the badge. The main `ref` will be forwarded to the\n   * `button` element.\n   */\n  badgeRef?: Ref<HTMLSpanElement>;\n\n  /**\n   * The theme to use for the badge.\n   */\n  badgeTheme?: BadgeTheme;\n\n  /**\n   * An optional style to apply to the badge since the `style` prop is passed\n   * down to the `Button` component instead.\n   */\n  badgeStyle?: CSSProperties;\n\n  /**\n   * An optional className to apply to the badge since the `className` prop is\n   * passed down to the `Button` component instead.\n   */\n  badgeClassName?: string;\n\n  /**\n   * The content to display within the button since the `children` prop is\n   * passed down to the `Badge` component instead.\n   */\n  buttonChildren?: ReactNode;\n}\n\n/**\n * This is a small wrapper for the `Button` component that will automatically\n * apply the `aria-describedby` attribute when it has been \"badged\". It also\n * adds some reasonable defaults for the most common use-case for badges:\n * notifications.\n */\nexport const BadgedButton = forwardRef<HTMLButtonElement, BadgedButtonProps>(\n  function BadgedButton(\n    {\n      \"aria-label\": ariaLabel = \"Notifications\",\n      badgeStyle,\n      badgeClassName,\n      badgeRef,\n      badgeId: propBadgeId,\n      buttonChildren: propButtonChildren,\n      buttonType = \"icon\",\n      badgeTheme,\n      children = null,\n      disableNullOnZero = false,\n      \"aria-describedby\": propDescribedBy,\n      ...props\n    },\n    ref\n  ) {\n    const { id } = props;\n    const buttonChildren = useIcon(\"notification\", propButtonChildren);\n\n    let badgeId = propBadgeId || \"\";\n    if (!badgeId && id) {\n      badgeId = `${id}-badge`;\n    }\n\n    let describedBy = propDescribedBy;\n    if (!isEmpty(children, disableNullOnZero)) {\n      describedBy = cn(describedBy, badgeId);\n    }\n\n    return (\n      <Button\n        {...props}\n        aria-label={ariaLabel}\n        aria-describedby={describedBy}\n        ref={ref}\n        buttonType={buttonType}\n      >\n        {buttonChildren}\n        <Badge\n          id={badgeId}\n          ref={badgeRef}\n          theme={badgeTheme}\n          style={badgeStyle}\n          className={badgeClassName}\n          disableNullOnZero={disableNullOnZero}\n        >\n          {children}\n        </Badge>\n      </Button>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}