{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport cn from \"classnames\";\nimport { Divider } from \"@react-md/divider\";\nimport { TreeItem } from \"@react-md/tree\";\nimport { SrOnly } from \"@react-md/typography\";\n/**\n * This is the default mini navigation item renderer provided by the layout\n * package that has some reasonable defaults for creating a navigation tree.\n *\n * This renderer behaves a bit differently than the\n * `defaultNavigationItemRenderer` since it will only render the tree item if:\n *\n * - the item is at the root -- `parentId === null`\n * - the item is a divider at the root\n * - the item is not a subheader -- there isn't enough space\n * - the item does not have any child items -- not enough space to show nesting\n * - the item has a `leftAddon` -- the mini variant only renders icons\n *\n * This rendered `TreeItem` will only display the `leftAddon` as the children\n * but will also render the tree item's label in the `SrOnly` component so an\n * accessible label still exists for the icon `TreeItem`.\n *\n * @see {@link TreeItemRenderer}\n * @see {@link defaultNavigationItemRenderer}\n */\n\nexport var defaultMiniNavigationItemRenderer = function (itemProps, item, _a) {\n  var _b, _c, _d, _e;\n\n  var linkComponent = _a.linkComponent,\n      getItemProps = _a.getItemProps,\n      getItemLabel = _a.getItemLabel,\n      labelKey = _a.labelKey;\n\n  var key = itemProps.key,\n      renderChildItems = itemProps.renderChildItems,\n      props = __rest(itemProps, [\"key\", \"renderChildItems\"]);\n\n  var divider = item.divider,\n      subheader = item.subheader,\n      leftAddon = item.leftAddon,\n      parentId = item.parentId,\n      style = item.style,\n      className = item.className,\n      liStyle = item.liStyle,\n      liClassName = item.liClassName,\n      as = item.as,\n      to = item.to,\n      href = item.href,\n      isLink = item.isLink,\n      propContentComponent = item.contentComponent;\n\n  if (divider && parentId === null) {\n    return _jsx(Divider, {}, key);\n  }\n\n  if (subheader || parentId !== null || !leftAddon || renderChildItems) {\n    return null;\n  }\n\n  var contentComponent = propContentComponent;\n\n  if (!contentComponent && isLink !== false && (to || href || isLink)) {\n    contentComponent = linkComponent;\n  }\n\n  var focused = itemProps.focused,\n      selected = itemProps.selected,\n      expanded = itemProps.expanded;\n  var overrides = getItemProps(__assign(__assign({}, item), {\n    focused: focused,\n    selected: selected,\n    expanded: expanded\n  }));\n  var children = overrides && overrides.children || undefined;\n\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(item, labelKey);\n  }\n\n  return _jsxs(TreeItem, __assign({}, props, {\n    as: as,\n    to: to,\n    href: href,\n    isLink: isLink,\n    contentComponent: contentComponent,\n    style: (_b = overrides === null || overrides === void 0 ? void 0 : overrides.style) !== null && _b !== void 0 ? _b : style,\n    className: cn(\"rmd-layout-nav__mini-item\", (_c = overrides === null || overrides === void 0 ? void 0 : overrides.className) !== null && _c !== void 0 ? _c : className),\n    liStyle: (_d = overrides === null || overrides === void 0 ? void 0 : overrides.liStyle) !== null && _d !== void 0 ? _d : liStyle,\n    liClassName: (_e = overrides === null || overrides === void 0 ? void 0 : overrides.liClassName) !== null && _e !== void 0 ? _e : liClassName,\n    textChildren: false\n  }, {\n    children: [leftAddon, _jsx(SrOnly, {\n      children: children\n    })]\n  }), key);\n};","map":{"version":3,"mappings":"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","names":["cn","Divider","TreeItem","SrOnly","defaultMiniNavigationItemRenderer","itemProps","item","_a","linkComponent","getItemProps","getItemLabel","labelKey","renderChildItems","props","subheader","leftAddon","parentId","style","className","liStyle","liClassName","as","to","href","isLink","propContentComponent","divider","_jsx","key","contentComponent","selected","expanded","overrides","focused","children","undefined","_jsxs","__assign","_b","_c","_d","_e","textChildren"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\layout\\src\\defaultMiniNavigationItemRenderer.tsx"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { Divider } from \"@react-md/divider\";\nimport type { TreeItemRenderer } from \"@react-md/tree\";\nimport { TreeItem } from \"@react-md/tree\";\nimport { SrOnly } from \"@react-md/typography\";\n\nimport type { LayoutNavigationItem } from \"./types\";\n\n/**\n * This is the default mini navigation item renderer provided by the layout\n * package that has some reasonable defaults for creating a navigation tree.\n *\n * This renderer behaves a bit differently than the\n * `defaultNavigationItemRenderer` since it will only render the tree item if:\n *\n * - the item is at the root -- `parentId === null`\n * - the item is a divider at the root\n * - the item is not a subheader -- there isn't enough space\n * - the item does not have any child items -- not enough space to show nesting\n * - the item has a `leftAddon` -- the mini variant only renders icons\n *\n * This rendered `TreeItem` will only display the `leftAddon` as the children\n * but will also render the tree item's label in the `SrOnly` component so an\n * accessible label still exists for the icon `TreeItem`.\n *\n * @see {@link TreeItemRenderer}\n * @see {@link defaultNavigationItemRenderer}\n */\nexport const defaultMiniNavigationItemRenderer: TreeItemRenderer<\n  LayoutNavigationItem\n> = (\n  itemProps,\n  item,\n  { linkComponent, getItemProps, getItemLabel, labelKey }\n) => {\n  const { key, renderChildItems, ...props } = itemProps;\n  const {\n    divider,\n    subheader,\n    leftAddon,\n    parentId,\n    style,\n    className,\n    liStyle,\n    liClassName,\n    as,\n    to,\n    href,\n    isLink,\n    contentComponent: propContentComponent,\n  } = item;\n\n  if (divider && parentId === null) {\n    return <Divider key={key} />;\n  }\n\n  if (subheader || parentId !== null || !leftAddon || renderChildItems) {\n    return null;\n  }\n\n  let contentComponent = propContentComponent;\n  if (!contentComponent && isLink !== false && (to || href || isLink)) {\n    contentComponent = linkComponent;\n  }\n\n  const { focused, selected, expanded } = itemProps;\n  const overrides = getItemProps({\n    ...item,\n    focused,\n    selected,\n    expanded,\n  });\n  let children: ReactNode = (overrides && overrides.children) || undefined;\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(item, labelKey);\n  }\n\n  return (\n    <TreeItem\n      key={key}\n      {...props}\n      as={as}\n      to={to}\n      href={href}\n      isLink={isLink}\n      contentComponent={contentComponent}\n      style={overrides?.style ?? style}\n      className={cn(\n        \"rmd-layout-nav__mini-item\",\n        overrides?.className ?? className\n      )}\n      liStyle={overrides?.liStyle ?? liStyle}\n      liClassName={overrides?.liClassName ?? liClassName}\n      textChildren={false}\n    >\n      {leftAddon}\n      <SrOnly>{children}</SrOnly>\n    </TreeItem>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}