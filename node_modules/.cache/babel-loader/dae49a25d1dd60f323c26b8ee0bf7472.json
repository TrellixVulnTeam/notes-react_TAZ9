{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { CircularProgress, getProgressA11y } from \"@react-md/progress\";\nimport { Switch } from \"./Switch\"; // this is used while the loading state is enabled to \"disable\" the switch\n// toggle. If we disable the entire switch, keyboard focus is lost which is not\n// desired.\n\nvar noop = function () {// do nothing\n};\n/**\n * This component will create an async switch that will show a loading indicator\n * and prevent the switch from being toggled while the loading state is true.\n */\n\n\nexport var AsyncSwitch = forwardRef(function AsyncSwitch(_a, ref) {\n  var id = _a.id,\n      disabled = _a.disabled,\n      className = _a.className,\n      progressStyle = _a.progressStyle,\n      progressClassName = _a.progressClassName,\n      loading = _a.loading,\n      onChange = _a.onChange,\n      props = __rest(_a, [\"id\", \"disabled\", \"className\", \"progressStyle\", \"progressClassName\", \"loading\", \"onChange\"]);\n\n  var progressId = \"\".concat(id, \"-loading\");\n  return _jsx(Switch, __assign({}, props, getProgressA11y(progressId, loading), {\n    id: id,\n    ref: ref,\n    disabled: disabled,\n    className: cn(\"rmd-switch--async\", className),\n    labelDisabled: disabled || false,\n    onChange: loading ? noop : onChange\n  }, {\n    children: loading && _jsx(CircularProgress, {\n      id: progressId,\n      style: progressStyle,\n      className: cn(\"rmd-switch__progress\", progressClassName),\n      centered: false\n    })\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,oBAAlD;AAGA,SAASC,MAAT,QAAuB,UAAvB,C,CAuBA;AACA;AACA;;AACA,IAAMC,IAAI,GAAG,aACX;AACD,CAFD;AAIA;;;;;;AAIA,OAAO,IAAMC,WAAW,GAAGN,UAAU,CACnC,SAASM,WAAT,CACEC,EADF,EAWEC,GAXF,EAWK;EATD,MAAE,QAAF;EAAA,IACAC,QAAQ,cADR;EAAA,IAEAC,SAAS,eAFT;EAAA,IAGAC,aAAa,mBAHb;EAAA,IAIAC,iBAAiB,uBAJjB;EAAA,IAKAC,OAAO,aALP;EAAA,IAMAC,QAAQ,cANR;EAAA,IAOGC,KAAK,cARV,4FAQU,CAPR;;EAWF,IAAMC,UAAU,GAAG,UAAGC,EAAH,EAAK,UAAL,CAAnB;EACA,OACEC,KAACd,MAAD,EAAOe,aACDJ,KADC,EAEDZ,eAAe,CAACa,UAAD,EAAaH,OAAb,CAFd,EAEmC;IACxCI,EAAE,EAAEA,EADoC;IAExCT,GAAG,EAAEA,GAFmC;IAGxCC,QAAQ,EAAEA,QAH8B;IAIxCC,SAAS,EAAET,EAAE,CAAC,mBAAD,EAAsBS,SAAtB,CAJ2B;IAKxCU,aAAa,EAAEX,QAAQ,IAAI,KALa;IAMxCK,QAAQ,EAAED,OAAO,GAAGR,IAAH,GAAUS;EANa,CAFnC,EAQ8B;IAAAO,UAElCR,OAAO,IACNK,KAAChB,gBAAD,EAAiB;MACfe,EAAE,EAAED,UADW;MAEfM,KAAK,EAAEX,aAFQ;MAGfD,SAAS,EAAET,EAAE,CAAC,sBAAD,EAAyBW,iBAAzB,CAHE;MAIfW,QAAQ,EAAE;IAJK,CAAjB;EAHiC,CAR9B,CAAP,CADF;AAqBD,CApCkC,CAA9B","names":["forwardRef","cn","CircularProgress","getProgressA11y","Switch","noop","AsyncSwitch","_a","ref","disabled","className","progressStyle","progressClassName","loading","onChange","props","progressId","id","_jsx","__assign","labelDisabled","children","style","centered"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\form\\src\\toggle\\AsyncSwitch.tsx"],"sourcesContent":["import type { CSSProperties } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { CircularProgress, getProgressA11y } from \"@react-md/progress\";\n\nimport type { SwitchProps } from \"./Switch\";\nimport { Switch } from \"./Switch\";\n\nexport interface AsyncSwitchProps extends SwitchProps {\n  /**\n   * Boolean if the switch is still loading. This will \"disable\" the switch and\n   * add the circular progress indicator in the switch's ball until it is set\n   * back to false.\n   */\n  loading: boolean;\n\n  /**\n   * An optional style to apply to the progress bar while the loading state is\n   * enabled.\n   */\n  progressStyle?: CSSProperties;\n\n  /**\n   * An optional class name to apply to the progress bar while the loading state\n   * is enabled.\n   */\n  progressClassName?: string;\n}\n\n// this is used while the loading state is enabled to \"disable\" the switch\n// toggle. If we disable the entire switch, keyboard focus is lost which is not\n// desired.\nconst noop = (): void => {\n  // do nothing\n};\n\n/**\n * This component will create an async switch that will show a loading indicator\n * and prevent the switch from being toggled while the loading state is true.\n */\nexport const AsyncSwitch = forwardRef<HTMLInputElement, AsyncSwitchProps>(\n  function AsyncSwitch(\n    {\n      id,\n      disabled,\n      className,\n      progressStyle,\n      progressClassName,\n      loading,\n      onChange,\n      ...props\n    },\n    ref\n  ) {\n    const progressId = `${id}-loading`;\n    return (\n      <Switch\n        {...props}\n        {...getProgressA11y(progressId, loading)}\n        id={id}\n        ref={ref}\n        disabled={disabled}\n        className={cn(\"rmd-switch--async\", className)}\n        labelDisabled={disabled || false}\n        onChange={loading ? noop : onChange}\n      >\n        {loading && (\n          <CircularProgress\n            id={progressId}\n            style={progressStyle}\n            className={cn(\"rmd-switch__progress\", progressClassName)}\n            centered={false}\n          />\n        )}\n      </Switch>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}