{"ast":null,"code":"var SHORTHAND_REGEX = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar VERBOSE_REGEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n/**\n * Converts a hex string into an rgb value. This is useful for detecting color\n * contrast ratios and other stuff.\n *\n * @param hex - The hex string to convert\n * @returns an object containing the r, g, b values for the color.\n */\n\nexport function hexToRGB(hex) {\n  if (process.env.NODE_ENV !== \"production\" && !SHORTHAND_REGEX.test(hex) && !VERBOSE_REGEX.test(hex)) {\n    throw new TypeError(\"Invalid color string.\");\n  }\n\n  hex = hex.replace(SHORTHAND_REGEX, function (_m, r, g, b) {\n    return \"\".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b);\n  });\n  var result = hex.match(VERBOSE_REGEX) || [];\n  var r = parseInt(result[1] || \"\", 16) || 0;\n  var g = parseInt(result[2] || \"\", 16) || 0;\n  var b = parseInt(result[3] || \"\", 16) || 0;\n  return [r, g, b];\n}","map":{"version":3,"mappings":"AAKA,IAAMA,eAAe,GAAG,kCAAxB;AACA,IAAMC,aAAa,GAAG,2CAAtB;AAEA;;;;;;;;AAOA,OAAM,SAAUC,QAAV,CAAmBC,GAAnB,EAAiC;EACrC,IACEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACA,CAACN,eAAe,CAACO,IAAhB,CAAqBJ,GAArB,CADD,IAEA,CAACF,aAAa,CAACM,IAAd,CAAmBJ,GAAnB,CAHH,EAIE;IACA,MAAM,IAAIK,SAAJ,CAAc,uBAAd,CAAN;EACD;;EAEDL,GAAG,GAAGA,GAAG,CAACM,OAAJ,CACJT,eADI,EAEJ,UAACU,EAAD,EAAKC,CAAL,EAAQC,CAAR,EAAWC,CAAX,EAAY;IAAK,iBAAGF,CAAH,EAAIG,MAAJ,CAAOH,CAAP,EAAQG,MAAR,CAAWF,CAAX,EAAYE,MAAZ,CAAeF,CAAf,EAAgBE,MAAhB,CAAmBD,CAAnB,EAAoBC,MAApB,CAAuBD,CAAvB;EAA0B,CAFvC,CAAN;EAKA,IAAME,MAAM,GAAGZ,GAAG,CAACa,KAAJ,CAAUf,aAAV,KAA4B,EAA3C;EACA,IAAMU,CAAC,GAAGM,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAN,IAAa,EAAd,EAAkB,EAAlB,CAAR,IAAiC,CAA3C;EACA,IAAMH,CAAC,GAAGK,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAN,IAAa,EAAd,EAAkB,EAAlB,CAAR,IAAiC,CAA3C;EACA,IAAMF,CAAC,GAAGI,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAN,IAAa,EAAd,EAAkB,EAAlB,CAAR,IAAiC,CAA3C;EAEA,OAAO,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD","names":["SHORTHAND_REGEX","VERBOSE_REGEX","hexToRGB","hex","process","env","NODE_ENV","test","TypeError","replace","_m","r","g","b","concat","result","match","parseInt"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\colors\\hexToRGB.ts"],"sourcesContent":["export type HexString = string;\nexport type RedBit = number;\nexport type GreenBit = number;\nexport type BlueBit = number;\n\nconst SHORTHAND_REGEX = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nconst VERBOSE_REGEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n/**\n * Converts a hex string into an rgb value. This is useful for detecting color\n * contrast ratios and other stuff.\n *\n * @param hex - The hex string to convert\n * @returns an object containing the r, g, b values for the color.\n */\nexport function hexToRGB(hex: HexString): [RedBit, GreenBit, BlueBit] {\n  if (\n    process.env.NODE_ENV !== \"production\" &&\n    !SHORTHAND_REGEX.test(hex) &&\n    !VERBOSE_REGEX.test(hex)\n  ) {\n    throw new TypeError(\"Invalid color string.\");\n  }\n\n  hex = hex.replace(\n    SHORTHAND_REGEX,\n    (_m, r, g, b) => `${r}${r}${g}${g}${b}${b}`\n  );\n\n  const result = hex.match(VERBOSE_REGEX) || [];\n  const r = parseInt(result[1] || \"\", 16) || 0;\n  const g = parseInt(result[2] || \"\", 16) || 0;\n  const b = parseInt(result[3] || \"\", 16) || 0;\n\n  return [r, g, b];\n}\n"]},"metadata":{},"sourceType":"module"}