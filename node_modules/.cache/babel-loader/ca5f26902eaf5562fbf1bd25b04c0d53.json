{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem, useKeyboardFocusableElement } from \"@react-md/utils\";\nvar block = bem(\"rmd-tab\");\n/**\n * The `Tab` is a low-level component that just renders an accessible tab widget\n * along with some general styles and an optional icon.\n */\n\nexport var Tab = forwardRef(function Tab(_a, ref) {\n  var propClassName = _a.className,\n      contentStyle = _a.contentStyle,\n      contentClassName = _a.contentClassName,\n      _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      icon = _a.icon,\n      _c = _a.stacked,\n      stacked = _c === void 0 ? false : _c,\n      _d = _a.iconAfter,\n      iconAfter = _d === void 0 ? false : _d,\n      children = _a.children,\n      active = _a.active,\n      panelId = _a.panelId,\n      disableRipple = _a.disableRipple,\n      disableProgrammaticRipple = _a.disableProgrammaticRipple,\n      rippleTimeout = _a.rippleTimeout,\n      rippleClassNames = _a.rippleClassNames,\n      rippleClassName = _a.rippleClassName,\n      rippleContainerClassName = _a.rippleContainerClassName,\n      enablePressedAndRipple = _a.enablePressedAndRipple,\n      props = __rest(_a, [\"className\", \"contentStyle\", \"contentClassName\", \"disabled\", \"icon\", \"stacked\", \"iconAfter\", \"children\", \"active\", \"panelId\", \"disableRipple\", \"disableProgrammaticRipple\", \"rippleTimeout\", \"rippleClassNames\", \"rippleClassName\", \"rippleContainerClassName\", \"enablePressedAndRipple\"]);\n\n  var _e = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled: disabled,\n    disableRipple: disableRipple,\n    disableProgrammaticRipple: disableProgrammaticRipple,\n    rippleTimeout: rippleTimeout,\n    rippleClassNames: rippleClassNames,\n    rippleClassName: rippleClassName,\n    rippleContainerClassName: rippleContainerClassName,\n    enablePressedAndRipple: enablePressedAndRipple\n  }),\n      ripples = _e.ripples,\n      className = _e.className,\n      handlers = _e.handlers;\n\n  var refCallback = useKeyboardFocusableElement(ref);\n  return _jsxs(\"button\", __assign({}, props, handlers, {\n    ref: refCallback,\n    \"aria-selected\": active,\n    \"aria-controls\": panelId,\n    type: \"button\",\n    role: \"tab\",\n    disabled: disabled,\n    className: cn(block({\n      active: active,\n      stacked: icon && stacked\n    }), className),\n    tabIndex: active ? undefined : -1\n  }, {\n    children: [_jsx(TextIconSpacing, __assign({\n      icon: icon,\n      stacked: stacked,\n      iconAfter: iconAfter\n    }, {\n      children: _jsx(\"span\", __assign({\n        style: contentStyle,\n        className: cn(block(\"content\"), contentClassName)\n      }, {\n        children: children\n      }))\n    })), ripples]\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,GAAT,EAAcC,2BAAd,QAAiD,iBAAjD;AAiCA,IAAMC,KAAK,GAAGF,GAAG,CAAC,SAAD,CAAjB;AAEA;;;;;AAIA,OAAO,IAAMG,GAAG,GAAGP,UAAU,CAA8B,SAASO,GAAT,CACzDC,EADyD,EAqBzDC,GArByD,EAqBtD;EAnBD,IAAWC,aAAa,eAAxB;EAAA,IACAC,YAAY,kBADZ;EAAA,IAEAC,gBAAgB,sBAFhB;EAAA,IAGAC,gBAHA;EAAA,IAGAC,QAAQ,mBAAG,KAAH,GAAQD,EAHhB;EAAA,IAIAE,IAAI,UAJJ;EAAA,IAKAC,eALA;EAAA,IAKAC,OAAO,mBAAG,KAAH,GAAQD,EALf;EAAA,IAMAE,iBANA;EAAA,IAMAC,SAAS,mBAAG,KAAH,GAAQD,EANjB;EAAA,IAOAE,QAAQ,cAPR;EAAA,IAQAC,MAAM,YARN;EAAA,IASAC,OAAO,aATP;EAAA,IAUAC,aAAa,mBAVb;EAAA,IAWAC,yBAAyB,+BAXzB;EAAA,IAYAC,aAAa,mBAZb;EAAA,IAaAC,gBAAgB,sBAbhB;EAAA,IAcAC,eAAe,qBAdf;EAAA,IAeAC,wBAAwB,8BAfxB;EAAA,IAgBAC,sBAAsB,4BAhBtB;EAAA,IAiBGC,KAAK,cAlBV,0RAkBU,CAjBR;;EAqBI,SAAmC3B,oBAAoB,CAAC;IAC5D4B,QAAQ,EAAED,KADkD;IAE5DE,SAAS,EAAEtB,aAFiD;IAG5DI,QAAQ,UAHoD;IAI5DS,aAAa,eAJ+C;IAK5DC,yBAAyB,2BALmC;IAM5DC,aAAa,eAN+C;IAO5DC,gBAAgB,kBAP4C;IAQ5DC,eAAe,iBAR6C;IAS5DC,wBAAwB,0BAToC;IAU5DC,sBAAsB;EAVsC,CAAD,CAAvD;EAAA,IAAEI,OAAO,aAAT;EAAA,IAAWD,SAAS,eAApB;EAAA,IAAsBD,QAAQ,cAA9B;;EAYN,IAAMG,WAAW,GAAG7B,2BAA2B,CAACI,GAAD,CAA/C;EAEA,OACE0B,6BACML,KADN,EAEMC,QAFN,EAEc;IACZtB,GAAG,EAAEyB,WADO;IACI,iBACDb,MAFH;IAES,iBACNC,OAHH;IAIZc,IAAI,EAAC,QAJO;IAKZC,IAAI,EAAC,KALO;IAMZvB,QAAQ,EAAEA,QANE;IAOZkB,SAAS,EAAE/B,EAAE,CAACK,KAAK,CAAC;MAAEe,MAAM,QAAR;MAAUJ,OAAO,EAAEF,IAAI,IAAIE;IAA3B,CAAD,CAAN,EAA8Ce,SAA9C,CAPD;IAQZM,QAAQ,EAAEjB,MAAM,GAAGkB,SAAH,GAAe,CAAC;EARpB,CAFd,EAUmC;IAAAnB,WAEjCoB,KAACtC,eAAD,EAAgBuC;MAAC1B,IAAI,EAAEA,IAAP;MAAaE,OAAO,EAAEA,OAAtB;MAA+BE,SAAS,EAAEA;IAA1C,GAAmD;MAAAC,UACjEoB;QACEE,KAAK,EAAE/B,YADT;QAEEqB,SAAS,EAAE/B,EAAE,CAACK,KAAK,CAAC,SAAD,CAAN,EAAmBM,gBAAnB;MAFf,GAEmD;QAAAQ,UAEhDA;MAFgD,CAFnD;IADiE,CAAnD,CAAhB,CAFiC,EAUhCa,OAVgC;EAAA,CAVnC,EADF;AAwBD,CA7D4B,CAAtB","names":["forwardRef","cn","TextIconSpacing","useInteractionStates","bem","useKeyboardFocusableElement","block","Tab","_a","ref","propClassName","contentStyle","contentClassName","_b","disabled","icon","_c","stacked","_d","iconAfter","children","active","panelId","disableRipple","disableProgrammaticRipple","rippleTimeout","rippleClassNames","rippleClassName","rippleContainerClassName","enablePressedAndRipple","props","handlers","className","ripples","refCallback","_jsxs","type","role","tabIndex","undefined","_jsx","__assign","style"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\tabs\\src\\Tab.tsx"],"sourcesContent":["import type { HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport type { InteractionStatesOptions } from \"@react-md/states\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem, useKeyboardFocusableElement } from \"@react-md/utils\";\n\nimport type { TabConfig } from \"./types\";\n\nexport interface TabProps\n  extends TabConfig,\n    HTMLAttributes<HTMLButtonElement>,\n    Omit<InteractionStatesOptions<HTMLButtonElement>, \"disableSpacebarClick\"> {\n  /**\n   * The id for the tab. This is required for a11y and linking the `TabPanel` to\n   * a specific tab.\n   */\n  id: string;\n\n  /**\n   * Boolean if the tab is currently active. Only one tab should be active at a\n   * time.\n   */\n  active: boolean;\n\n  /**\n   * The id for the `TabPanel` that the `Tab` controls. This is really just used\n   * to create an `aria-controls` attribute on the `Tab` itself, but Googling\n   * this results in some \"interesting\" results showing `aria-controls` doesn't\n   * really do much so this prop can be omitted.\n   *\n   * In addition, if you are using dynamically rendered tab panels, this value\n   * should only be provided when the tab becomes active as the `id` will not\n   * exist in the DOM until then and will be invalid.\n   */\n  panelId?: string;\n}\n\nconst block = bem(\"rmd-tab\");\n\n/**\n * The `Tab` is a low-level component that just renders an accessible tab widget\n * along with some general styles and an optional icon.\n */\nexport const Tab = forwardRef<HTMLButtonElement, TabProps>(function Tab(\n  {\n    className: propClassName,\n    contentStyle,\n    contentClassName,\n    disabled = false,\n    icon,\n    stacked = false,\n    iconAfter = false,\n    children,\n    active,\n    panelId,\n    disableRipple,\n    disableProgrammaticRipple,\n    rippleTimeout,\n    rippleClassNames,\n    rippleClassName,\n    rippleContainerClassName,\n    enablePressedAndRipple,\n    ...props\n  },\n  ref\n) {\n  const { ripples, className, handlers } = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled,\n    disableRipple,\n    disableProgrammaticRipple,\n    rippleTimeout,\n    rippleClassNames,\n    rippleClassName,\n    rippleContainerClassName,\n    enablePressedAndRipple,\n  });\n  const refCallback = useKeyboardFocusableElement(ref);\n\n  return (\n    <button\n      {...props}\n      {...handlers}\n      ref={refCallback}\n      aria-selected={active}\n      aria-controls={panelId}\n      type=\"button\"\n      role=\"tab\"\n      disabled={disabled}\n      className={cn(block({ active, stacked: icon && stacked }), className)}\n      tabIndex={active ? undefined : -1}\n    >\n      <TextIconSpacing icon={icon} stacked={stacked} iconAfter={iconAfter}>\n        <span\n          style={contentStyle}\n          className={cn(block(\"content\"), contentClassName)}\n        >\n          {children}\n        </span>\n      </TextIconSpacing>\n      {ripples}\n    </button>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}