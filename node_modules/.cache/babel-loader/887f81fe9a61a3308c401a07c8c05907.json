{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useEffect, useState } from \"react\";\n/**\n * An extremely simple \"pollyfill\" for the `window.screen.orientation` just for\n * the `type` value that is required for the `useOrientation` hook.\n */\n\nexport var getOrientationType = function () {\n  var _a;\n\n  var screenOrientation = (_a = window.screen.orientation) === null || _a === void 0 ? void 0 : _a.type;\n\n  if (typeof screenOrientation === \"string\") {\n    return screenOrientation;\n  }\n\n  var _b = window.screen,\n      availHeight = _b.availHeight,\n      availWidth = _b.availWidth;\n  return availHeight > availWidth ? \"portrait-primary\" : \"landscape-primary\";\n};\n/**\n * This media query is used to determine the current orientation of the app\n * based on the `window.screen.orientation.type`. This will always be\n * `\"landscape-primary\"` server side unless a default value is provided.\n *\n * @param defaultValue - an optional default value to use. When this is omitted,\n * it will default to `\"landscape-primary\"` unless the `window` is defined. If\n * the `window` is defined, it will immediately check the orientation type on\n * mount.\n * @returns the orientation type value.\n */\n\nexport function useOrientation(defaultValue) {\n  var _a = __read(useState(function () {\n    if (defaultValue) {\n      return defaultValue;\n    }\n\n    if (typeof window !== \"undefined\") {\n      return getOrientationType();\n    }\n\n    return \"landscape-primary\";\n  }), 2),\n      value = _a[0],\n      setValue = _a[1];\n\n  useEffect(function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    var handler = function () {\n      setValue(getOrientationType());\n    };\n\n    window.addEventListener(\"orientationchange\", handler);\n    return function () {\n      return window.removeEventListener(\"orientationchange\", handler);\n    };\n  }, []);\n  return value;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;;;;;AAIA,OAAO,IAAMC,kBAAkB,GAAG;;;EAChC,IAAMC,iBAAiB,GAAG,YAAM,CAACC,MAAP,CAAcC,WAAd,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyB,MAAzB,GAAyBA,GAAEC,IAArD;;EACA,IAAI,OAAOJ,iBAAP,KAA6B,QAAjC,EAA2C;IACzC,OAAOA,iBAAP;EACD;;EAEK,SAA8BK,MAAM,CAACJ,MAArC;EAAA,IAAEK,WAAW,iBAAb;EAAA,IAAeC,UAAU,gBAAzB;EAEN,OAAOD,WAAW,GAAGC,UAAd,GAA2B,kBAA3B,GAAgD,mBAAvD;AACD,CATM;AAWP;;;;;;;;;;;;AAWA,OAAM,SAAUC,cAAV,CACJC,YADI,EAC0B;EAExB,gBAAoBX,QAAQ,CAAkB;IAClD,IAAIW,YAAJ,EAAkB;MAChB,OAAOA,YAAP;IACD;;IAED,IAAI,OAAOJ,MAAP,KAAkB,WAAtB,EAAmC;MACjC,OAAON,kBAAkB,EAAzB;IACD;;IAED,OAAO,mBAAP;EACD,CAViC,CAA5B,EAUJ,CAVI;EAAA,IAACW,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EAYNd,SAAS,CAAC;IACR,IAAI,OAAOQ,MAAP,KAAkB,WAAtB,EAAmC;MACjC;IACD;;IAED,IAAMO,OAAO,GAAG;MACdD,QAAQ,CAACZ,kBAAkB,EAAnB,CAAR;IACD,CAFD;;IAGAM,MAAM,CAACQ,gBAAP,CAAwB,mBAAxB,EAA6CD,OAA7C;IAEA,OAAO;MAAM,aAAM,CAACE,mBAAP,CAA2B,mBAA3B,EAAgDF,OAAhD;IAAwD,CAArE;EACD,CAXQ,EAWN,EAXM,CAAT;EAaA,OAAOF,KAAP;AACD","names":["useEffect","useState","getOrientationType","screenOrientation","screen","orientation","_a","type","window","availHeight","availWidth","useOrientation","defaultValue","value","setValue","handler","addEventListener","removeEventListener"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\sizing\\useOrientation.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n/**\n * An extremely simple \"pollyfill\" for the `window.screen.orientation` just for\n * the `type` value that is required for the `useOrientation` hook.\n */\nexport const getOrientationType = (): OrientationType => {\n  const screenOrientation = window.screen.orientation?.type;\n  if (typeof screenOrientation === \"string\") {\n    return screenOrientation;\n  }\n\n  const { availHeight, availWidth } = window.screen;\n\n  return availHeight > availWidth ? \"portrait-primary\" : \"landscape-primary\";\n};\n\n/**\n * This media query is used to determine the current orientation of the app\n * based on the `window.screen.orientation.type`. This will always be\n * `\"landscape-primary\"` server side unless a default value is provided.\n *\n * @param defaultValue - an optional default value to use. When this is omitted,\n * it will default to `\"landscape-primary\"` unless the `window` is defined. If\n * the `window` is defined, it will immediately check the orientation type on\n * mount.\n * @returns the orientation type value.\n */\nexport function useOrientation(\n  defaultValue?: OrientationType\n): OrientationType {\n  const [value, setValue] = useState<OrientationType>(() => {\n    if (defaultValue) {\n      return defaultValue;\n    }\n\n    if (typeof window !== \"undefined\") {\n      return getOrientationType();\n    }\n\n    return \"landscape-primary\";\n  });\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    const handler = (): void => {\n      setValue(getOrientationType());\n    };\n    window.addEventListener(\"orientationchange\", handler);\n\n    return () => window.removeEventListener(\"orientationchange\", handler);\n  }, []);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}