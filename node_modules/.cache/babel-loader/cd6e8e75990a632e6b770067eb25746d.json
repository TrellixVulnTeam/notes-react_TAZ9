{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { buttonThemeClassNames } from \"./buttonThemeClassNames\";\nimport { FAB } from \"./FAB\";\n/**\n * The `Button` component is a simple wrapper for the `<button>` element that\n * defaults the `type` attribute to `\"button\"` so that it does not automatically\n * submit forms by default. It also supports multiple themes, rendering as an\n * icon button, or even as a floating action button.\n *\n * The default theme will be a clear text button unless the `floating` prop has\n * been provided where it will render as an icon button by default instead.\n */\n\nexport var Button = forwardRef(function Button(_a, ref) {\n  var _b = _a.type,\n      type = _b === void 0 ? \"button\" : _b,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      _d = _a.floating,\n      floating = _d === void 0 ? null : _d,\n      floatingProps = _a.floatingProps,\n      _e = _a.theme,\n      theme = _e === void 0 ? floating ? \"secondary\" : \"clear\" : _e,\n      _f = _a.themeType,\n      themeType = _f === void 0 ? floating ? \"contained\" : \"flat\" : _f,\n      _g = _a.buttonType,\n      buttonType = _g === void 0 ? floating ? \"icon\" : \"text\" : _g,\n      propClassName = _a.className,\n      children = _a.children,\n      disableRipple = _a.disableRipple,\n      disableProgrammaticRipple = _a.disableProgrammaticRipple,\n      rippleTimeout = _a.rippleTimeout,\n      rippleClassNames = _a.rippleClassNames,\n      rippleClassName = _a.rippleClassName,\n      rippleContainerClassName = _a.rippleContainerClassName,\n      propEnablePressedAndRipple = _a.enablePressedAndRipple,\n      disablePressedFallback = _a.disablePressedFallback,\n      onClick = _a.onClick,\n      onKeyUp = _a.onKeyUp,\n      onKeyDown = _a.onKeyDown,\n      onMouseUp = _a.onMouseUp,\n      onMouseDown = _a.onMouseDown,\n      onMouseLeave = _a.onMouseLeave,\n      onTouchStart = _a.onTouchStart,\n      onTouchMove = _a.onTouchMove,\n      onTouchEnd = _a.onTouchEnd,\n      props = __rest(_a, [\"type\", \"disabled\", \"floating\", \"floatingProps\", \"theme\", \"themeType\", \"buttonType\", \"className\", \"children\", \"disableRipple\", \"disableProgrammaticRipple\", \"rippleTimeout\", \"rippleClassNames\", \"rippleClassName\", \"rippleContainerClassName\", \"enablePressedAndRipple\", \"disablePressedFallback\", \"onClick\", \"onKeyUp\", \"onKeyDown\", \"onMouseUp\", \"onMouseDown\", \"onMouseLeave\", \"onTouchStart\", \"onTouchMove\", \"onTouchEnd\"]);\n\n  var enablePressedAndRipple = typeof propEnablePressedAndRipple === \"boolean\" ? propEnablePressedAndRipple : themeType === \"contained\";\n  var propHandlers = {\n    onClick: onClick,\n    onKeyUp: onKeyUp,\n    onKeyDown: onKeyDown,\n    onMouseUp: onMouseUp,\n    onMouseDown: onMouseDown,\n    onMouseLeave: onMouseLeave,\n    onTouchStart: onTouchStart,\n    onTouchMove: onTouchMove,\n    onTouchEnd: onTouchEnd\n  };\n  var isDisabledTheme = theme === \"disabled\";\n\n  var _h = useInteractionStates({\n    handlers: propHandlers,\n    className: buttonThemeClassNames({\n      theme: theme,\n      themeType: themeType,\n      buttonType: buttonType,\n      disabled: disabled,\n      className: propClassName\n    }),\n    disabled: disabled || isDisabledTheme,\n    disableRipple: disableRipple,\n    disableProgrammaticRipple: disableProgrammaticRipple,\n    disablePressedFallback: disablePressedFallback,\n    rippleTimeout: rippleTimeout,\n    rippleClassNames: rippleClassNames,\n    rippleClassName: rippleClassName,\n    rippleContainerClassName: rippleContainerClassName,\n    enablePressedAndRipple: enablePressedAndRipple\n  }),\n      ripples = _h.ripples,\n      className = _h.className,\n      handlers = _h.handlers;\n\n  return _jsx(FAB, __assign({\n    position: floating\n  }, floatingProps, {\n    children: _jsxs(\"button\", __assign({\n      \"aria-disabled\": isDisabledTheme || undefined\n    }, props, isDisabledTheme ? undefined : handlers, {\n      ref: ref,\n      type: type,\n      className: className,\n      disabled: disabled\n    }, {\n      children: [children, ripples]\n    }))\n  }));\n});","map":{"version":3,"mappings":"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","names":["forwardRef","useInteractionStates","buttonThemeClassNames","FAB","Button","_a","ref","_b","_c","disabled","_d","floating","floatingProps","_e","theme","_f","themeType","_g","buttonType","propClassName","children","disableRipple","disableProgrammaticRipple","rippleTimeout","rippleClassNames","rippleClassName","rippleContainerClassName","propEnablePressedAndRipple","disablePressedFallback","onClick","onKeyUp","onKeyDown","onMouseUp","onMouseDown","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","props","enablePressedAndRipple","propHandlers","isDisabledTheme","handlers","className","ripples","_jsx","__assign","position","_jsxs","undefined","type"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\button\\src\\Button.tsx"],"sourcesContent":["/* eslint-disable react/button-has-type */\nimport type { ButtonHTMLAttributes, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { InteractionStatesOptions } from \"@react-md/states\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport type { PropsWithRef } from \"@react-md/utils\";\n\nimport type { ButtonThemeProps } from \"./buttonThemeClassNames\";\nimport { buttonThemeClassNames } from \"./buttonThemeClassNames\";\nimport type { FABPosition, FABProps } from \"./FAB\";\nimport { FAB } from \"./FAB\";\n\n/**\n * This interface includes all the props that the `Button` component accepts so\n * the main use case might be creating a functionality wrapper for the `Button`\n * component, but passes all props down as normal.\n */\nexport interface ButtonProps\n  extends ButtonThemeProps,\n    ButtonHTMLAttributes<HTMLButtonElement>,\n    Omit<InteractionStatesOptions<HTMLButtonElement>, \"disableSpacebarClick\"> {\n  /**\n   * The button's type attribute. This is set to \"button\" by default so that\n   * forms are not accidentally submitted when this prop is omitted since\n   * buttons without a type attribute work as submit by default.\n   */\n  type?: \"button\" | \"reset\" | \"submit\";\n\n  /**\n   * Any children to render within the button. This will normally just be text\n   * or an icon.\n   *\n   * Please note that it is considered invalid html to have a `<div>` as a\n   * descendant of a `<button>`.\n   */\n  children?: ReactNode;\n\n  /**\n   * The position within the viewport to display the button as a floating action\n   * button.\n   */\n  floating?: FABPosition;\n\n  /**\n   * Any additional props to provide the to `FAB` container element when the\n   * `floating` prop is provided\n   */\n  floatingProps?: PropsWithRef<FABProps, HTMLSpanElement>;\n}\n\n/**\n * The `Button` component is a simple wrapper for the `<button>` element that\n * defaults the `type` attribute to `\"button\"` so that it does not automatically\n * submit forms by default. It also supports multiple themes, rendering as an\n * icon button, or even as a floating action button.\n *\n * The default theme will be a clear text button unless the `floating` prop has\n * been provided where it will render as an icon button by default instead.\n */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  function Button(\n    {\n      type = \"button\",\n      disabled = false,\n      floating = null,\n      floatingProps,\n      theme = floating ? \"secondary\" : \"clear\",\n      themeType = floating ? \"contained\" : \"flat\",\n      buttonType = floating ? \"icon\" : \"text\",\n      className: propClassName,\n      children,\n      disableRipple,\n      disableProgrammaticRipple,\n      rippleTimeout,\n      rippleClassNames,\n      rippleClassName,\n      rippleContainerClassName,\n      enablePressedAndRipple: propEnablePressedAndRipple,\n      disablePressedFallback,\n      onClick,\n      onKeyUp,\n      onKeyDown,\n      onMouseUp,\n      onMouseDown,\n      onMouseLeave,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n      ...props\n    },\n    ref\n  ) {\n    const enablePressedAndRipple =\n      typeof propEnablePressedAndRipple === \"boolean\"\n        ? propEnablePressedAndRipple\n        : themeType === \"contained\";\n    const propHandlers = {\n      onClick,\n      onKeyUp,\n      onKeyDown,\n      onMouseUp,\n      onMouseDown,\n      onMouseLeave,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n    };\n\n    const isDisabledTheme = theme === \"disabled\";\n    const { ripples, className, handlers } = useInteractionStates({\n      handlers: propHandlers,\n      className: buttonThemeClassNames({\n        theme,\n        themeType,\n        buttonType,\n        disabled,\n        className: propClassName,\n      }),\n      disabled: disabled || isDisabledTheme,\n      disableRipple,\n      disableProgrammaticRipple,\n      disablePressedFallback,\n      rippleTimeout,\n      rippleClassNames,\n      rippleClassName,\n      rippleContainerClassName,\n      enablePressedAndRipple,\n    });\n\n    return (\n      <FAB position={floating} {...floatingProps}>\n        <button\n          aria-disabled={isDisabledTheme || undefined}\n          {...props}\n          {...(isDisabledTheme ? undefined : handlers)}\n          ref={ref}\n          type={type}\n          className={className}\n          disabled={disabled}\n        >\n          {children}\n          {ripples}\n        </button>\n      </FAB>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}