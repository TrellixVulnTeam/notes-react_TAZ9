{"ast":null,"code":"/**\n * A simple util to convert a unit that is using `px`, `em`, or `rem` to a\n * number so that calculations can be made on that unit.\n *\n * @param unit - The unit to convert to a number\n * @param element - The element to use to use for calculating `em`\n * @returns the unit as a number\n */\nexport function unitToNumber(unit, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.fontSizeFallback,\n      fontSizeFallback = _a === void 0 ? 16 : _a,\n      element = options.element;\n\n  if (typeof unit === \"number\") {\n    return unit;\n  }\n\n  var parsed = parseFloat(unit);\n\n  if (/px$/.test(unit)) {\n    return parsed;\n  }\n\n  if (typeof document === \"undefined\") {\n    return parsed * fontSizeFallback;\n  }\n\n  var rem = /rem$/.test(unit);\n  var el = document.documentElement;\n\n  if (!rem && element) {\n    el = element.parentElement || element;\n  }\n\n  var fontSize = parseFloat(window.getComputedStyle(el).fontSize || \"\".concat(fontSizeFallback, \"px\"));\n  return parsed * fontSize;\n}","map":{"version":3,"mappings":"AAIA;;;;;;;;AAQA,OAAM,SAAUA,YAAV,CACJC,IADI,EAEJC,OAFI,EAE6B;EAAjC;IAAAA;EAAiC;;EAEzB,SAAmCA,OAAO,iBAA1C;EAAA,oBAAgB,mBAAG,EAAH,GAAKC,EAArB;EAAA,IAAuBC,OAAO,GAAKF,OAAO,QAA1C;;EACR,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOA,IAAP;EACD;;EAED,IAAMI,MAAM,GAAGC,UAAU,CAACL,IAAD,CAAzB;;EACA,IAAI,MAAMM,IAAN,CAAWN,IAAX,CAAJ,EAAsB;IACpB,OAAOI,MAAP;EACD;;EAED,IAAI,OAAOG,QAAP,KAAoB,WAAxB,EAAqC;IACnC,OAAOH,MAAM,GAAGI,gBAAhB;EACD;;EAED,IAAMC,GAAG,GAAG,OAAOH,IAAP,CAAYN,IAAZ,CAAZ;EACA,IAAIU,EAAE,GAA0BH,QAAQ,CAACI,eAAzC;;EACA,IAAI,CAACF,GAAD,IAAQN,OAAZ,EAAqB;IACnBO,EAAE,GAAGP,OAAO,CAACS,aAAR,IAAyBT,OAA9B;EACD;;EAED,IAAMU,QAAQ,GAAGR,UAAU,CACzBS,MAAM,CAACC,gBAAP,CAAwBL,EAAxB,EAA4BG,QAA5B,IAAwC,UAAGL,gBAAH,EAAmB,IAAnB,CADf,CAA3B;EAIA,OAAOJ,MAAM,GAAGS,QAAhB;AACD","names":["unitToNumber","unit","options","_a","element","parsed","parseFloat","test","document","fontSizeFallback","rem","el","documentElement","parentElement","fontSize","window","getComputedStyle"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\unitToNumber.ts"],"sourcesContent":["export interface UnitToNumberOptions {\n  element?: Element;\n  fontSizeFallback?: number;\n}\n/**\n * A simple util to convert a unit that is using `px`, `em`, or `rem` to a\n * number so that calculations can be made on that unit.\n *\n * @param unit - The unit to convert to a number\n * @param element - The element to use to use for calculating `em`\n * @returns the unit as a number\n */\nexport function unitToNumber(\n  unit: string | number,\n  options: UnitToNumberOptions = {}\n): number {\n  const { fontSizeFallback = 16, element } = options;\n  if (typeof unit === \"number\") {\n    return unit;\n  }\n\n  const parsed = parseFloat(unit);\n  if (/px$/.test(unit)) {\n    return parsed;\n  }\n\n  if (typeof document === \"undefined\") {\n    return parsed * fontSizeFallback;\n  }\n\n  const rem = /rem$/.test(unit);\n  let el: HTMLElement | Element = document.documentElement as HTMLElement;\n  if (!rem && element) {\n    el = element.parentElement || element;\n  }\n\n  const fontSize = parseFloat(\n    window.getComputedStyle(el).fontSize || `${fontSizeFallback}px`\n  );\n\n  return parsed * fontSize;\n}\n"]},"metadata":{},"sourceType":"module"}