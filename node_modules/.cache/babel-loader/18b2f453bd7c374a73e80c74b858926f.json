{"ast":null,"code":"import { findSizingContainer } from \"./positioning/findSizingContainer\";\n/**\n * Attempts to scroll an element into view within another container element if\n * needed.  If either the container or element are `null`, nothing will happen.\n *\n * @param container - The container element that should be scrolled if the child\n * element is not within view.\n * @param element - The element that should be visible within the container\n * element's scroll area.\n */\n\nexport function scrollIntoView(container, element) {\n  element = findSizingContainer(element);\n\n  if (!container || !element) {\n    return;\n  }\n\n  var offsetTop = element.offsetTop;\n\n  if (element.offsetParent !== container) {\n    offsetTop -= container.offsetTop;\n  }\n\n  var elementBottom = offsetTop + element.offsetHeight;\n  var containerBottom = container.offsetHeight + container.scrollTop;\n\n  if (elementBottom > containerBottom) {\n    container.scrollTop = elementBottom - container.offsetHeight;\n  } else if (offsetTop < container.scrollTop) {\n    container.scrollTop = offsetTop;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,QAAoC,mCAApC;AAEA;;;;;;;;;;AASA,OAAM,SAAUC,cAAV,CACJC,SADI,EAEJC,OAFI,EAEuB;EAE3BA,OAAO,GAAGH,mBAAmB,CAACG,OAAD,CAA7B;;EACA,IAAI,CAACD,SAAD,IAAc,CAACC,OAAnB,EAA4B;IAC1B;EACD;;EAEK,aAAS,GAAKA,OAAO,UAArB;;EACN,IAAIA,OAAO,CAACC,YAAR,KAAyBF,SAA7B,EAAwC;IACtCG,SAAS,IAAIH,SAAS,CAACG,SAAvB;EACD;;EAED,IAAMC,aAAa,GAAGD,SAAS,GAAGF,OAAO,CAACI,YAA1C;EACA,IAAMC,eAAe,GAAGN,SAAS,CAACK,YAAV,GAAyBL,SAAS,CAACO,SAA3D;;EACA,IAAIH,aAAa,GAAGE,eAApB,EAAqC;IACnCN,SAAS,CAACO,SAAV,GAAsBH,aAAa,GAAGJ,SAAS,CAACK,YAAhD;EACD,CAFD,MAEO,IAAIF,SAAS,GAAGH,SAAS,CAACO,SAA1B,EAAqC;IAC1CP,SAAS,CAACO,SAAV,GAAsBJ,SAAtB;EACD;AACF","names":["findSizingContainer","scrollIntoView","container","element","offsetParent","offsetTop","elementBottom","offsetHeight","containerBottom","scrollTop"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\scrollIntoView.ts"],"sourcesContent":["import { findSizingContainer } from \"./positioning/findSizingContainer\";\n\n/**\n * Attempts to scroll an element into view within another container element if\n * needed.  If either the container or element are `null`, nothing will happen.\n *\n * @param container - The container element that should be scrolled if the child\n * element is not within view.\n * @param element - The element that should be visible within the container\n * element's scroll area.\n */\nexport function scrollIntoView(\n  container: HTMLElement | null,\n  element: HTMLElement | null\n): void {\n  element = findSizingContainer(element);\n  if (!container || !element) {\n    return;\n  }\n\n  let { offsetTop } = element;\n  if (element.offsetParent !== container) {\n    offsetTop -= container.offsetTop;\n  }\n\n  const elementBottom = offsetTop + element.offsetHeight;\n  const containerBottom = container.offsetHeight + container.scrollTop;\n  if (elementBottom > containerBottom) {\n    container.scrollTop = elementBottom - container.offsetHeight;\n  } else if (offsetTop < container.scrollTop) {\n    container.scrollTop = offsetTop;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}