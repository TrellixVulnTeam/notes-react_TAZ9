{"ast":null,"code":"/**\n * Attempts to find the first match index for a list of values that starts with\n * the provided query string and is within the start and end indexes. If no\n * matches are found, -1 will be returned instead.\n *\n * Since this is normally coming from a keydown event, the query *must* be a\n * string of all capital letters to work as each value will be converted to\n * uppercase before checking.\n *\n * @param value - The current query string to find within the values\n * @param values - The list of values to search within\n * @param startIndex - The start index for the search\n * @param endIndex - The end index for the search\n * @internal\n */\nexport function findMatchInRange(value, values, startIndex, endIndex) {\n  value = value.toUpperCase();\n\n  for (var i = startIndex; i < endIndex; i += 1) {\n    var content = values[i];\n\n    if (content.toUpperCase().indexOf(value) === 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * A function that is used to find the next match index within a list of values\n * by comparing the start values ignoring case.\n *\n * If a match can not be found from the search string, `-1` will be returned.\n * The search value is self-matchable by default, but it can be omitted by\n * disabling the `isSelfMatchable` argument. This will make a self-match return\n * `-1`.\n *\n * @param value - The current search value\n * @param values - A list of values to search within\n * @param startIndex - The index within the values list to start the search from\n * @param isSelfMatchable - Boolean if the current index can be included in the\n * search\n * @internal\n */\n\nexport function findMatchIndex(value, values, startIndex, isSelfMatchable) {\n  if (isSelfMatchable === void 0) {\n    isSelfMatchable = true;\n  }\n\n  var index = findMatchInRange(value, values, startIndex + 1, values.length);\n\n  if (index === -1) {\n    var endIndex = startIndex + (isSelfMatchable ? 1 : 0);\n    index = findMatchInRange(value, values, 0, endIndex);\n  }\n\n  return index;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUA,gBAAV,CACJC,KADI,EAEJC,MAFI,EAGJC,UAHI,EAIJC,QAJI,EAIY;EAEhBH,KAAK,GAAGA,KAAK,CAACI,WAAN,EAAR;;EACA,KAAK,IAAIC,CAAC,GAAGH,UAAb,EAAyBG,CAAC,GAAGF,QAA7B,EAAuCE,CAAC,IAAI,CAA5C,EAA+C;IAC7C,IAAMC,OAAO,GAAGL,MAAM,CAACI,CAAD,CAAtB;;IACA,IAAIC,OAAO,CAACF,WAAR,GAAsBG,OAAtB,CAA8BP,KAA9B,MAAyC,CAA7C,EAAgD;MAC9C,OAAOK,CAAP;IACD;EACF;;EAED,OAAO,CAAC,CAAR;AACD;AAED;;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUG,cAAV,CACJR,KADI,EAEJC,MAFI,EAGJC,UAHI,EAIJO,eAJI,EAIkB;EAAtB;IAAAA;EAAsB;;EAEtB,IAAIC,KAAK,GAAGX,gBAAgB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,UAAU,GAAG,CAA7B,EAAgCD,MAAM,CAACU,MAAvC,CAA5B;;EACA,IAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;IAChB,IAAMP,QAAQ,GAAGD,UAAU,IAAIO,eAAe,GAAG,CAAH,GAAO,CAA1B,CAA3B;IACAC,KAAK,GAAGX,gBAAgB,CAACC,KAAD,EAAQC,MAAR,EAAgB,CAAhB,EAAmBE,QAAnB,CAAxB;EACD;;EAED,OAAOO,KAAP;AACD","names":["findMatchInRange","value","values","startIndex","endIndex","toUpperCase","i","content","indexOf","findMatchIndex","isSelfMatchable","index","length"],"sources":["C:\\Users\\hungr\\Documents\\VS-CODE\\notes-react\\node_modules\\@react-md\\utils\\src\\search\\findMatchIndex.ts"],"sourcesContent":["/**\n * Attempts to find the first match index for a list of values that starts with\n * the provided query string and is within the start and end indexes. If no\n * matches are found, -1 will be returned instead.\n *\n * Since this is normally coming from a keydown event, the query *must* be a\n * string of all capital letters to work as each value will be converted to\n * uppercase before checking.\n *\n * @param value - The current query string to find within the values\n * @param values - The list of values to search within\n * @param startIndex - The start index for the search\n * @param endIndex - The end index for the search\n * @internal\n */\nexport function findMatchInRange(\n  value: string,\n  values: readonly string[],\n  startIndex: number,\n  endIndex: number\n): number {\n  value = value.toUpperCase();\n  for (let i = startIndex; i < endIndex; i += 1) {\n    const content = values[i];\n    if (content.toUpperCase().indexOf(value) === 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * A function that is used to find the next match index within a list of values\n * by comparing the start values ignoring case.\n *\n * If a match can not be found from the search string, `-1` will be returned.\n * The search value is self-matchable by default, but it can be omitted by\n * disabling the `isSelfMatchable` argument. This will make a self-match return\n * `-1`.\n *\n * @param value - The current search value\n * @param values - A list of values to search within\n * @param startIndex - The index within the values list to start the search from\n * @param isSelfMatchable - Boolean if the current index can be included in the\n * search\n * @internal\n */\nexport function findMatchIndex(\n  value: string,\n  values: readonly string[],\n  startIndex: number,\n  isSelfMatchable = true\n): number {\n  let index = findMatchInRange(value, values, startIndex + 1, values.length);\n  if (index === -1) {\n    const endIndex = startIndex + (isSelfMatchable ? 1 : 0);\n    index = findMatchInRange(value, values, 0, endIndex);\n  }\n\n  return index;\n}\n\nexport type FindMatchIndex = typeof findMatchIndex;\n"]},"metadata":{},"sourceType":"module"}